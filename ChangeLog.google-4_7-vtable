2013-05-15  Caroline Tice  <cmtice@google.com>

	* libgcc/Makefile.in: Get value for enable_vtable_verify.  Only
	generate vtv_start.o and vtv_end.o if enable_vtable_verify is yes.
	* libgcc/configure:  Add enable_vtable_verify and test for it.
	* libstdc++-v3/configure.ac: Add vtv_start.o and vtv_end.o to
	predep_objects_CXX and postdep_objects_CXX, respectively, but only if
	enable_vtable_verify is yes.  Define GLIBCXX_ENABLE_VTABLE_VERIFY.
	* libstdc++-v3/configure:  Regenerated.
	* libstdc++-v3/libsupc++/Makefile.am: Add checks for
	ENABLE_VTABLE_VERIFY;  make sure we only compile and generate vtable
	verification files if ENABLE_VTABLE_VERIFY is true.
	* libstdc++-v3/libsupc++/Makefile.in: Regenerated.
	* libstdc++-v3/libsupc++/vtv_rts.cc (dl_iterate_phdr_callback):  Fix
	some format issues; fix type cast to avoid warning.
	* libstdc++-v3/acinclude.m4:  Add information about the
	--enable-vtable-verify flag; add definition for
	GLIBCXX_ENABLE_VTABLE_VERIFY.
	* libstdc++/src/c++98/Makefile.am:  Define EXTRA_VTV_LDFLAGS, 
	LIBVTV_FLAGS, and VTV_CXXFLAGS, but only give them real values if
	ENABLE_VTABLE_VERIFY is true.  Add VTV_CXXFLAGS to AM_CXXFLAGS.  Add
	LIBVTV_FLAGS to CXXLINK.
	* libstdc++-v3/src/c++98/Makefile.in:  Regenerated.
	* libstdc++-v3/src/Makefile.am: Only add vtable verification build 
	flags and options if ENABLE_VTABLE_VERIFY is true.  Add $(LIBVTV_FLAGS)
	to CXXLINK.
	* libstdc++-v3/src/Makefile.in:  Regenerated.
	* libstdc++/src/c++11/Makefile.am:  Define EXTRA_VTV_LDFLAGS, 
	LIBVTV_FLAGS, and VTV_CXXFLAGS, but only give them real values if
	ENABLE_VTABLE_VERIFY is true.  Add VTV_CXXFLAGS to AM_CXXFLAGS.  Add
	LIBVTV_FLAGS to CXXLINK.
	* libstdc++-v3/src/c++11/Makefile.in:  Regenerated.
	* configure.ac:  Add libsupc++/.libs to library search path for
	CXX_FOR_TARGET and RAW_CXX_FOR_TARGET.
	* configure:  Regenerated.
	* gcc/Makefile.in:  Removed definitino of CP_TREE_H.  Removed
	CP_TREE_H from rule for building tree-vtable-verify.o.  Un-comment
	header files in rule for building tree-vtable-verify.o.
 	* gcc/tree-vtable-verify.c: Remove cp-tree.h from include list.
	(verify_vtbl_ptr_fndecl): Change static decl to extern decl. Add local
	initialization statement.
	(vtbl_map_node_registration_insert): Change return type to bool; Return
	true if something got inserted & false otherwise.
	(vtbl_map_get_node):  Remove code for resetting type qualifiers; add
	assertion that type is unqualified.
	(find_or_create_vtbl_map_node):  Ditto.
	(build_vtable_verify_fndecl):  Move function to
	vtable-class-hierarchy.c (c++ front end).
	(reset_type_qualifiers):  Delete function.
	(type_name_is_vtable_pointer):  Delete function.
	(is_vtable_assignment_stmt):  Remove unnecessary test; call
	DECL_VIRTUAL_P rather than examining name of field decl (request from
	Jason Merrill).
	(my_get_vtbl_decl_for_binfo):  Delete function.
	(find_vtable_ptr_assignment_stmt):  Delete function.
	(find_stmt_in_bb_stmts):  Delete function.
	(extract_object_class_type):  Heavily rewrote function, based on
	comments from Diego.
	(verify_bb_vtables): Heavily rewrote function, based on comments from
	Diego (much simpler now).
	* gcc/tree-vtable-verify.h: Added extern decl for
	verify_vtbl_ptr_fndecl.  Fixed some spacing issues. Changed return type
	of vtbl_map_node_registration_insert to bool.  Eliminated decl for
	reset_type_qualifiers.
	* gcc/cp/pt.c (mark_class_instantiated):  Remove unnecessary call to
	vtv_save_class_info.
	* gcc/cp/cp-tree.h: Remove decl for get_mangled_id; Add decls for 
	get_mangled_vtable_map_var_name and vtv_build_vtable_verify_fndecl.
	* gcc/cp/decl2.c (cp_write_global_declarations):  Add call to
	vtv_build_vtable_verify_fndecl.
	(vtv_finish_verification_constructor_init_function): Remove commented
	out code.
	* gcc/cp/vtable-class-hierarchy.c (vtv_build_vtable_verify_fndecl): 
	Move function here from tree-vtable-verify.c, and add 'vtv_' prefix to
	name.
	(record_register_pairs):  Rename function to
	check_and_record_registered_pairs. Also change name at all call sites.
	After modifying vtbl_map_nde_registration_insert to return a boolean,
	eliminate redundant call to vtbl_map_node_registration_find.
	(register_vptr_fields):  Renamed function to
	register_construction_vtables and updated call sites appropriately.
	Completely re-wrote large portions of this function based on feedback
	from Jason Merrill about how it should be done.
	(init_all_sets): Rearrange var decls to elimiate ISO warning about 
	mixed decls and code.
	(write_out_counters):  Ditto.  Add output for sub_vtt counter.
	(vtable_find_or_create_map_decl):  Remove the type qualifiers checking
	and setting code.  Call get_mangled_vtable_map_var_name to get mangled
	name for vtable map variable.
	* gcc/cp/mangle.c (mangle_decl): Only apply our change if
	flag_vtable_verify is true.
	(get_mangled_vtable_map_var_name):  New function to generate mangled
	vtable map variable names.
	* gcc/cgraph.c (cgraph_add_new_function):  If flag_vtable_verify is
	true, call cgraph_get_create_node rather than cgraph_create_node.
	
2013-05-13  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: (num_calls_to_register_pair,
	num_calls_to_init_set, num_calls_to_verify_vtable, register_pair_cycles,
	init_set_cycles, verify_vtable_cycles) Initialize new global variables.
	(get_cycle_count):  New function.  Do nothing unless VTV_STATS is
	defined.
	(accumulate_cycle_count):  New function.  Do nothing unless VTV_STATS is
	defined.
	(increment_num_calls):  New function.  Do nothing unless VTV_STATS is
	defined.
	(read_section_offset_and_length):  New function.  Most of the code from
	dl_iterate_phdr_callback that reads the section information out of the
	binary file on disk and stores the information in a cache has been 
	moved into this function.
	(dl_iterate_phdr_callback): Move a lot of code out of here to 
	read_section_offset_and_length.  Assign results of mprotect calls to
	result variable; surround calls to mprotect with calls to get_cycle_count
 	and accumulate_cycle_count; add the difference to mprotect_cycles
	variable. Call increment_num_calls on num_calls_to_mprotect when mprotect
	is called, and add the number of pages protected or unprotected to
	num_pages_protected.
	(__VLTInitSetSymbolDebug):  Call get_cycle_count at the start and  call
	accumulate_cycle_count just before returning; add the differences to
	init_set_cycles.  Call increment_num_calls on num_calls_to_init_set.
	(__VLTInitSetSymbol): Ditto.
	(__VLTRegisterPairDebug): Call get_cycle_count at the start and call
	accumulate_cycle_count at the end of the function; add the difference to
	register_pair_cycles.  Call inncrement_num_calls on
	num_calls_to_register_pair.
	(__VLTRegisterPair): Ditto.
	(__VLTVerifyVtablePointerDebug):  Ditto, except use the verify_vtable
	counters.
	(__VLTVerifyVtable): Ditto.
	(page_count_2): New static global variable.
	(dl_iterate_phdr_count_pages):  New function to iterate through all the
	loaded modules and count the number of pages in their vtable_map_vars
	sections.
	(count_all_pages): New function.
	(__VLTDumpStats):  New function; collects and writes out all the runtime
	stats.
	* libstdc++-v3/libsupc++/vtv_malloc.h (rdtsc): New function, to help
	measure runtime cycles.
	(num_calls_to_mprotect, num_pages_protected, num_calls_to_register_pair,
	num_calls_to_init_set, mprotect_cycles, register_pair_cycles,
	init_set_cycles):  New extern global variable decls, for measurements.
	(VTV_count_mmapped_pages): New extern function decl.
	* libstdc++-v3/libsupc++/vtv_malloc.cc (num_calls_to_mprotect,
	num_pages_protected, mprotect_cycles): Initialize global variables.
	(VTV_count_mmapped_pages):  New function.
	(VTV_malloc_protect): Pull call to mprotect out of conditional
	statement, surround it by calls to rdtsc, and add the difference to
	mprotect_cycles.  Also increment num_calls_to_mprotect and
	num_pages_protected.
	(VTV_malloc_unprotect): Ditto.
	(VTV_malloc_dump_stats): Remove directory from log file name.
	* libstdc++-v3/config/abi/pre/gnu.ver: Add _Z14__VLTDumpStats* to the
	list of global exported symbols.
	* gcc/cp/vtable-class-hierarchy.c (nun_calls_to_regpair,
	num_calls_to_initset): New global static variables.
	(register_vptr_fields): Fix white-space formatting. Increment
	num_calls_to_regpair and current_set_size.
	(register_other_binfo_vtables):  Increment num_calls_to_regpair and
	current_set_size.
	(write_out_current_set_data): New function, writes the name of the
	current base class and the number of vtable pointers for that class'
	set to a log file.
	(register_all_pairs):  Initializes current_set_size each time the base
	class changes; increments num_calls_to_regpair and current_set_size.
	Calls write_out_current_set_data if flag_vtv_counts is true.
	(init_all_sets):  Increments num_calls_to_initset.
	(write_out_vtv_count_data):  New functions, writes the new counter data
	except for the set sizes to a log file.
	(vtv_register_class_hierarchy): Calls write_out_vtv_count_data if
	flag_vtv_clounts is true.
	(vtv_generate_init_routine):  Remove debug_num_verified; commment out
	call to write_out_counters.

2013-05-02  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc (vtv-change-permission.h) New
	include.
	(__VLTChangePermission): Mark function as extern "C".
	(__vtv_verify_fail) Fix white-space formatting.
	* libstdc++-v3/libsupc++/vtv_rts.h (__VLTP_READ_ONLY, __VLTP_READ_WRITE)
	Remove definitions (move to vtv-change-permission.h).
	(__VLTChangePermission):  Remove extern function decl move it to
	vtv-change-permission.h).
	* libstdc++-v3/libsupc++/vtv_stubs.cc: (vtv-change-permission.h):  New
	include.
	(__VLTChangePermission):  Make function extern "C".
	Fix white-space formatting.
	* libstdc++-v3/libsupc++/vtv_init.cc (vtv-change-permission.h): new
	include.
	* libstdc++-v3/libsupc++/vtv_malloc.cc
	(change_protections_on_data_chunks):  New function.  Goes through all
	the pages we have allocated so far and  calls mprotect to change the
	protections on the pages. Does this in as few calls as possible by
	looking for contiguously allocated chunks and changing permission on
	all of them at once.
	(VTV_malloc_protect):  Re-written. Calls
	change_protections_on_data_chunks, with PROT_READ.
	(VTV_malloc_unprotect): Ditto, except with PROT_READ | PROT_WRITE.
	(VTV_malloc_dump_stats): Remove directory from log file name.
	* libstdc++-v3/config/abi/pre/gnu.ver: Change __VLTChangePermission from
	C++ symbol to a C symbol, in the global export list.
	* include/vtv-change-permission.h:  New file.
	* libgcc/config.host (extra_parts):  Add vtv_start_preinit.o and
	vtv_end_preinit.o to list.
	* libgcc/Makefile.in: Add rules to build vtv_start_preinit.o and
	vtv_end_preinit.o
	* libgcc/vtv_start_preinit.c: New file.
	* libgcc/vtv_end_preinit.c:  New file.
	* libgcc/vtv_start.c: Remove VTV_PAGE_SIZE macro; add
	vtv-change-permisison.h include statement.
	* libgcc/vtv_end.c:  Ditto.
	* gcc/cp/g++spec.c (VTABLE_LOAD_MODULE_PREINIT):  New macro.
	(lang_specific_driver):  Add VTABLE_LOAD_MODULE_PREINIT to  link
	options, if -fvtable-verify=preinit was used.
	* gcc/cp/vtable-class-hierarchy.c (init_functions):  Remove bits that
	made vlt_change_permission_fndecl a C++ function decl.
	(register_vptr_fields):  Fix white-space formatting.
	(vtv_register_class_hierarchy_information):  Remove code to add
	calls to __VLTChangePermission in the preinit case.
	(vtv_generate_init_routine):  Remove debug_num_verified. Use
	flag_vtv_counts to control call to write_out_counters.
	* gcc/tree-vtable-verify.c:  Fix white-space formatting.
	* gcc/common.opt (fvtv-counts):  New flag.
	* gcc/config/i386/gnu-user.h (ENDFILE_SPEC):  Modify to use
	vtv_end_preinit.o for -fvtable-verify=preinit, and vtv_end.o for
	-fvtable-verify=std.
	* gcc/config/i386/gnu-user64.h: Ditto.
	* gcc/config/gnu-user.h (GNU_USER_TARGET_STARTFILE_SPEC): Modify to use
	vtv_start_preinit.o for -fvtable-verify=preinit, and vtv_start.o for
	-fvtable-verify=std.
	(GNU_USER_TARGET_ENDFILE_SPEC): Modify to use vtv_end_preinit.o for
	-fvtable-verify=preinit, and vtv_end.o for -fvtable-verify=std.

2013-05-01  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_malloc.cc (page_size): Delete static 
	global variable.
	(VTV_malloc_protect): Use VTV_PAGE_SIZE instead of page_size.
	(VTV_malloc_unprotect): Ditto.
	(obstack_chunk_alloc): Ditto.
	(VTV_malloc_init): Verify that VTV_PAGE_SIZE is the same as
	sysconf (_SC_PAGE_SIZE).  Replace page_size with VTV_PAGE_SIZE.
	(VTV_malloc_stats): Replace page_size with VTV_PAGE_SIZE.
	* libstdc++-v3/libsupc++/vtv_utils.h (VTV_PAGE_SIZE): New constant.
	* libstdc++-v3/libsupc++/vtv_rts.cc (vtv_page_size): Delete static
	global variable.
	(struct mprotect_data): Delete struct definition.
	(dl_iterate_callback_header): Replace mdata->prot_mode with
	mprotect_flags (an integer); Replace mdata->page_size with 
	VTV_PAGE_SIZE.
	(change_protections_on_phdr_cace): Remove mdata parameter. Replace
	mdata->page_size with VTV_PAGE_SIZE.
	(VTV_unprotect_vtable_vars): Replace mdata.prot_mode with 
	mprotect_flags. Replace mdata.page_size with VTV_PAGE_SIZE. Pass
	mprotect_flags for arguments instead of mdata.
	(VTV_protect_vtable_vars): Ditto.
	(__vtv_verify_fail): Replace vtv_page_size with VTV_PAGE_SIZE.

2013-04-30  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: (WHITELIST_SIZE,
	whitelist_fail_count, whitelist_phdr_callback_count, whitelist_entries,
	whiteliest_data, vtv_page_size):  New variables.
	(struct whitelist_data_struct):  New struct.
	(update_whitelist_lock): New mutex for whitelist work.
	(dl_iterate_phdr_whitelist_callback): New function; called by
	dl_iterate_phdr, it checks each entry to see if it is for one of the
	white-listed libraries, and if so, records the addresses of the RELRO
	section for that library in whitelist_data (assuming it's not already
	there).
	(dl_iterate_phdr_callback):  Initialize vtv_page_size.
	(initialize_whitelist_mutexes): New function, to initialize
	update_whitelist_lock mutex.
	(__vtv_verify_fail):  Check to see if whitelist_data has any empty
	entries; if so call dl_iterate_phdr, with the callback
	dl_iterate_phdr_whitelist_callback.  Call mprotect before & after
	calling dl_iterate_phdr, to make whitelist_data writeable, then
	read-only again.  All code to update the whitelist data is protected
	by the update_whitelist_lock mutex.  One the data is up-to-date, go
	through whitelist_data, to see if the failed vtable_pointer is in the
	address range of any whitelisted library.  If so, return; otherwise
	continue to fail.

2013-04-30  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: (sect_info_cache,
	num_cache_entries): Mark these variables as VTV_PROTECTED_VAR.
	(dl_iterate_phdr_callback):  Remove first_time variable and condition
	clause (not needed in C++).  Move the "if debug_function" condition to
	not control whether or not data gets stored in the sect_info_cache (now
	the data alwasys test stored in the cache if we're in read-write mode).
	(change_protections_on_phdr_cache): New function, to make the
	sect_info_cache either read-only or read-write.
	(VTV_unprotect_vtable_vars): Add call to
	change_protections_on_phdr_cache.
	(VTV_protect_vtable_vars): Add call to change_protections_on_phdr_cache.

2013-04-17  Luis Lozano  <llozano@google.com>

	* gcc/tree-ssa-copyrename.c: fix from Rong for the copy-rename
	issue

2013-02-07  Luis Lozano  <llozano@google.com>

	* gcc/cp/vtable-class-hierarchy.c: make sure that the symbol
	__vtv_defined_in_vtv_init_lib is marked as HIDDEN so that we
	get complains about this at link time instead of at load time.

2013-02-04  Caroline Tice  <cmtice@google.com>

        * libstdc++-v3/src/Makefile.am: Add definitions for libvtv___la_LIBADD
        and LIBVTV_FLAGS.
	* libstdc++-v3/src/Makefile.in: Regenerate from Makefile.am
        * libstdc++-v3/libsupc++/vtv_rts.cc (dl_iterate_phdr_callback):  Mark
        unused parameter with __attribute__((unused)), to avoid compiler
	warnings.
        (insert_only_hash_map_allocacor::dealloc): Ditto.
        * vtv_utils.cc (logs_dir): Change definition.
        (alt_logs_dir):  New global variable.
        (vtv_open_log):  Update to try second directory if first fails.
        * gcc/cp/g++spec.c (lang_specific_driver):  Don't add vtable link
        commands if library flag is not set, i.e. linker won't be called.
        * gcc/cp/class_hierarchy.c (write_out_counters):  Change format of
        output and add percentage.  Also abort if percentage is too low.
        * gcc/cp/mangle.c (mangle_decl):  Make sure the decl is a VAR_DECL
        before calling varpool_extra_name_alias.
	* gcc/tree-ssa-copyrename.c (copy_rename_partition_coalesce):  Use
        gimple_types_compativle_p rather than types_compatible_p.
        * gcc/BASE_VER: Change version to 4.7.0-google-vtable.
        * gcc/gimple.c (gimple_types_compatible_p): Remove 'static' function 
        qualifier.
        * gcc/gimple.h (gimple_types_compatible_p):  Add extern function decl.

2013-01-30  Caroline Tice  <cmtice@google.com>

        Migrate vtable verification work from GCC 4.6.3.
        * gcc/tree-pass.h (pass_vtable_verify):  Declare new pass.
	* gcc/tree-vtable-verify.c: New file.
	* gcc/tree-vtable-verify.h: New file.
	* gcc/timevr.def (TV_VTABLE_VERIFICATION): New timevar def.
	* gcc/varasm.c (assemble_variable):  Check to see if the variable
	goes into the .vtable_map_vars section and make sure it gets the
	appropriate link flags if so.
	(assemble_vtv_preinit_initializer):  New function.
	(default_sectino_type_flags):  Make sure the .vtable_map_vars section
	is LINK_ONCE.
	* gcc/config/gun-user.h: Add vtv_start.o to the
	GNU_USER_TARGET_STARTFILE_SPEC, and add vtv_end.o to the
	GNU_USER_TARGET_ENDFILE_SPEC.
	* gcc/config/i386/gnu-user.h: Add vtv_end.o to the ENDFILE_SPEC.
	* gcc/config/i386/gnu-user64.h: Ditto.
	* gcc/output.h (assemble_vtv_preinit_initializer):  New function decl.
	* gcc/flag-types.h (enum vtv_priority):  New enum, declaring the
	values for the new '-fvtable-verify=' option.
	* gcc/common.opt: Add the '-fvtable-verify=' option, along with the
	valid arguments for the option.
	* gcc/passes.c (init_optimization_passes):  Add call to
	pass_vtable_verify.
	* gcc/cp/g++spec.c (VTABLE_LOAD_MODULE_INIT): New macro definition
	for adding -lvtv_init to the link line.
	(lang_specific_driver): New global variable, saw_vtable_verify; add
	code to check for '-fvtable-verify=' and update the variable
	appropriately.  Also update num_args, and add VTABLE_LOAD_MODULE_INIT,
	and -u_vtable_map_vars_start and -u_vtable_map_vars_end to the link
	line.
	* gcc/cp/config-lang.in (gtfiles): Add vtable-class-hierarchy.c to the
	list.
	* gcc/cp/Make-lang.in (CXX_AND_OBJCXX_OBJS): Add
	vtable-class-hierarchy.o to the list.  Also add rule for making
	vtable-class-hierarchy.o.
	* gcc/cp/class.c (finish_struct_1):  Add call to vtv_save_class_info.
	* gcc/cp/pt.c (makr_class_instantiated):  Ditto.
	* gcc/cp/init.c (build_vtbl_address):  Remove static qualifier.
	* gcc/cp/cp-tree.h (vtv_start_verification_constructor_init_function,
	vtv_finish_verification_constructor_init_function, build_vtbl_address,
	get_mangled_id, vtv_comput_class_hierarchy_transitive_closure,
	vtv_generate_init_routine,vtv_save_class_info, vtv_recover_class_info)
	Add extern function decls.
	* gcc/cp/decl2.c (cp_write_global_declarations):  Add calls to
	vtv_recover_class_info and
	vtv_computer_class_hierarchy_transitive_closure before the call to
	cgraph_finalize_compilation_unit.  Add call to
	vtv_generate_init_routine after the call to
	cgraph_finalize_compilation_unit.
	(vtv_start_verification_constructor_init_function):  New function.
	(vtv_finish_verification_constructor_init_function):  New function.
	* gcc/cp/vtable-class-hierarchy.c: New file.
	* gcc/cp/mangle.c (get_mangled_id): Remove static function qualifier.
	* gcc/tree.h (save_vtable_map_decl):  New function decl.
	* gcc/Makefile.in (OBJS): Add tree-vtable-verify.o to the list.  Also
	add the rule for making tree-vtable-verify.o
	* gcc/cgraph.c (cgraph_add_new_function):  Change call to
	cgraph_create_node to a call to cgraph_get_create_node.
	* libstdc++-v3/configure:  Add vtv_start.o to predep_objects; add 
	vtv_end.o to postdep_objects.
	* libstdc++-v3/src/Makefile.am:  Add "-Wl,-u_vtable_map_vars_start,
	-u_vtable_map_vars_end" to libstdc___la_LDFLAGS.
	* libstdc++-v3/src/Makefile.in: Regenerate from Makefile.am.
	* libstdc++-v3/config/abi/pre/gnu.ver:  Add __VLT* and __vtv functions
	to the exported symbols list.
	* libstdc++-v3/libsupc++/vtv_utils.cc:  New file.
	* libstdc++-v3/libsupc++/vtv_utils.h:  New file.
	* libstdc++-v3/libsupc++/vtv_init.cc:  New file.
	* libstdc++-v3/libsupc++/vtv_malloc.cc:  New file.
	* libstdc++-v3/libsupc++/Makefile.am:  Add vtv_rts.cc, 
	vtv_malloc.cc and vtv_utils.cc to sources list.  Define
	vtv_init_sources and vtv_stubs_sources.  Add libvtv_init.la and
	libvtv_stubs.la to toolexeclib_LTLIBRARIES.  Add definitions for
	libvtv_init_la_SOURCES and libvtv_stubs_la_SOURCES.
	* libstdc++-v3/libsupc++/Makefile.in:  Regenerate from Makefile.am.
	* libstdc++-v3/libsupc++/vtv_rts.cc:  New file.
	* libstdc++-v3/libsupc++/vtv_rts.h:  New file.
	* libstdc++-v3/libsupc++/vtv_fail.h:  New file.
	* libstdc++-v3/libsupc++/vtv_map.h:  New file.
	* libstdc++-v3/libsupc++/vtv_set.h:  New file.
	* libstdc++-v3/libsupc++/vtv_stubs.cc:  New file.
	* libgcc/config.host (extra_parts): Add vtv_start.o and vtv_end.o
	* libgcc/Makefile.in:  Add rules for building vtv_start.o and
	vtv_end.o.
	* libgcc/vtv_end.c:  New file.
	* libgcc/vtv_start.c:  New file.


