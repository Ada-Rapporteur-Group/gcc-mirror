2013-05-01  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_malloc.cc (page_size): Delete static 
	global variable.
	(VTV_malloc_protect): Use VTV_PAGE_SIZE instead of page_size.
	(VTV_malloc_unprotect): Ditto.
	(obstack_chunk_alloc): Ditto.
	(VTV_malloc_init): Verify that VTV_PAGE_SIZE is the same as
	sysconf (_SC_PAGE_SIZE).  Replace page_size with VTV_PAGE_SIZE.
	(VTV_malloc_stats): Replace page_size with VTV_PAGE_SIZE.
	* libstdc++-v3/libsupc++/vtv_utils.h (VTV_PAGE_SIZE): New constant.
	* libstdc++-v3/libsupc++/vtv_rts.cc (vtv_page_size): Delete static
	global variable.
	(struct mprotect_data): Delete struct definition.
	(dl_iterate_callback_header): Replace mdata->prot_mode with
	mprotect_flags (an integer); Replace mdata->page_size with 
	VTV_PAGE_SIZE.
	(change_protections_on_phdr_cace): Remove mdata parameter. Replace
	mdata->page_size with VTV_PAGE_SIZE.
	(VTV_unprotect_vtable_vars): Replace mdata.prot_mode with 
	mprotect_flags. Replace mdata.page_size with VTV_PAGE_SIZE. Pass
	mprotect_flags for arguments instead of mdata.
	(VTV_protect_vtable_vars): Ditto.
	(__vtv_verify_fail): Replace vtv_page_size with VTV_PAGE_SIZE.

2013-04-30  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: (WHITELIST_SIZE,
	whitelist_fail_count, whitelist_phdr_callback_count, whitelist_entries,
	whiteliest_data, vtv_page_size):  New variables.
	(struct whitelist_data_struct):  New struct.
	(update_whitelist_lock): New mutex for whitelist work.
	(dl_iterate_phdr_whitelist_callback): New function; called by
	dl_iterate_phdr, it checks each entry to see if it is for one of the
	white-listed libraries, and if so, records the addresses of the RELRO
	section for that library in whitelist_data (assuming it's not already
	there).
	(dl_iterate_phdr_callback):  Initialize vtv_page_size.
	(initialize_whitelist_mutexes): New function, to initialize
	update_whitelist_lock mutex.
	(__vtv_verify_fail):  Check to see if whitelist_data has any empty
	entries; if so call dl_iterate_phdr, with the callback
	dl_iterate_phdr_whitelist_callback.  Call mprotect before & after
	calling dl_iterate_phdr, to make whitelist_data writeable, then
	read-only again.  All code to update the whitelist data is protected
	by the update_whitelist_lock mutex.  One the data is up-to-date, go
	through whitelist_data, to see if the failed vtable_pointer is in the
	address range of any whitelisted library.  If so, return; otherwise
	continue to fail.

2013-04-30  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: (sect_info_cache,
	num_cache_entries): Mark these variables as VTV_PROTECTED_VAR.
	(dl_iterate_phdr_callback):  Remove first_time variable and condition
	clause (not needed in C++).  Move the "if debug_function" condition to
	not control whether or not data gets stored in the sect_info_cache (now
	the data alwasys test stored in the cache if we're in read-write mode).
	(change_protections_on_phdr_cache): New function, to make the
	sect_info_cache either read-only or read-write.
	(VTV_unprotect_vtable_vars): Add call to
	change_protections_on_phdr_cache.
	(VTV_protect_vtable_vars): Add call to change_protections_on_phdr_cache.

2013-04-17  Luis Lozano  <llozano@google.com>

	* gcc/tree-ssa-copyrename.c: fix from Rong for the copy-rename
	issue

2013-02-07  Luis Lozano  <llozano@google.com>

	* gcc/cp/vtable-class-hierarchy.c: make sure that the symbol
	__vtv_defined_in_vtv_init_lib is marked as HIDDEN so that we
	get complains about this at link time instead of at load time.

2013-02-04  Caroline Tice  <cmtice@google.com>

        * libstdc++-v3/src/Makefile.am: Add definitions for libvtv___la_LIBADD
        and LIBVTV_FLAGS.
	* libstdc++-v3/src/Makefile.in: Regenerate from Makefile.am
        * libstdc++-v3/libsupc++/vtv_rts.cc (dl_iterate_phdr_callback):  Mark
        unused parameter with __attribute__((unused)), to avoid compiler
	warnings.
        (insert_only_hash_map_allocacor::dealloc): Ditto.
        * vtv_utils.cc (logs_dir): Change definition.
        (alt_logs_dir):  New global variable.
        (vtv_open_log):  Update to try second directory if first fails.
        * gcc/cp/g++spec.c (lang_specific_driver):  Don't add vtable link
        commands if library flag is not set, i.e. linker won't be called.
        * gcc/cp/class_hierarchy.c (write_out_counters):  Change format of
        output and add percentage.  Also abort if percentage is too low.
        * gcc/cp/mangle.c (mangle_decl):  Make sure the decl is a VAR_DECL
        before calling varpool_extra_name_alias.
	* gcc/tree-ssa-copyrename.c (copy_rename_partition_coalesce):  Use
        gimple_types_compativle_p rather than types_compatible_p.
        * gcc/BASE_VER: Change version to 4.7.0-google-vtable.
        * gcc/gimple.c (gimple_types_compatible_p): Remove 'static' function 
        qualifier.
        * gcc/gimple.h (gimple_types_compatible_p):  Add extern function decl.

2013-01-30  Caroline Tice  <cmtice@google.com>

        Migrate vtable verification work from GCC 4.6.3.
        * gcc/tree-pass.h (pass_vtable_verify):  Declare new pass.
	* gcc/tree-vtable-verify.c: New file.
	* gcc/tree-vtable-verify.h: New file.
	* gcc/timevr.def (TV_VTABLE_VERIFICATION): New timevar def.
	* gcc/varasm.c (assemble_variable):  Check to see if the variable
	goes into the .vtable_map_vars section and make sure it gets the
	appropriate link flags if so.
	(assemble_vtv_preinit_initializer):  New function.
	(default_sectino_type_flags):  Make sure the .vtable_map_vars section
	is LINK_ONCE.
	* gcc/config/gun-user.h: Add vtv_start.o to the
	GNU_USER_TARGET_STARTFILE_SPEC, and add vtv_end.o to the
	GNU_USER_TARGET_ENDFILE_SPEC.
	* gcc/config/i386/gnu-user.h: Add vtv_end.o to the ENDFILE_SPEC.
	* gcc/config/i386/gnu-user64.h: Ditto.
	* gcc/output.h (assemble_vtv_preinit_initializer):  New function decl.
	* gcc/flag-types.h (enum vtv_priority):  New enum, declaring the
	values for the new '-fvtable-verify=' option.
	* gcc/common.opt: Add the '-fvtable-verify=' option, along with the
	valid arguments for the option.
	* gcc/passes.c (init_optimization_passes):  Add call to
	pass_vtable_verify.
	* gcc/cp/g++spec.c (VTABLE_LOAD_MODULE_INIT): New macro definition
	for adding -lvtv_init to the link line.
	(lang_specific_driver): New global variable, saw_vtable_verify; add
	code to check for '-fvtable-verify=' and update the variable
	appropriately.  Also update num_args, and add VTABLE_LOAD_MODULE_INIT,
	and -u_vtable_map_vars_start and -u_vtable_map_vars_end to the link
	line.
	* gcc/cp/config-lang.in (gtfiles): Add vtable-class-hierarchy.c to the
	list.
	* gcc/cp/Make-lang.in (CXX_AND_OBJCXX_OBJS): Add
	vtable-class-hierarchy.o to the list.  Also add rule for making
	vtable-class-hierarchy.o.
	* gcc/cp/class.c (finish_struct_1):  Add call to vtv_save_class_info.
	* gcc/cp/pt.c (makr_class_instantiated):  Ditto.
	* gcc/cp/init.c (build_vtbl_address):  Remove static qualifier.
	* gcc/cp/cp-tree.h (vtv_start_verification_constructor_init_function,
	vtv_finish_verification_constructor_init_function, build_vtbl_address,
	get_mangled_id, vtv_comput_class_hierarchy_transitive_closure,
	vtv_generate_init_routine,vtv_save_class_info, vtv_recover_class_info)
	Add extern function decls.
	* gcc/cp/decl2.c (cp_write_global_declarations):  Add calls to
	vtv_recover_class_info and
	vtv_computer_class_hierarchy_transitive_closure before the call to
	cgraph_finalize_compilation_unit.  Add call to
	vtv_generate_init_routine after the call to
	cgraph_finalize_compilation_unit.
	(vtv_start_verification_constructor_init_function):  New function.
	(vtv_finish_verification_constructor_init_function):  New function.
	* gcc/cp/vtable-class-hierarchy.c: New file.
	* gcc/cp/mangle.c (get_mangled_id): Remove static function qualifier.
	* gcc/tree.h (save_vtable_map_decl):  New function decl.
	* gcc/Makefile.in (OBJS): Add tree-vtable-verify.o to the list.  Also
	add the rule for making tree-vtable-verify.o
	* gcc/cgraph.c (cgraph_add_new_function):  Change call to
	cgraph_create_node to a call to cgraph_get_create_node.
	* libstdc++-v3/configure:  Add vtv_start.o to predep_objects; add 
	vtv_end.o to postdep_objects.
	* libstdc++-v3/src/Makefile.am:  Add "-Wl,-u_vtable_map_vars_start,
	-u_vtable_map_vars_end" to libstdc___la_LDFLAGS.
	* libstdc++-v3/src/Makefile.in: Regenerate from Makefile.am.
	* libstdc++-v3/config/abi/pre/gnu.ver:  Add __VLT* and __vtv functions
	to the exported symbols list.
	* libstdc++-v3/libsupc++/vtv_utils.cc:  New file.
	* libstdc++-v3/libsupc++/vtv_utils.h:  New file.
	* libstdc++-v3/libsupc++/vtv_init.cc:  New file.
	* libstdc++-v3/libsupc++/vtv_malloc.cc:  New file.
	* libstdc++-v3/libsupc++/Makefile.am:  Add vtv_rts.cc, 
	vtv_malloc.cc and vtv_utils.cc to sources list.  Define
	vtv_init_sources and vtv_stubs_sources.  Add libvtv_init.la and
	libvtv_stubs.la to toolexeclib_LTLIBRARIES.  Add definitions for
	libvtv_init_la_SOURCES and libvtv_stubs_la_SOURCES.
	* libstdc++-v3/libsupc++/Makefile.in:  Regenerate from Makefile.am.
	* libstdc++-v3/libsupc++/vtv_rts.cc:  New file.
	* libstdc++-v3/libsupc++/vtv_rts.h:  New file.
	* libstdc++-v3/libsupc++/vtv_fail.h:  New file.
	* libstdc++-v3/libsupc++/vtv_map.h:  New file.
	* libstdc++-v3/libsupc++/vtv_set.h:  New file.
	* libstdc++-v3/libsupc++/vtv_stubs.cc:  New file.
	* libgcc/config.host (extra_parts): Add vtv_start.o and vtv_end.o
	* libgcc/Makefile.in:  Add rules for building vtv_start.o and
	vtv_end.o.
	* libgcc/vtv_end.c:  New file.
	* libgcc/vtv_start.c:  New file.


