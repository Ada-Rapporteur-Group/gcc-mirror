2014-10-20  Julian Brown  <julian@codesourcery.com>

	* oacc-host.c (openacc_register_async_cleanup): New.
	(host_dispatch): Initialise register_async_cleanup_func entry.
	* oacc-int.h (struct ACC_dispatch_t): Add
	register_async_cleanup_func hook.
	* oacc-parallel.c (GOACC_parallel): Call
	register_async_cleanup_func hook after queuing asynchronous
	copy-back.
	* plugin-nvptx.c (enum PTX_event_type): Add PTX_EVT_ASYNC_CLEANUP.
	(struct PTX_event): Remove tgt field.
	(event_gc): Don't do async cleanup in PTX_EVT_KNL, do it in
	PTX_EVT_ASYNC_CLEANUP instead.
	(event_add): Remove tgt argument. Support PTX_EVT_ASYNC_CLEANUP
	events.
	(PTX_exec, PTX_host2dev, PTX_dev2host, PTX_wait_async)
	(PTX_wait_all_async): Update calls to event_add.
	(openacc_register_async_cleanup): New.
	(PTX_async_test): Call event_gc on success path.
	(PTX_async_test_all): Likewise.
	* target.c (gomp_load_plugin_for_device): Initialise
	register_async_cleanup hook.

2014-10-20  Julian Brown  <julian@codesourcery.com>

	* Makefile.am (AM_CPPFLAGS): Fix search path for locating
	gomp-constants.h.
	* Makefile.in: Regenerate.

2014-10-20  Julian Brown  <julian@codesourcery.com>

	* libgomp-plugin.c (gomp_plugin_*): Rename to...
	(GOMP_PLUGIN_*): This.
	* libgomp-plugin.h: Likewise.
	* libgomp.map: Likewise.
	* oacc-host.c (GOMP): Use GOMP_PLUGIN_ in macro expansion.
	* oacc-plugin.c (gomp_plugin_*): Rename to...
	(GOMP_PLUGIN_*): This.
	* plugin-nvptx.c: Likewise.

2014-10-17  Thomas Schwinge  <thomas@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* libgomp.texi: Outline documentation for OpenACC.

2014-10-17  James Norris  <jnorris@codesourcery.com>
	    Thomas Schwinge  <thomas@codesourcery.com>
	    Tom de Vries  <tom@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>

	* testsuite/Makefile.in: Regenerated.
	* testsuite/lib/libgomp.exp
	(check_effective_target_openacc_nvidia_accel_present)
	(check_effective_target_openacc_nvidia_accel_selected): New
	functions.
	* testsuite/libgomp.oacc-fortran/fortran.exp: New exp file.
	* testsuite/libgomp.oacc-fortran/*.f: New tests.
	* testsuite/libgomp.oacc-fortran/*.f90: Likewise.
	* testsuite/libgomp.oacc-c/c.exp: New exp file.
	* testsuite/libgomp.oacc-c/subr.ptx: New file.
	* testsuite/libgomp.oacc-c/subr.cu: New file.
	* testsuite/libgomp.oacc-c/timer.h: New file.
	* testsuite/libgomp.oacc-c/*.c: New tests.
	* testsuite/libgomp.oacc-c++/c++.exp: New exp file.

2014-10-17  Nathan Sidwell  <nathan@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>
	    Thomas Schwinge  <thomas@codesourcery.com>
	    Tom de Vries  <tom@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>

	* Makefile.am (AM_CPPFLAGS): Search in ../include also.
	(libgomp_plugin_nvptx_version_info, libgomp_plugin_nvptx_la_SOURCES)
	(libgomp_plugin_nvptx_la_CPPFLAGS, libgomp_plugin_nvptx_la_LDFLAGS)
	(libgomp_plugin_nvptx_la_LIBADD)
	(libgomp_plugin_nvptx_la_LIBTOOLFLAGS): Set variables if
	PLUGIN_NVPTX is defined.
	(toolexeclib_LTLIBRARIES): Add nonshm-host
	and (conditionally) nvidia plugins.
	(libgomp_plugin_nonshm_host_version_info)
	(libgomp_plugin_nonshm_host_la_SOURCES)
	(libgomp_plugin_nonshm_host_la_CPPFLAGS)
	(libgomp_plugin_nonshm_host_la_LDFLAGS)
	(libgomp_plugin_nonshm_host_la_LIBTOOLFLAGS): Set variables.
	(libgomp_la_SOURCES): Add oacc-parallel.c, splay-tree.c,
	oacc-host.c, oacc-init.c, oacc-mem.c, oacc-async.c, oacc-plugin.c,
	oacc-cuda.c, libgomp-plugin.c.
	(nodist_libsubinclude_HEADERS): Add openacc.h,
	../include/gomp-constants.h.
	* Makefile.in: Regenerate.
	* config.h.in: Regenerate.
	* configure.ac: Add TODOs for OpenACC in various places.
	(CUDA_DRIVER_CPPFLAGS, CUDA_DRIVER_LDFLAGS): Initialize.
	(--with-cuda-driver, --with-cuda-driver-include)
	(--with-cuda-driver-lib, --enable-offload-targets): Implement new
	options.
	(PLUGIN_NVPTX, PLUGIN_NVPTX_CPPFLAGS, PLUGIN_NVPTX_LDFLAGS)
	(PLUGIN_NVPTX_LIBS): Initialize variables.
	* configure: Regenerate.
	* env.c (target.h): Include.
	(goacc_device_num, goacc_device_type): New globals.
	(goacc_parse_device_num, goacc_parse_device_type): New functions.
	(initialize_env): Parse GCC_ACC_NOTIFY, ACC_DEVICE_TYPE,
	ACC_DEVICE_NUM environment variables.
	* error.c (gomp_verror, gomp_vfatal, gomp_vnotify, gomp_notify):
	New functions.
	(gomp_fatal): Make global.
	* libgomp.h (stdarg.h): Include.
	(struct gomp_memory_mapping): Forward declaration.
	(struct gomp_task_icv): Add acc_notify_var member.
	(goacc_device_num, goacc_device_type): Add extern declarations.
	(gomp_vnotify, gomp_notify, gomp_verror, gomp_vfatal): Add
	prototypes.
	(gomp_init_targets_once): Add prototype.
	* libgomp.map (OACC_2.0): New symbol version. Add public acc_*
	interface functions.
	(PLUGIN_1.0): New symbol version. Add gomp plugin interface
	functions.
	* libgomp_g.h (GOACC_kernels, GOACC_parallel): Update prototypes.
	(GOACC_wait): Add prototype.
	* target.c (limits.h, stdbool.h, stdlib.h): Don't include.
	(oacc-plugin.h, gomp-constants.h, stdio.h, assert.h): Include.
	(splay_tree_node, splay_tree, splay_tree_key, target_mem_desc)
	(splay_tree_key_s, enum target_type, gomp_device_descr): Don't
	declare here.
	(splay-tree.h): Include.
	(target.h): Include.
	(splay_compare): Change linkage to hidden not static.
	(gomp_init_targets_once): New function.
	(gomp_get_num_devices): Use above.
	(dump_mappings): New function (for debugging).
	(get_kind): New function.
	(gomp_map_vars): Add gomp_memory_mapping (mm), is_openacc
	parameters. Change KINDS to void *. Use lock from memory map
	not device. Use macros from gomp-constants.h instead of
	hard-coded values. Support OpenACC-specific mappings.
	(gomp_copy_from_async): New function.
	(gomp_unmap_vars): Add DO_COPYFROM argument. Only copy memory
	back from device if it is true. Use lock from memory map not
	device.
	(gomp_update): Add mm, is_openacc args. Use lock from
	memory map not device. Use macros from gomp-constants.h not
	hard-coded values.
	(gomp_register_image_for_device): Add forward
	declaration.
	(GOMP_offload_register): Change TARGET_DATA type to
	void **. Check realloc result.
	(gomp_init_device): Change linkage to hidden not static. Tweak mem
	map location.
	(gomp_fini_device): New function.
	(GOMP_target): Adjust lazy initialization, check target
	capabilities for OpenMP 4.0 support. Add locking around splay tree
	lookup. Add new arg to gomp_unmap_vars call.
	(GOMP_target_data): Tweak lazy initialization. Add new args to
	gomp_map_vars, gomp_unmap_vars calls.
	(GOMP_target_update): Tweak lazy initialization. Add new args to
	gomp_update call.
	(gomp_load_plugin_for_device): Initialize device_fini and
	OpenACC-specific plugin hooks.
	(gomp_register_images_for_device): Rename to...
	(gomp_register_image_for_device): This, and register a single
	device only, and only if it has not already had images registered.
	(gomp_find_available_plugins): Rearrange to fix plugin loading and
	initialization for OpenACC. Prefer a device with
	TARGET_CAP_OPENMP_400 for OpenMP.
	* target.h: New file.
	* splay-tree.h: Move bulk of implementation to...
	* splay-tree.c: New file.
	* libgomp-plugin.c: New file.
	* libgomp-plugin.h: New file.
	* oacc-async.c: New file.
	* oacc-cuda.c: New file.
	* oacc-host.c: New file.
	* oacc-init.c: New file.
	* oacc-mem.c: New file.
	* oacc-parallel.c: New file.
	* oacc-plugin.c: New file.
	* plugin-nvptx.c: New file.
	* oacc-int.h: New file.
	* openacc.f90: New file.
	* openacc.h: New file.
	* openacc_lib.h: New file.

2014-10-09  Thomas Schwinge  <thomas@codesourcery.com>

	* testsuite/libgomp.oacc-c/collapse-4.c: New file, moved from
	gcc/testsuite/gcc.dg/goacc/collapse.c.

2014-09-23  Thomas Schwinge  <thomas@codesourcery.com>

	* libgomp.map (OACC_2.0): Add acc_on_device, acc_on_device_.
	* fortran.c: Include "openacc.h".
	(acc_on_device_): New function.
	* oacc-parallel.c: Include "openacc.h".
	(acc_on_device): New function.
	* openacc.f90 (acc_device_kind, acc_device_none)
	(acc_device_default, acc_device_host, acc_device_not_host): New
	parameters.
	(acc_on_device): New function declaration.
	* openacc_lib.h (acc_device_kind, acc_device_none)
	(acc_device_default, acc_device_host, acc_device_not_host): New
	parameters.
	(acc_on_device): New function declaration.
	* openacc.h (acc_device_t): New enum.
	(acc_on_device): New function declaration.
	* testsuite/libgomp.oacc-c/acc_on_device-1.c: New file.
	* testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90: Likewise.
	* testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f: Likewise.
	* testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f: Likewise.

2014-07-09  Thomas Schwinge  <thomas@codesourcery.com>
	    Jakub Jelinek  <jakub@redhat.com>

	* target.c (gomp_map_vars, gomp_unmap_vars, gomp_update): Support
	NULL mappings as well as mapping kind OMP_CLAUSE_MAP_TO_PSET.
	Also, some code reformatting.

2014-06-06  Thomas Schwinge  <thomas@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* libgomp.map (GOACC_2.0): Add GOACC_update.
	* oacc-parallel.c (GOACC_update): New function.

2014-03-18  Ilya Verbin  <ilya.verbin@intel.com>

	* libgomp.map (GOMP_4.0.1): New symbol version.
	Add GOMP_offload_register.
	* plugin-host.c (device_available): Replace with:
	(get_num_devices): This.
	(get_type): New.
	(offload_register): Ditto.
	(device_init): Ditto.
	(device_get_table): Ditto.
	(device_run): Ditto.
	* target.c (target_type): New enum.
	(offload_image_descr): New struct.
	(offload_images, num_offload_images): New globals.
	(struct gomp_device_descr): Remove device_available_func.
	Add type, is_initialized, get_type_func, get_num_devices_func,
	offload_register_func, device_init_func, device_get_table_func,
	device_run_func.
	(mapping_table): New struct.
	(GOMP_offload_register): New function.
	(gomp_init_device): Ditto.
	(GOMP_target): Add device initialization and lookup for target fn.
	(GOMP_target_data): Add device initialization.
	(GOMP_target_update): Ditto.
	(gomp_load_plugin_for_device): Take handles for get_type,
	get_num_devices, offload_register, device_init, device_get_table,
	device_run functions.
	(gomp_register_images_for_device): New function.
	(gomp_find_available_plugins): Add registration of offload images.

2014-03-18  Thomas Schwinge  <thomas@codesourcery.com>

	* libgomp_g.h (GOACC_kernels, GOACC_parallel): Add three
	additional int arguments.
	* oacc-parallel.c (GOACC_kernels, GOACC_parallel): Handle these.
	* testsuite/libgomp.oacc-c/goacc_kernels.c: Adjust.
	* testsuite/libgomp.oacc-c/goacc_parallel.c: Likewise.

2014-02-28  Thomas Schwinge  <thomas@codesourcery.com>

	* testsuite/libgomp.oacc-c/goacc_kernels.c: New file.
	* testsuite/libgomp.oacc-c/kernels-1.c: Likewise.
	* testsuite/libgomp.oacc-c/parallel-1.c: Add one missing test.

	* libgomp.map (GOACC_2.0): Add GOACC_kernels.
	* libgomp_g.h (GOACC_kernels): New prototype.
	* oacc-parallel.c (GOACC_kernels): New function.

2014-02-21  Thomas Schwinge  <thomas@codesourcery.com>

	* testsuite/libgomp.oacc-c/data-1.c: New file.

	* libgomp.map (GOACC_2.0): Add GOACC_data_end, GOACC_data_start.
	* libgomp_g.h (GOACC_data_start, GOACC_data_end): New prototypes.
	* oacc-parallel.c (GOACC_data_start, GOACC_data_end): New
	functions.

2014-02-20  Thomas Schwinge  <thomas@codesourcery.com>

	* target.c (gomp_load_plugin_for_device): Don't call dlcose if
	dlopen failed.

2014-02-20  Thomas Schwinge  <thomas@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* plugin-host.c: New file.
	* target.c (struct gomp_device_descr): Add device_alloc_func,
	device_free_func, device_dev2host_func, device_host2dev_func
	members.
	(gomp_load_plugin_for_device): Load these.
	(gomp_map_vars, gomp_unmap_tgt, gomp_unmap_vars, gomp_update): Use
	these.
	(resolve_device, gomp_find_available_plugins): Remove ID 257 hack.

2014-02-17  Ilya Verbin  <ilya.verbin@intel.com>

	* target.c (gomp_map_vars_existing): Don't update copy_from for the
	existing mappings.

2014-01-28  Thomas Schwinge  <thomas@codesourcery.com>

	* testsuite/libgomp.oacc-c/parallel-1.c: Extend.

2013-12-18  Thomas Schwinge  <thomas@codesourcery.com>

	* libgomp_g.h (GOACC_parallel): Switch kinds array to unsigned
	short.
	* oacc-parallel.c (GOACC_parallel): Likewise, and catch
	unsupported kinds.

2013-11-08  Thomas Schwinge  <thomas@codesourcery.com>

	libgomp/
	* target.c (gomp_find_available_plugins): Don't skip device 257
	setup.

2013-11-07  Thomas Schwinge  <thomas@codesourcery.com>

	* oacc-parallel.c: New file.
	* Makefile.am (libgomp_la_SOURCES): Add it.
	* Makefile.in: Regenerate.
	* libgomp.map (GOACC_2.0): Add GOACC_parallel.
	* libgomp_g.h (GOACC_parallel): New declaration.
	* testsuite/libgomp.oacc-c/goacc_parallel.c: New file.
	* testsuite/libgomp.oacc-c/parallel-1.c: New file.

	* libgomp.map (GOACC_2.0): New symbol version.

	* openacc.f90 (openacc_version): New integer parameter.
	* openacc_lib.h (openacc_version): Likewise.
	* testsuite/libgomp.oacc-fortran/openacc_version-1.f: New file.
	* testsuite/libgomp.oacc-fortran/openacc_version-2.f90: Likewise.

	* libgomp.map (OACC_2.0): New symbol version.
	* Makefile.am (nodist_libsubinclude_HEADERS): Add openacc.h.
	(nodist_finclude_HEADERS): Add openacc_lib.h, openacc.f90,
	openacc.mod, and openacc_kinds.mod.
	(openacc_kinds.mod): New target.
	(%.mod): New target, generalized from omp_lib.mod.
	* Makefile.in: Regenerate.
	* openacc.f90: New file.
	* openacc.h: Likewise.
	* openacc_lib.h: Likewise.
	* testsuite/libgomp.oacc-c++/c++.exp: Likewise.
	* testsuite/libgomp.oacc-c/c.exp: Likewise.
	* testsuite/libgomp.oacc-c/lib-1.c: Likewise.
	* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.
	* testsuite/libgomp.oacc-fortran/lib-1.f90: Likewise.
	* testsuite/libgomp.oacc-fortran/lib-2.f: Likewise.
	* testsuite/libgomp.oacc-fortran/lib-3.f: Likewise.

	Backport from trunk, r204519:

	* testsuite/lib/libgomp.exp (libgomp_init): Don't add -fopenmp to
	ALWAYS_CFLAGS.
	* testsuite/libgomp.c++/c++.exp (ALWAYS_CFLAGS): Add -fopenmp.
	* testsuite/libgomp.c/c.exp (ALWAYS_CFLAGS): Likewise.
	* testsuite/libgomp.fortran/fortran.exp (ALWAYS_CFLAGS): Likewise.
	* testsuite/libgomp.graphite/graphite.exp (ALWAYS_CFLAGS):
	Likewise.

	Backport from trunk, r204518:

	* libgomp_g.h: Include <stddef.h> for size_t.

	Backport from trunk, r204517:

	* libgomp.spec.in: Update comment about libgomp's dependencies.
	* configure.ac: Likewise.
	* configure: Regenerate.

2013-10-10  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/udr-6.C: Remove UDR + on type F.

2013-10-08  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/thread-limit-1.c (main): Check if
	cnt isn't bigger than 6 at any point in time, sleep 10ms after
	incrementing it and then atomically decrement.
	* testsuite/libgomp.c/thread-limit-2.c (main): Likewise.

	* libgomp.h (struct gomp_team): Add task_queued_count field.
	Add comments about task_{,queued_,running_}count.
	* team.c (gomp_new_team): Clear task_queued_count.
	* task.c (GOMP_task): Increment task_queued_count.
	(gomp_task_run_pre): Decrement task_queued_count.  If it is
	decremented to zero, call gomp_team_barrier_clear_task_pending.
	(gomp_task_run_post_handle_dependers): Increment task_queued_count.
	(gomp_barrier_handle_tasks): Don't call
	gomp_team_barrier_clear_task_pending here.

	* testsuite/libgomp.c/udr-2.c (main): Remove unused variable i.
	* testsuite/libgomp.c/udr-3.c (main): Initialize i to 0.
	* testsuite/libgomp.c++/udr-8.C (main): Likewise.

	* testsuite/libgomp.c/affinity-1.c (min_cpusetsize): New variable.
	(pthread_getaffinity_np): Set it when setting contig_cpucount.
	(print_affinity): Use it for size, only use sysconf value if that is not
	set and if it is smaller than sizeof (cpu_set_t), use sizeof (cpu_set_t).

2013-10-07  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/affinity-1.c (main): Fork even if
	contig_cpucount is > 8.

	PR libgomp/58642
	* config/linux/proc.c: Include errno.h.
	(gomp_get_cpuset_size): New variable.
	(gomp_cpuset_popcount): Add cpusetsize argument, use it instead of
	gomp_cpuset_size.
	(gomp_init_num_threads): If CPU_ALLOC_SIZE is defined and
	pthread_getaffinity_np returned EINVAL, increase gomp_cpuset_size
	and retry.  After successful pthread_getaffinity_np copy
	gomp_cpuset_size to gomp_get_cpuset_size and try to find out
	minimum gomp_cpuset_size that covers all the CPUs set in gomp_cpusetp.
	(get_num_procs): Pass gomp_get_cpuset_size rather than gomp_cpuset_size
	to pthread_getaffinity_np, adjust gomp_cpuset_popcount caller.
	* config/linux/proc.h (gomp_cpuset_popcount): Add cpusetsize argument.
	* config/linux/affinity.c (gomp_affinity_finalize_place_list,
	gomp_affinity_init_level): Adjust gomp_cpuset_popcount callers.
	* testsuite/libgomp.c/affinity-1.c (pthread_getaffinity_np): Set
	contig_cpucount from the first successful pthread_getaffinity_np
	call, rather than just first call.

2013-10-04  Jakub Jelinek  <jakub@redhat.com>

	* libgomp.h (struct gomp_task_icv): Add thread_limit_var.
	(gomp_thread_limit_var, gomp_remaining_threads_count,
	gomp_remaining_threads_lock): Remove.
	(gomp_managed_threads_lock): New variable.
	(struct gomp_thread_pool): Add threads_busy field.
	(gomp_free_thread): New prototype.
	* parallel.c (gomp_resolve_num_threads): Adjust for
	thread_limit now being in icv->thread_limit_var.  Use
	UINT_MAX instead of ULONG_MAX as infinity.  If not nested,
	just return minimum of max_num_threads and icv->thread_limit_var
	and if thr->thread_pool, set threads_busy to the returned value.
	Otherwise, don't update atomically gomp_remaining_threads_count,
	but instead thr->thread_pool->threads_busy.
	(GOMP_parallel_end): Adjust for thread_limit now being in
	icv->thread_limit_var.  Use UINT_MAX instead of ULONG_MAX as
	infinity.  Adjust threads_busy in the pool rather than
	gomp_remaining_threads_count.  Remember team->nthreads and call
	gomp_team_end before adjusting threads_busy, if not nested
	afterwards, just set it to 1 non-atomically.
	* team.c (gomp_thread_start): Clear thr->thread_pool and
	thr->task before returning.
	(gomp_free_pool_helper): Clear thr->thread_pool and thr->task
	before calling pthread_exit.
	(gomp_free_thread): No longer static.  Use
	gomp_managed_threads_lock instead of gomp_remaining_threads_lock.
	(gomp_team_start): Set thr->thread_pool->threads_busy to
	nthreads immediately after creating new pool.  Use
	gomp_managed_threads_lock instead of gomp_remaining_threads_lock.
	(gomp_team_end): Use gomp_managed_threads_lock instead of
	gomp_remaining_threads_lock.
	(initialize_team): Don't call gomp_sem_init here.
	* env.c (gomp_global_icv): Initialize thread_limit_var field.
	(gomp_thread_limit_var, gomp_remaining_threads_count,
	gomp_remaining_threads_lock): Remove.
	(gomp_managed_threads_locks): New variable.
	(handle_omp_display_env): Adjust for thread_limit var being
	in gomp_global_icv.
	(initialize_env): Likewise.  If user provided value is > INT_MAX,
	set gomp_global_icv.thread_limit_var to UINT_MAX (infinity).
	Initialize gomp_managed_threads_lock instead of
	gomp_remaining_threads_lock.
	(omp_get_thread_limit): Adjust for thread_limit var in
	icv->thread_limit_var.
	* target.c: Include limits.h.
	(resolve_device): If device_id is < -1, return NULL.
	(gomp_map_vars): Make sure tgt->array, tgt->to_free, tgt->tgt_start,
	tgt->tgt_end and k->copy_from aren't left uninitialized.
	(GOMP_target): Arrange for host callback to be performed in a
	separate initial thread and contention group, inheriting ICVs from
	gomp_global_icv etc.
	(GOMP_teams): Adjust thread_limit_var ICV.
	* testsuite/libgomp.c/affinity-1.c (main): Call omp_set_dynamic (0).
	* testsuite/libgomp.c/target-3.c: New test.
	* testsuite/libgomp.c/target-4.c: New test.
	* testsuite/libgomp.c/target-5.c: New test.
	* testsuite/libgomp.c/target-6.c: New test.
	* testsuite/libgomp.c/target-7.c: New test.
	* testsuite/libgomp.c/thread-limit-1.c: New test.
	* testsuite/libgomp.c/thread-limit-2.c: New test.
	* testsuite/libgomp.c/thread-limit-3.c: New test.

	* libgomp.h (struct gomp_team_state): Add place_partition_off
	and place_partition_len fields.
	(struct gomp_task_icv): Add bind_var field.
	(gomp_bind_var_list, gomp_bind_var_list_len, gomp_places_list,
	gomp_places_list_len): New extern decls.
	(struct gomp_thread): Add place field.
	(gomp_cpu_affinity, gomp_cpu_affinity_len): Remove.
	(gomp_init_thread_affinity): Add place argument.
	(gomp_affinity_alloc, gomp_affinity_init_place, gomp_affinity_add_cpus,
	gomp_affinity_remove_cpu, gomp_affinity_copy_place,
	gomp_affinity_same_place, gomp_affinity_finalize_place_list,
	gomp_affinity_init_level, gomp_affinity_print_place): New prototypes.
	(gomp_team_start): Add flags argument.
	* team.c (struct gomp_thread_start_data): Add place field.
	(gomp_thread_start): Initialize thr->place.
	(gomp_team_start): Add flags argument.  Handle OpenMP 4.0 affinity.
	* env.c (gomp_global_icv): Initialize bind_var field.
	(gomp_cpu_affinity, gomp_cpu_affinity_len): Remove.
	(gomp_bind_var_list, gomp_bind_var_list_len, gomp_places_list,
	gomp_places_list_len): New variables.
	(parse_bind_var, parse_one_place, parse_places_var): New functions.
	(parse_affinity): Rewritten to construct OMP_PLACES list with unit
	sized places.
	(handle_omp_display_env): Remove proc_bind argument.  Set display
	to true for OMP_DISPLAY_ENV=true.  Print 201307 instead of 201107
	as _OPENMP.  Enhance printing of OMP_PROC_BIND, add printing
	of OMP_PLACES, don't print anything for GOMP_CPU_AFFINITY.
	(initialize_env): Use parse_bind_var to parse OMP_PROC_BIND
	instead of parse_boolean.  Use parse_places_var for OMP_PLACES
	parsing.  Don't call parse_affinity if OMP_PLACES has been
	successfully parsed (and call gomp_init_affinity in that case).
	Adjust handle_omp_display_env caller.
	(omp_get_proc_bind): Return bind_var ICV.
	* config/posix/affinity.c (gomp_init_thread_affinity): Add place
	argument.
	(gomp_affinity_alloc, gomp_affinity_init_place, gomp_affinity_add_cpus,
	gomp_affinity_remove_cpu, gomp_affinity_copy_place,
	gomp_affinity_same_place, gomp_affinity_finalize_place_list,
	gomp_affinity_init_level, gomp_affinity_print_place): New stubs.
	* config/linux/proc.c (gomp_cpuset_popcount): Fix up check extern decl.
	(gomp_init_num_threads): If HAVE_PTHREAD_AFFINITY_NP isn't defined,
	fix up sizeof argument.  Free and clear gomp_cpusetp if it didn't
	contain any logical CPUs.
	(get_num_procs): Check gomp_places_list instead of gomp_cpu_affinity.
	* config/linux/affinity.c: Include errno.h, stdio.h and string.h.
	(affinity_counter): Remove.
	(CPU_CLR_S): Define if CPU_ALLOC_SIZE is not defined.
	(gomp_init_affinity): Rewritten, if gomp_places_list is NULL, try
	silently create OMP_PLACES=threads, if it is non-NULL afterwards,
	bind current thread to the first place.
	(gomp_init_thread_affinity): Rewritten.  Add place argument, just
	pthread_setaffinity_np to gomp_places_list[place].
	(gomp_affinity_alloc, gomp_affinity_init_place, gomp_affinity_add_cpus,
	gomp_affinity_remove_cpu, gomp_affinity_copy_place,
	gomp_affinity_same_place, gomp_affinity_finalize_place_list,
	gomp_affinity_init_level, gomp_affinity_print_place): New functions.
	* parallel.c (GOMP_parallel_start): Adjust gomp_team_start caller.
	(GOMP_parallel): Likewise, pass through flags parameter to it.
	* sections.c (GOMP_parallel_sections_start): Adjust gomp_team_start
	caller.
	(GOMP_parallel_sections): Likewise, pass through flags parameter to it.
	* loop.c (gomp_parallel_loop_start): Add flags argument, pass it through
	to gomp_team_start.
	(GOMP_parallel_loop_static_start, GOMP_parallel_loop_dynamic_start,
	GOMP_parallel_loop_guided_start, GOMP_parallel_loop_runtime_start):
	Adjust gomp_parallel_loop_start callers.
	(GOMP_parallel_loop_static, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime): Likewise, pass
	through flags parameter to it.
	* testsuite/libgomp.c/affinity-1.c: New test.
	* testsuite/libgomp.c++/affinity-1.C: New test.

2013-10-01  Jakub Jelinek  <jakub@redhat.com>

	PR libgomp/57298
	* config/linux/proc.c (gomp_cpuset_size, gomp_cpusetp): New variables.
	(gomp_cpuset_popcount): Use CPU_COUNT_S if available, or CPU_COUNT if
	gomp_cpuset_size is sizeof (cpu_set_t).  Use gomp_cpuset_size instead
	of sizeof (cpu_set_t) to determine number of iterations.
	(gomp_init_num_threads): Initialize gomp_cpuset_size and gomp_cpusetp
	here, use gomp_cpusetp instead of &cpuset and pass gomp_cpuset_size
	instead of sizeof (cpu_set_t) to pthread_getaffinity_np.
	(get_num_procs): Don't call pthread_getaffinity_np if gomp_cpusetp
	is NULL.  Use gomp_cpusetp instead of &cpuset and pass gomp_cpuset_size
	instead of sizeof (cpu_set_t) to pthread_getaffinity_np.
	* config/linux/proc.h (gomp_cpuset_popcount): Add attribute_hidden.
	(gomp_cpuset_size, gomp_cpusetp): Declare.
	* config/linux/affinity.c (CPU_ISSET_S, CPU_ZERO_S, CPU_SET_S): Define
	if CPU_ALLOC_SIZE isn't defined.
	(gomp_init_affinity): Don't call pthread_getaffinity_np here, instead
	use gomp_cpusetp computed by gomp_init_num_threads.  Use CPU_*_S
	variants of macros with gomp_cpuset_size as set size, for cpusetnew
	use alloca for it if CPU_ALLOC_SIZE is defined, otherwise local
	fixed size variable.
	(gomp_init_thread_affinity): Use CPU_*_S variants of macros with
	gomp_cpuset_size as set size, for cpuset use alloca for it if
	CPU_ALLOC_SIZE is defined, otherwise local fixed size variable.

2013-09-27  Jakub Jelinek  <jakub@redhat.com>

	* libgomp.h: Include stdlib.h.
	(struct gomp_task_depend_entry,
	struct gomp_dependers_vec): New types.
	(struct gomp_task): Add dependers, depend_hash, depend_count,
	num_dependees and depend fields.
	(struct gomp_taskgroup): Add num_children field.
	(gomp_finish_task): Free depend_hash if non-NULL.
	* libgomp_g.h (GOMP_task): Add depend argument.
	* hashtab.h: New file.
	* task.c: Include hashtab.h.
	(hash_entry_type): New typedef.
	(htab_alloc, htab_free, htab_hash, htab_eq): New inlines.
	(gomp_init_task): Clear dependers, depend_hash and depend_count
	fields.
	(GOMP_task): Add depend argument, handle depend clauses.  Increment
	num_children field in taskgroup.
	(gomp_task_run_pre): Don't increment task_running_count here,
	nor clear task_pending bit.
	(gomp_task_run_post_handle_depend_hash,
	gomp_task_run_post_handle_dependers,
	gomp_task_run_post_handle_depend): New functions.
	(gomp_task_run_post_remove_parent): Clear in_taskwait before
	signalling corresponding semaphore.
	(gomp_task_run_post_remove_taskgroup): Decrement num_children
	field and make the decrement to 0 MEMMODEL_RELEASE operation,
	rather than storing NULL to taskgroup->children.  Clear
	in_taskgroup_wait before signalling corresponding semaphore.
	(gomp_barrier_handle_tasks): Move task_running_count increment
	and task_pending bit clearing here.  Call
	gomp_task_run_post_handle_depend.  If more than one new tasks
	have been queued, wake other threads if needed.
	(GOMP_taskwait): Call gomp_task_run_post_handle_depend.  If more
	than one new tasks have been queued, wake other threads if needed.
	After waiting on taskwait_sem, enter critical section again.
	(GOMP_taskgroup_start): Initialize num_children field.
	(GOMP_taskgroup_end): Check num_children instead of children
	before critical section.  If children is NULL, but num_children
	is non-zero, wait on taskgroup_sem.  Call
	gomp_task_run_post_handle_depend.  If more than one new tasks have
	been queued, wake other threads if needed.  After waiting on
	taskgroup_sem, enter critical section again.
	* testsuite/libgomp.c/depend-1.c: New test.
	* testsuite/libgomp.c/depend-2.c: New test.
	* testsuite/libgomp.c/depend-3.c: New test.
	* testsuite/libgomp.c/depend-4.c: New test.

2013-09-26  Jakub Jelinek  <jakub@redhat.com>

	PR libgomp/58482
	* testsuite/libgomp.c/simd-6.c: New test.
	* testsuite/libgomp.c++/simd-8.C: New test.

2013-09-25  Jakub Jelinek  <jakub@redhat.com>

	* parallel.c (GOMP_cancellation_point, GOMP_cancel): Handle
	GIMPLE_CANCEL_TASKGROUP cancellation.
	* libgomp.h (struct gomp_task): Add next_taskgroup, prev_taskgroup,
	taskgroup and copy_ctors_done fields.
	(struct gomp_taskgroup): New type.
	* task.c (gomp_init_task): Initialize copy_ctors_done and taskgroup
	fields.
	(GOMP_task): Don't start a new thread also if it's taskgroup has
	been cancelled.  Set copy_ctors_done field if needed.  Initialize
	taskgroup field.  If copy_ctors_done and already cancelled, don't
	discard the task.  If taskgroup is non-NULL, enqueue the task
	into taskgroup queue.
	(gomp_task_run_pre, gomp_task_run_post_remove_parent,
	gomp_task_run_post_remove_taskgroup): New inline functions.
	(gomp_barrier_handle_tasks, GOMP_taskwait): Use them.
	(GOMP_taskgroup_start, GOMP_taskgroup_end): Implement taskgroup
	support.
	* testsuite/libgomp.c++/cancel-parallel-1.C: New test.
	* testsuite/libgomp.c++/cancel-parallel-2.C: New test.
	* testsuite/libgomp.c++/cancel-parallel-3.C: New test.
	* testsuite/libgomp.c++/cancel-for-1.C: New test.
	* testsuite/libgomp.c++/cancel-for-1.C: New test.
	* testsuite/libgomp.c++/cancel-taskgroup-1.C: New test.
	* testsuite/libgomp.c++/cancel-taskgroup-2.C: New test.
	* testsuite/libgomp.c++/cancel-taskgroup-3.C: New test.
	* testsuite/libgomp.c++/cancel-test.h: New file.
	* testsuite/libgomp.c++/cancel-sections-1.C: New test.
	* testsuite/libgomp.c++/taskgroup-1.C: New test.
	* testsuite/libgomp.c/cancel-taskgroup-1.c: New test.
	* testsuite/libgomp.c/cancel-taskgroup-2.c: New test.
	* testsuite/libgomp.c/taskgroup-1.c: New test.
	* testsuite/libgomp.c/cancel-parallel-3.c (do_some_work): Use
	void return type.

2013-09-24  Richard Henderson  <rth@redhat.com>
	    Jakub Jelinek  <jakub@redhat.com>

	* libgomp.map (GOMP_4.0): Export GOMP_barrier_cancel,
	GOMP_loop_end_cancel, GOMP_sections_end_cancel.
	* parallel.c (GOMP_cancellation_point): Add WHICH argument, do nothing
	if gomp_cancel_var is false, handle workshare and parallel
	cancellation point, add ialias.
	(GOMP_cancel): Add WHICH and DO_CANCEL arguments, do nothing if
	gomp_cancel_var is false, call GOMP_cancellation_point if DO_CANCEL
	is false, handle workshare and parallel cancellation.
	* config/posix/bar.c (gomp_barrier_init): Clear cancellable field.
	(gomp_team_barrier_wait_end): Clear BAR_CANCELLED from state.
	Set work_share_cancelled to 0 on last thread, use __atomic_load_n.
	(gomp_team_barrier_wait_cancel_end, gomp_team_barrier_wait_cancel,
	gomp_team_barrier_cancel): New functions.
	* config/posix/bar.h (gomp_barrier_t): Add cancellable field.
	(BAR_CANCELLED): Define.
	(BAR_INCR): Set to 8.
	(gomp_team_barrier_wait_cancel, gomp_team_barrier_wait_cancel_end,
	gomp_team_barrier_cancel): New prototypes.
	(gomp_barrier_wait_start): Preserve BAR_CANCELLED bit.
	(gomp_barrier_wait_cancel_start, gomp_team_barrier_wait_final,
	gomp_team_barrier_cancelled): New inline functions.
	* config/linux/bar.c (gomp_team_barrier_wait_end): Clear BAR_CANCELLED
	from state where needed.  Set work_share_cancelled to 0 on last thread.
	(gomp_team_barrier_wait_final, gomp_team_barrier_wait_cancel_end,
	gomp_team_barrier_wait_cancel, gomp_team_barrier_cancel): New
	functions.
	* config/linux/bar.h (gomp_barrier_t): Add awaited_final field.
	(BAR_CANCELLED): Define.
	(BAR_INCR): Set to 8.
	(gomp_barrier_init): Initialize awaited_final field.
	(gomp_team_barrier_wait_final, gomp_team_barrier_wait_cancel,
	gomp_team_barrier_wait_cancel_end, gomp_team_barrier_cancel): New
	prototypes.
	(gomp_barrier_wait_start): Preserve BAR_CANCELLED bit.
	(gomp_barrier_wait_cancel_start, gomp_team_barrier_wait_final_start,
	gomp_team_barrier_cancelled): New inline functions.
	* work.c (gomp_work_share_end, gomp_work_share_end_nowait): Set
	team->work_shares_to_free to thr->ts.work_share before calling
	free_work_share.
	(gomp_work_share_end_cancel): New function.
	* team.c (gomp_thread_start): Use gomp_team_barrier_wait_final
	instead of gomp_team_barrier_wait.
	(gomp_new_team): Initialize work_shares_to_free, work_share_cancelled
	and team_cancelled fields.
	(gomp_team_end): Use gomp_team_barrier_wait_final instead of
	gomp_team_barrier_wait.  If team->team_cancelled, call
	gomp_fini_worshare on ws chain starting at team->work_shares_to_free
	rather than thr->ts.work_share.
	* env.c (gomp_global_icv): Initialize target_data field.
	(gomp_cancel_var): New global variable.
	(handle_omp_display_env): Print cancel-var ICV.
	(initialize_env): Parse OMP_CANCELLATION env var.
	(omp_get_cancellation): Return gomp_cancel_var.
	* barrier.c (GOMP_barrier_cancel): New function.
	* libgomp.h (gomp_cancel_var): New extern decl.
	(struct gomp_team): Add work_shares_to_free, work_share_cancelled
	and team_cancelled fields.
	(gomp_cancel_kind): New enum.
	(gomp_work_share_end_cancel): New prototype.
	* libgomp_g.h (GOMP_barrier_cancel, GOMP_loop_end_cancel,
	GOMP_sections_end_cancel): New prototypes.
	(GOMP_cancel, GOMP_cancellation_point): Adjust prototypes.
	* task.c (GOMP_task): If gomp_team_barrier_cancelled, don't
	queue or start new tasks.
	(gomp_barrier_handle_tasks): If gomp_team_barrier_cancelled,
	don't start any new tasks, just free all tasks.
	* sections.c (GOMP_sections_end_cancel): New function.
	* loop.c (GOMP_loop_end_cancel): New function.
	* testsuite/libgomp.c/cancel-parallel-1.c: New test.
	* testsuite/libgomp.c/cancel-parallel-2.c: New test.
	* testsuite/libgomp.c/cancel-parallel-3.c: New test.
	* testsuite/libgomp.c/cancel-for-1.c: New test.
	* testsuite/libgomp.c/cancel-for-2.c: New test.
	* testsuite/libgomp.c/cancel-sections-1.c: New test.

2013-09-23  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>

	* configure.ac: Add checks for plugins support.
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* target.c (struct target_mem_desc): Add device_descr field.
	(devices): New.
	(num_devices): New.
	(struct gomp_device_descr): New.
	(gomp_get_num_devices): Call gomp_target_init.
	(resolve_device): Return device_descr instead of int.
	(gomp_map_vars): Add devicep argument and update the function
	accordingly.
	(gomp_unmap_tgt): Likewise.
	(gomp_unmap_vars): Likewise.
	(gomp_update): Likewise.
	(GOMP_target): Use device_descr struct.
	(GOMP_target_data): Likewise.
	(GOMP_target_update): Likewise.
	(gomp_check_plugin_file_name): New.
	(gomp_load_plugin_for_device): New.
	(gomp_find_available_plugins): New.
	(gomp_target_init): New.

2013-09-19  Jakub Jelinek  <jakub@redhat.com>

	* libgomp_g.h (GOMP_target): Change 3rd argument to const void *.
	(GOMP_target_data, GOMP_target_update): Add openmp_target argument.
	* target.c (GOMP_target): Change fnname argument to openmp_target,
	with const void * type.
	(GOMP_target_data, GOMP_target_update): Add openmp_target argument.

	* testsuite/libgomp.c/simd-4.c: New test.
	* testsuite/libgomp.c/simd-5.c: New test.
	* testsuite/libgomp.c/udr-1.c: New test.
	* testsuite/libgomp.c/udr-2.c: New test.
	* testsuite/libgomp.c/udr-3.c: New test.
	* testsuite/libgomp.c++/udr-9.C: New test.

2013-09-18  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/simd-4.C: New test.
	* testsuite/libgomp.c++/simd-5.C: New test.
	* testsuite/libgomp.c++/simd-6.C: New test.
	* testsuite/libgomp.c++/simd-7.C: New test.
	* testsuite/libgomp.c++/udr-1.C: New test.
	* testsuite/libgomp.c++/udr-2.C: New test.
	* testsuite/libgomp.c++/udr-3.C: New test.
	* testsuite/libgomp.c++/udr-4.C: New test.
	* testsuite/libgomp.c++/udr-5.C: New test.
	* testsuite/libgomp.c++/udr-6.C: New test.
	* testsuite/libgomp.c++/udr-7.C: New test.
	* testsuite/libgomp.c++/udr-8.C: New test.

2013-09-16  Jakub Jelinek  <jakub@redhat.com>

	* splay-tree.h: New file.
	* target.c: Include stdbool.h.
	(splay_tree_node, splay_tree, splay_tree_key): New typedefs.
	(struct target_mem_desc, struct splay_tree_key_s): New structures.
	(splay_compare): New inline function.
	(gomp_get_num_devices): New function.
	(resolve_device): Use default_device_var ICV.  Add temporarily
	magic testing device number 257.
	(dev_splay_tree, dev_env_lock): New variables.
	(gomp_map_vars_existing, gomp_map_vars, gomp_unmap_tgt,
	gomp_unmap_vars, gomp_update): New functions.
	(GOMP_target, GOMP_target_data, GOMP_target_end_data,
	GOMP_target_update): Add support for magic testing device number 257.
	* libgomp.h (struct target_mem_desc): Forward declare.
	(struct gomp_task_icv): Add default_device_var and target_data.
	(gomp_get_num_devices): New prototype.
	* env.c (gomp_global_icv): Add default_device_var initializer.
	(parse_int): New function.
	(handle_omp_display_env): Print OMP_DEFAULT_DEVICE.
	(initialize_env): Initialize default_device_var.
	(omp_set_default_device): Set default_device_var ICV.
	(omp_get_default_device): Query default_device_var ICV.
	(omp_get_num_devices): Call gomp_get_num_devices.
	(omp_get_num_teams, omp_get_team_num, omp_is_initial_device): Add
	comments.

2013-09-13  Jakub Jelinek  <jakub@redhat.com>

	PR tree-optimization/58392
	* testsuite/libgomp.c/pr58392.c: New test.

2013-09-06  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/target-2.c: New test.
	* testsuite/libgomp.c++/target-3.C: New test.

2013-09-05  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/target-2.C: New test.
	* testsuite/libgomp.c++/target-2-aux.cc: New file.

	* libgomp.map (GOMP_4.0): Add GOMP_target, GOMP_target_data,
	GOMP_target_end_data, GOMP_target_update and GOMP_teams.
	* Makefile.am (libgomp_la_SOURCES): Add target.c.
	* Makefile.in: Regenerated.
	* target.c: New file.
	* libgomp_g.h (GOMP_target, GOMP_target_data,
	GOMP_target_end_data, GOMP_target_update, GOMP_teams): New prototypes.
	* testsuite/libgomp.c++/for-11.C (main): Uncomment
	#pragma omp target teams directive.
	* testsuite/libgomp.c/for-3.c (main): Likewise.
	* testsuite/libgomp.c++/target-1.C: New test.
	* testsuite/libgomp.c/target-1.c: New test.

2013-07-06  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/for-3.c: New test.
	* testsuite/libgomp.c/simd-1.c: New test.
	* testsuite/libgomp.c/simd-2.c: New test.
	* testsuite/libgomp.c/simd-3.c: New test.

2013-07-05  Richard Henderson  <rth@redhat.com>

	* config/linux/bar.c (gomp_team_barrier_wait_end): Remove one more
	hard-coded constant.

2013-07-03  Richard Henderson  <rth@redhat.com>

	* config/linux/bar.h (BAR_TASK_PENDING, BAR_WAS_LAST,
	BAR_WAITING_FOR_TASK, BAR_INCR): New.
	(gomp_barrier_wait_start, gomp_barrier_last_thread, 
	gomp_team_barrier_set_task_pending,
	gomp_team_barrier_clear_task_pending,
	gomp_team_barrier_set_waiting_for_tasks,
	gomp_team_barrier_waiting_for_tasks,
	gomp_team_barrier_done): Use them.
	* config/linux/bar.c (gomp_barrier_wait_end,
	gomp_barrier_wait_last, gomp_team_barrier_wait_end): Likewise.
	* config/posix/bar.h, config/posix/bar.c: Similarly.

2013-07-03  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/atomic-14.C: Adjust for stricter atomic
	seq_cst parser.
	* testsuite/libgomp.c++/atomic-15.C: Likewise.
	* testsuite/libgomp.c/atomic-17.c: Likewise.

2013-06-28  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/simd-1.C: New test.
	* testsuite/libgomp.c++/simd-2.C: New test.
	* testsuite/libgomp.c++/simd-3.C: New test.

2013-06-21  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/for-1.h: New file.
	* testsuite/libgomp.c/for-2.h: New file.
	* testsuite/libgomp.c/for-1.c: New test.
	* testsuite/libgomp.c/for-2.c: New test.
	* testsuite/libgomp.c++/for-9.C: New test.
	* testsuite/libgomp.c++/for-10.C: New test.
	* testsuite/libgomp.c++/for-11.C: New test.

2013-06-12  Jakub Jelinek  <jakub@redhat.com>

	* fortran.c (omp_is_initial_device): Add ialias_redirect.
	(omp_is_initial_device_): New function.
	* omp_lib.f90.in (omp_is_initial_device): New interface.
	* omp.h.in (omp_is_initial_device): New prototype.
	* libgomp.map (omp_is_initial_device, omp_is_initial_device_):
	Export @@OMP_4.0.
	* env.c (omp_is_initial_device): New function.  Add ialias for it.
	* omp_lib.h.in (omp_is_initial_device): New external.

	* omp_lib.f90.in (omp_get_dynamic, omp_get_nested,
	omp_in_parallel, omp_get_max_threads, omp_get_num_procs,
	omp_get_num_threads, omp_get_thread_num, omp_get_thread_limit,
	omp_set_max_active_levels, omp_get_max_active_levels,
	omp_get_level, omp_get_ancestor_thread_num,
	omp_get_team_size, omp_get_active_level, omp_in_final,
	omp_get_cancellation, omp_get_default_device,
	omp_get_num_devices, omp_get_num_teams, omp_get_team_num): Remove
	useless use omp_lib_kinds.

2013-04-30  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/atomic-17.c: New test.
	* testsuite/libgomp.c++/atomic-14.C: New test.
	* testsuite/libgomp.c++/atomic-15.C: New test.

2013-04-10  Jakub Jelinek  <jakub@redhat.com>

	* libgomp.map (omp_get_cancellation, omp_get_cancellation_,
	omp_get_proc_bind, omp_get_proc_bind_, omp_set_default_device,
	omp_set_default_device_, omp_set_default_device_8_,
	omp_get_default_device, omp_get_default_device_,
	omp_get_num_devices, omp_get_num_devices_, omp_get_num_teams,
	omp_get_num_teams_, omp_get_team_num, omp_get_team_num_): Export
	@@OMP_4.0.
	(GOMP_cancel, GOMP_cancellation_point, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime,
	GOMP_parallel_loop_static, GOMP_parallel_sections, GOMP_parallel,
	GOMP_taskgroup_start, GOMP_taskgroup_end): Export @@GOMP_4.0.
	* parallel.c (GOMP_parallel_end): Add ialias.
	(GOMP_parallel, GOMP_cancel, GOMP_cancellation_point): New
	functions.
	* omp.h.in (omp_proc_bind_t): New typedef.
	(omp_get_cancellation, omp_get_proc_bind, omp_set_default_device,
	omp_get_default_device, omp_get_num_devices, omp_get_num_teams,
	omp_get_team_num): New prototypes.
	* env.c (omp_get_cancellation, omp_get_proc_bind,
	omp_set_default_device, omp_get_default_device, omp_get_num_devices,
	omp_get_num_teams, omp_get_team_num): New functions.
	* fortran.c (ULP, STR1, STR2, ialias_redirect): Removed.
	(omp_get_cancellation_, omp_get_proc_bind_, omp_set_default_device_,
	omp_set_default_device_8_, omp_get_default_device_,
	omp_get_num_devices_, omp_get_num_teams_, omp_get_team_num_): New
	functions.
	* libgomp.h (ialias_ulp, ialias_str1, ialias_str2, ialias_redirect,
	ialias_call): Define.
	* libgomp_g.h (GOMP_parallel_loop_static, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime, GOMP_parallel,
	GOMP_cancel, GOMP_cancellation_point, GOMP_taskgroup_start,
	GOMP_taskgroup_end, GOMP_parallel_sections): New prototypes.
	* task.c (GOMP_taskgroup_start, GOMP_taskgroup_end): New functions.
	* sections.c (GOMP_parallel_sections): New function.
	* loop.c (GOMP_parallel_loop_static, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime): New
	functions.
	(GOMP_parallel_end): Add ialias_redirect.
	* omp_lib.f90.in (omp_proc_bind_kind, omp_proc_bind_false,
	omp_proc_bind_true, omp_proc_bind_master, omp_proc_bind_close,
	omp_proc_bind_spread): New params.
	(omp_get_cancellation, omp_get_proc_bind, omp_set_default_device,
	omp_get_default_device, omp_get_num_devices, omp_get_num_teams,
	omp_get_team_num): New interfaces.
	* omp_lib.h.in (omp_proc_bind_kind, omp_proc_bind_false,
	omp_proc_bind_true, omp_proc_bind_master, omp_proc_bind_close,
	omp_proc_bind_spread): New params.
	(omp_get_cancellation, omp_get_proc_bind, omp_set_default_device,
	omp_get_default_device, omp_get_num_devices, omp_get_num_teams,
	omp_get_team_num): New externals.

2013-03-20  Tobias Burnus  <burnus@net-b.de>

	* libgomp.texi (Environment Variables): Minor cleanup,
	update section refs to OpenMP 4.0rc2.
	(OMP_DISPLAY_ENV, GOMP_SPINCOUNT): Document these
	environment variables.

2013-03-20  Tobias Burnus  <burnus@net-b.de>

	* env.c (handle_omp_display_env): New function.
	(initialize_env): Use it.

2013-03-20  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/atomic-14.c: Add parens to make it valid.
	* testsuite/libgomp.c/atomic-15.c: New test.
	* testsuite/libgomp.c/atomic-16.c: New test.

	* testsuite/libgomp.c++/atomic-10.C: New test.
	* testsuite/libgomp.c++/atomic-11.C: New test.
	* testsuite/libgomp.c++/atomic-12.C: New test.
	* testsuite/libgomp.c++/atomic-13.C: New test.

Copyright (C) 2013-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
