2013-09-27  Jakub Jelinek  <jakub@redhat.com>

	* libgomp.h: Include stdlib.h.
	(struct gomp_task_depend_entry,
	struct gomp_dependers_vec): New types.
	(struct gomp_task): Add dependers, depend_hash, depend_count,
	num_dependees and depend fields.
	(struct gomp_taskgroup): Add num_children field.
	(gomp_finish_task): Free depend_hash if non-NULL.
	* libgomp_g.h (GOMP_task): Add depend argument.
	* hashtab.h: New file.
	* task.c: Include hashtab.h.
	(hash_entry_type): New typedef.
	(htab_alloc, htab_free, htab_hash, htab_eq): New inlines.
	(gomp_init_task): Clear dependers, depend_hash and depend_count
	fields.
	(GOMP_task): Add depend argument, handle depend clauses.  Increment
	num_children field in taskgroup.
	(gomp_task_run_pre): Don't increment task_running_count here,
	nor clear task_pending bit.
	(gomp_task_run_post_handle_depend_hash,
	gomp_task_run_post_handle_dependers,
	gomp_task_run_post_handle_depend): New functions.
	(gomp_task_run_post_remove_parent): Clear in_taskwait before
	signalling corresponding semaphore.
	(gomp_task_run_post_remove_taskgroup): Decrement num_children
	field and make the decrement to 0 MEMMODEL_RELEASE operation,
	rather than storing NULL to taskgroup->children.  Clear
	in_taskgroup_wait before signalling corresponding semaphore.
	(gomp_barrier_handle_tasks): Move task_running_count increment
	and task_pending bit clearing here.  Call
	gomp_task_run_post_handle_depend.  If more than one new tasks
	have been queued, wake other threads if needed.
	(GOMP_taskwait): Call gomp_task_run_post_handle_depend.  If more
	than one new tasks have been queued, wake other threads if needed.
	After waiting on taskwait_sem, enter critical section again.
	(GOMP_taskgroup_start): Initialize num_children field.
	(GOMP_taskgroup_end): Check num_children instead of children
	before critical section.  If children is NULL, but num_children
	is non-zero, wait on taskgroup_sem.  Call
	gomp_task_run_post_handle_depend.  If more than one new tasks have
	been queued, wake other threads if needed.  After waiting on
	taskgroup_sem, enter critical section again.
	* testsuite/libgomp.c/depend-1.c: New test.
	* testsuite/libgomp.c/depend-2.c: New test.
	* testsuite/libgomp.c/depend-3.c: New test.
	* testsuite/libgomp.c/depend-4.c: New test.

2013-09-26  Jakub Jelinek  <jakub@redhat.com>

	PR libgomp/58482
	* testsuite/libgomp.c/simd-6.c: New test.
	* testsuite/libgomp.c++/simd-8.C: New test.

2013-09-25  Jakub Jelinek  <jakub@redhat.com>

	* parallel.c (GOMP_cancellation_point, GOMP_cancel): Handle
	GIMPLE_CANCEL_TASKGROUP cancellation.
	* libgomp.h (struct gomp_task): Add next_taskgroup, prev_taskgroup,
	taskgroup and copy_ctors_done fields.
	(struct gomp_taskgroup): New type.
	* task.c (gomp_init_task): Initialize copy_ctors_done and taskgroup
	fields.
	(GOMP_task): Don't start a new thread also if it's taskgroup has
	been cancelled.  Set copy_ctors_done field if needed.  Initialize
	taskgroup field.  If copy_ctors_done and already cancelled, don't
	discard the task.  If taskgroup is non-NULL, enqueue the task
	into taskgroup queue.
	(gomp_task_run_pre, gomp_task_run_post_remove_parent,
	gomp_task_run_post_remove_taskgroup): New inline functions.
	(gomp_barrier_handle_tasks, GOMP_taskwait): Use them.
	(GOMP_taskgroup_start, GOMP_taskgroup_end): Implement taskgroup
	support.
	* testsuite/libgomp.c++/cancel-parallel-1.C: New test.
	* testsuite/libgomp.c++/cancel-parallel-2.C: New test.
	* testsuite/libgomp.c++/cancel-parallel-3.C: New test.
	* testsuite/libgomp.c++/cancel-for-1.C: New test.
	* testsuite/libgomp.c++/cancel-for-1.C: New test.
	* testsuite/libgomp.c++/cancel-taskgroup-1.C: New test.
	* testsuite/libgomp.c++/cancel-taskgroup-2.C: New test.
	* testsuite/libgomp.c++/cancel-taskgroup-3.C: New test.
	* testsuite/libgomp.c++/cancel-test.h: New file.
	* testsuite/libgomp.c++/cancel-sections-1.C: New test.
	* testsuite/libgomp.c++/taskgroup-1.C: New test.
	* testsuite/libgomp.c/cancel-taskgroup-1.c: New test.
	* testsuite/libgomp.c/cancel-taskgroup-2.c: New test.
	* testsuite/libgomp.c/taskgroup-1.c: New test.
	* testsuite/libgomp.c/cancel-parallel-3.c (do_some_work): Use
	void return type.

2013-09-24  Richard Henderson  <rth@redhat.com>
	    Jakub Jelinek  <jakub@redhat.com>

	* libgomp.map (GOMP_4.0): Export GOMP_barrier_cancel,
	GOMP_loop_end_cancel, GOMP_sections_end_cancel.
	* parallel.c (GOMP_cancellation_point): Add WHICH argument, do nothing
	if gomp_cancel_var is false, handle workshare and parallel
	cancellation point, add ialias.
	(GOMP_cancel): Add WHICH and DO_CANCEL arguments, do nothing if
	gomp_cancel_var is false, call GOMP_cancellation_point if DO_CANCEL
	is false, handle workshare and parallel cancellation.
	* config/posix/bar.c (gomp_barrier_init): Clear cancellable field.
	(gomp_team_barrier_wait_end): Clear BAR_CANCELLED from state.
	Set work_share_cancelled to 0 on last thread, use __atomic_load_n.
	(gomp_team_barrier_wait_cancel_end, gomp_team_barrier_wait_cancel,
	gomp_team_barrier_cancel): New functions.
	* config/posix/bar.h (gomp_barrier_t): Add cancellable field.
	(BAR_CANCELLED): Define.
	(BAR_INCR): Set to 8.
	(gomp_team_barrier_wait_cancel, gomp_team_barrier_wait_cancel_end,
	gomp_team_barrier_cancel): New prototypes.
	(gomp_barrier_wait_start): Preserve BAR_CANCELLED bit.
	(gomp_barrier_wait_cancel_start, gomp_team_barrier_wait_final,
	gomp_team_barrier_cancelled): New inline functions.
	* config/linux/bar.c (gomp_team_barrier_wait_end): Clear BAR_CANCELLED
	from state where needed.  Set work_share_cancelled to 0 on last thread.
	(gomp_team_barrier_wait_final, gomp_team_barrier_wait_cancel_end,
	gomp_team_barrier_wait_cancel, gomp_team_barrier_cancel): New
	functions.
	* config/linux/bar.h (gomp_barrier_t): Add awaited_final field.
	(BAR_CANCELLED): Define.
	(BAR_INCR): Set to 8.
	(gomp_barrier_init): Initialize awaited_final field.
	(gomp_team_barrier_wait_final, gomp_team_barrier_wait_cancel,
	gomp_team_barrier_wait_cancel_end, gomp_team_barrier_cancel): New
	prototypes.
	(gomp_barrier_wait_start): Preserve BAR_CANCELLED bit.
	(gomp_barrier_wait_cancel_start, gomp_team_barrier_wait_final_start,
	gomp_team_barrier_cancelled): New inline functions.
	* work.c (gomp_work_share_end, gomp_work_share_end_nowait): Set
	team->work_shares_to_free to thr->ts.work_share before calling
	free_work_share.
	(gomp_work_share_end_cancel): New function.
	* team.c (gomp_thread_start): Use gomp_team_barrier_wait_final
	instead of gomp_team_barrier_wait.
	(gomp_new_team): Initialize work_shares_to_free, work_share_cancelled
	and team_cancelled fields.
	(gomp_team_end): Use gomp_team_barrier_wait_final instead of
	gomp_team_barrier_wait.  If team->team_cancelled, call
	gomp_fini_worshare on ws chain starting at team->work_shares_to_free
	rather than thr->ts.work_share.
	* env.c (gomp_global_icv): Initialize target_data field.
	(gomp_cancel_var): New global variable.
	(handle_omp_display_env): Print cancel-var ICV.
	(initialize_env): Parse OMP_CANCELLATION env var.
	(omp_get_cancellation): Return gomp_cancel_var.
	* barrier.c (GOMP_barrier_cancel): New function.
	* libgomp.h (gomp_cancel_var): New extern decl.
	(struct gomp_team): Add work_shares_to_free, work_share_cancelled
	and team_cancelled fields.
	(gomp_cancel_kind): New enum.
	(gomp_work_share_end_cancel): New prototype.
	* libgomp_g.h (GOMP_barrier_cancel, GOMP_loop_end_cancel,
	GOMP_sections_end_cancel): New prototypes.
	(GOMP_cancel, GOMP_cancellation_point): Adjust prototypes.
	* task.c (GOMP_task): If gomp_team_barrier_cancelled, don't
	queue or start new tasks.
	(gomp_barrier_handle_tasks): If gomp_team_barrier_cancelled,
	don't start any new tasks, just free all tasks.
	* sections.c (GOMP_sections_end_cancel): New function.
	* loop.c (GOMP_loop_end_cancel): New function.
	* testsuite/libgomp.c/cancel-parallel-1.c: New test.
	* testsuite/libgomp.c/cancel-parallel-2.c: New test.
	* testsuite/libgomp.c/cancel-parallel-3.c: New test.
	* testsuite/libgomp.c/cancel-for-1.c: New test.
	* testsuite/libgomp.c/cancel-for-2.c: New test.
	* testsuite/libgomp.c/cancel-sections-1.c: New test.

2013-09-23  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>

	* configure.ac: Add checks for plugins support.
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* target.c (struct target_mem_desc): Add device_descr field.
	(devices): New.
	(num_devices): New.
	(struct gomp_device_descr): New.
	(gomp_get_num_devices): Call gomp_target_init.
	(resolve_device): Return device_descr instead of int.
	(gomp_map_vars): Add devicep argument and update the function
	accordingly.
	(gomp_unmap_tgt): Likewise.
	(gomp_unmap_vars): Likewise.
	(gomp_update): Likewise.
	(GOMP_target): Use device_descr struct.
	(GOMP_target_data): Likewise.
	(GOMP_target_update): Likewise.
	(gomp_check_plugin_file_name): New.
	(gomp_load_plugin_for_device): New.
	(gomp_find_available_plugins): New.
	(gomp_target_init): New.

2013-09-19  Jakub Jelinek  <jakub@redhat.com>

	* libgomp_g.h (GOMP_target): Change 3rd argument to const void *.
	(GOMP_target_data, GOMP_target_update): Add openmp_target argument.
	* target.c (GOMP_target): Change fnname argument to openmp_target,
	with const void * type.
	(GOMP_target_data, GOMP_target_update): Add openmp_target argument.

	* testsuite/libgomp.c/simd-4.c: New test.
	* testsuite/libgomp.c/simd-5.c: New test.
	* testsuite/libgomp.c/udr-1.c: New test.
	* testsuite/libgomp.c/udr-2.c: New test.
	* testsuite/libgomp.c/udr-3.c: New test.
	* testsuite/libgomp.c++/udr-9.C: New test.

2013-09-18  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/simd-4.C: New test.
	* testsuite/libgomp.c++/simd-5.C: New test.
	* testsuite/libgomp.c++/simd-6.C: New test.
	* testsuite/libgomp.c++/simd-7.C: New test.
	* testsuite/libgomp.c++/udr-1.C: New test.
	* testsuite/libgomp.c++/udr-2.C: New test.
	* testsuite/libgomp.c++/udr-3.C: New test.
	* testsuite/libgomp.c++/udr-4.C: New test.
	* testsuite/libgomp.c++/udr-5.C: New test.
	* testsuite/libgomp.c++/udr-6.C: New test.
	* testsuite/libgomp.c++/udr-7.C: New test.
	* testsuite/libgomp.c++/udr-8.C: New test.

2013-09-16  Jakub Jelinek  <jakub@redhat.com>

	* splay-tree.h: New file.
	* target.c: Include stdbool.h.
	(splay_tree_node, splay_tree, splay_tree_key): New typedefs.
	(struct target_mem_desc, struct splay_tree_key_s): New structures.
	(splay_compare): New inline function.
	(gomp_get_num_devices): New function.
	(resolve_device): Use default_device_var ICV.  Add temporarily
	magic testing device number 257.
	(dev_splay_tree, dev_env_lock): New variables.
	(gomp_map_vars_existing, gomp_map_vars, gomp_unmap_tgt,
	gomp_unmap_vars, gomp_update): New functions.
	(GOMP_target, GOMP_target_data, GOMP_target_end_data,
	GOMP_target_update): Add support for magic testing device number 257.
	* libgomp.h (struct target_mem_desc): Forward declare.
	(struct gomp_task_icv): Add default_device_var and target_data.
	(gomp_get_num_devices): New prototype.
	* env.c (gomp_global_icv): Add default_device_var initializer.
	(parse_int): New function.
	(handle_omp_display_env): Print OMP_DEFAULT_DEVICE.
	(initialize_env): Initialize default_device_var.
	(omp_set_default_device): Set default_device_var ICV.
	(omp_get_default_device): Query default_device_var ICV.
	(omp_get_num_devices): Call gomp_get_num_devices.
	(omp_get_num_teams, omp_get_team_num, omp_is_initial_device): Add
	comments.

2013-09-13  Jakub Jelinek  <jakub@redhat.com>

	PR tree-optimization/58392
	* testsuite/libgomp.c/pr58392.c: New test.

2013-09-06  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/target-2.c: New test.
	* testsuite/libgomp.c++/target-3.C: New test.

2013-09-05  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/target-2.C: New test.
	* testsuite/libgomp.c++/target-2-aux.cc: New file.

	* libgomp.map (GOMP_4.0): Add GOMP_target, GOMP_target_data,
	GOMP_target_end_data, GOMP_target_update and GOMP_teams.
	* Makefile.am (libgomp_la_SOURCES): Add target.c.
	* Makefile.in: Regenerated.
	* target.c: New file.
	* libgomp_g.h (GOMP_target, GOMP_target_data,
	GOMP_target_end_data, GOMP_target_update, GOMP_teams): New prototypes.
	* testsuite/libgomp.c++/for-11.C (main): Uncomment
	#pragma omp target teams directive.
	* testsuite/libgomp.c/for-3.c (main): Likewise.
	* testsuite/libgomp.c++/target-1.C: New test.
	* testsuite/libgomp.c/target-1.c: New test.

2013-07-06  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/for-3.c: New test.
	* testsuite/libgomp.c/simd-1.c: New test.
	* testsuite/libgomp.c/simd-2.c: New test.
	* testsuite/libgomp.c/simd-3.c: New test.

2013-07-05  Richard Henderson  <rth@redhat.com>

	* config/linux/bar.c (gomp_team_barrier_wait_end): Remove one more
	hard-coded constant.

2013-07-03  Richard Henderson  <rth@redhat.com>

	* config/linux/bar.h (BAR_TASK_PENDING, BAR_WAS_LAST,
	BAR_WAITING_FOR_TASK, BAR_INCR): New.
	(gomp_barrier_wait_start, gomp_barrier_last_thread, 
	gomp_team_barrier_set_task_pending,
	gomp_team_barrier_clear_task_pending,
	gomp_team_barrier_set_waiting_for_tasks,
	gomp_team_barrier_waiting_for_tasks,
	gomp_team_barrier_done): Use them.
	* config/linux/bar.c (gomp_barrier_wait_end,
	gomp_barrier_wait_last, gomp_team_barrier_wait_end): Likewise.
	* config/posix/bar.h, config/posix/bar.c: Similarly.

2013-07-03  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/atomic-14.C: Adjust for stricter atomic
	seq_cst parser.
	* testsuite/libgomp.c++/atomic-15.C: Likewise.
	* testsuite/libgomp.c/atomic-17.c: Likewise.

2013-06-28  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c++/simd-1.C: New test.
	* testsuite/libgomp.c++/simd-2.C: New test.
	* testsuite/libgomp.c++/simd-3.C: New test.

2013-06-21  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/for-1.h: New file.
	* testsuite/libgomp.c/for-2.h: New file.
	* testsuite/libgomp.c/for-1.c: New test.
	* testsuite/libgomp.c/for-2.c: New test.
	* testsuite/libgomp.c++/for-9.C: New test.
	* testsuite/libgomp.c++/for-10.C: New test.
	* testsuite/libgomp.c++/for-11.C: New test.

2013-06-12  Jakub Jelinek  <jakub@redhat.com>

	* fortran.c (omp_is_initial_device): Add ialias_redirect.
	(omp_is_initial_device_): New function.
	* omp_lib.f90.in (omp_is_initial_device): New interface.
	* omp.h.in (omp_is_initial_device): New prototype.
	* libgomp.map (omp_is_initial_device, omp_is_initial_device_):
	Export @@OMP_4.0.
	* env.c (omp_is_initial_device): New function.  Add ialias for it.
	* omp_lib.h.in (omp_is_initial_device): New external.

	* omp_lib.f90.in (omp_get_dynamic, omp_get_nested,
	omp_in_parallel, omp_get_max_threads, omp_get_num_procs,
	omp_get_num_threads, omp_get_thread_num, omp_get_thread_limit,
	omp_set_max_active_levels, omp_get_max_active_levels,
	omp_get_level, omp_get_ancestor_thread_num,
	omp_get_team_size, omp_get_active_level, omp_in_final,
	omp_get_cancellation, omp_get_default_device,
	omp_get_num_devices, omp_get_num_teams, omp_get_team_num): Remove
	useless use omp_lib_kinds.

2013-04-30  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/atomic-17.c: New test.
	* testsuite/libgomp.c++/atomic-14.C: New test.
	* testsuite/libgomp.c++/atomic-15.C: New test.

2013-04-10  Jakub Jelinek  <jakub@redhat.com>

	* libgomp.map (omp_get_cancellation, omp_get_cancellation_,
	omp_get_proc_bind, omp_get_proc_bind_, omp_set_default_device,
	omp_set_default_device_, omp_set_default_device_8_,
	omp_get_default_device, omp_get_default_device_,
	omp_get_num_devices, omp_get_num_devices_, omp_get_num_teams,
	omp_get_num_teams_, omp_get_team_num, omp_get_team_num_): Export
	@@OMP_4.0.
	(GOMP_cancel, GOMP_cancellation_point, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime,
	GOMP_parallel_loop_static, GOMP_parallel_sections, GOMP_parallel,
	GOMP_taskgroup_start, GOMP_taskgroup_end): Export @@GOMP_4.0.
	* parallel.c (GOMP_parallel_end): Add ialias.
	(GOMP_parallel, GOMP_cancel, GOMP_cancellation_point): New
	functions.
	* omp.h.in (omp_proc_bind_t): New typedef.
	(omp_get_cancellation, omp_get_proc_bind, omp_set_default_device,
	omp_get_default_device, omp_get_num_devices, omp_get_num_teams,
	omp_get_team_num): New prototypes.
	* env.c (omp_get_cancellation, omp_get_proc_bind,
	omp_set_default_device, omp_get_default_device, omp_get_num_devices,
	omp_get_num_teams, omp_get_team_num): New functions.
	* fortran.c (ULP, STR1, STR2, ialias_redirect): Removed.
	(omp_get_cancellation_, omp_get_proc_bind_, omp_set_default_device_,
	omp_set_default_device_8_, omp_get_default_device_,
	omp_get_num_devices_, omp_get_num_teams_, omp_get_team_num_): New
	functions.
	* libgomp.h (ialias_ulp, ialias_str1, ialias_str2, ialias_redirect,
	ialias_call): Define.
	* libgomp_g.h (GOMP_parallel_loop_static, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime, GOMP_parallel,
	GOMP_cancel, GOMP_cancellation_point, GOMP_taskgroup_start,
	GOMP_taskgroup_end, GOMP_parallel_sections): New prototypes.
	* task.c (GOMP_taskgroup_start, GOMP_taskgroup_end): New functions.
	* sections.c (GOMP_parallel_sections): New function.
	* loop.c (GOMP_parallel_loop_static, GOMP_parallel_loop_dynamic,
	GOMP_parallel_loop_guided, GOMP_parallel_loop_runtime): New
	functions.
	(GOMP_parallel_end): Add ialias_redirect.
	* omp_lib.f90.in (omp_proc_bind_kind, omp_proc_bind_false,
	omp_proc_bind_true, omp_proc_bind_master, omp_proc_bind_close,
	omp_proc_bind_spread): New params.
	(omp_get_cancellation, omp_get_proc_bind, omp_set_default_device,
	omp_get_default_device, omp_get_num_devices, omp_get_num_teams,
	omp_get_team_num): New interfaces.
	* omp_lib.h.in (omp_proc_bind_kind, omp_proc_bind_false,
	omp_proc_bind_true, omp_proc_bind_master, omp_proc_bind_close,
	omp_proc_bind_spread): New params.
	(omp_get_cancellation, omp_get_proc_bind, omp_set_default_device,
	omp_get_default_device, omp_get_num_devices, omp_get_num_teams,
	omp_get_team_num): New externals.

2013-03-20  Tobias Burnus  <burnus@net-b.de>

	* libgomp.texi (Environment Variables): Minor cleanup,
	update section refs to OpenMP 4.0rc2.
	(OMP_DISPLAY_ENV, GOMP_SPINCOUNT): Document these
	environment variables.

2013-03-20  Tobias Burnus  <burnus@net-b.de>

	* env.c (handle_omp_display_env): New function.
	(initialize_env): Use it.

2013-03-20  Jakub Jelinek  <jakub@redhat.com>

	* testsuite/libgomp.c/atomic-14.c: Add parens to make it valid.
	* testsuite/libgomp.c/atomic-15.c: New test.
	* testsuite/libgomp.c/atomic-16.c: New test.

	* testsuite/libgomp.c++/atomic-10.C: New test.
	* testsuite/libgomp.c++/atomic-11.C: New test.
	* testsuite/libgomp.c++/atomic-12.C: New test.
	* testsuite/libgomp.c++/atomic-13.C: New test.

Copyright (C) 2013 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
