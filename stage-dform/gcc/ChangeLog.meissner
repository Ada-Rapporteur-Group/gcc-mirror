2016-05-10  Michael Meissner  <meissner@linux.vnet.ibm.com>

	<fsf submission>
	* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Use
	-mpower9-dform-scalar instead of -mpower9-dform.  Add note not to
	include -mpower9-dform-vector until we switch over to LRA.
	(POWERPC_MASKS): Add -mlra. Split -mpower9-dform into two. 
	switches, -mpower9-dform-scalar and -mpower9-dform-vector.
	* config/rs6000/rs6000.opt (-mlra): Switch to being an option mask
	bit instead of being a separate word.  Split -mpower9-dform into
	two switches, -mpower9-dform-scalar and -mpower9-dform-vector.
	* config/rs6000/rs6000.c (RELOAD_REG_QUAD_OFFSET): New addr_mask
	for the register class supporting 128-bit quad word memory
	offsets.
	(mode_supports_vsx_dform_quad): Helper function to return if the
	register class uses quad word memory offsets.
	(rs6000_debug_addr_mask): Add support for quad word memory
	offsets.
	(rs6000_debug_reg_global): Use TARGET_LRA instead of calling the
	lra_p target hook.
	(rs6000_setup_reg_addr_masks): If ISA 3.0 vector d-form
	instructions are enabled, set up the appropriate addr_masks for
	128-bit types.
	(rs6000_init_hard_regno_mode_ok): wb constraint is now based on
	-mpower9-dform-scalar, instead of -mpower9-dform.
	(rs6000_option_override_internal): Split -mpower9-dform into two
	switches, -mpower9-dform-scalar and -mpower9-dform-vector.  The
	-mpower9-dform switch sets or clears both.  If we are not using
	the LRA register allocator, do not enable -mpower9-dform-vector by
	default.  If we are using LRA, enable -mpower9-dform-vector and
	-mvsx-timode if it is appropriate.  Issue a warning if either
	-mpower9-dform-vector or -mvsx-timode are explicitly used without
	enabling LRA.
	(quad_address_offset_p): New helper function to return if the
	offset is legal for quad word memory instructions.
	(quad_address_p): New function to determin if GPR or vector
	register quad word memory addresses are legal.
	(mem_operand_gpr): Validate quad word address offsets.
	(reg_offset_addressing_ok_p): Add support for ISA 3.0 vector
	d-form (register + offset) instructions.
	(offsettable_ok_by_alignment): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(legitimate_lo_sum_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Add more debug statements for
	-mdebug=addr.
	(rs6000_legitimate_address_p): Add support for ISA 3.0 vector
	d-form instructions.
	(rs6000_secondary_reload_memory): Add support for ISA 3.0 vector
	d-form instructions.  Distinguish different cases in debug
	output.	(rs6000_secondary_reload_inner): Add support for ISA 3.0 vector
	d-form instructions.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_output_move_128bit): Add support for ISA 3.0 d-form
	instructions.  If ISA 3.0 is available, generate lxvx/stxvx instead
	of the ISA 2.06 indexed memory instructions.
	(rs6000_emit_prologue): If we have ISA 3.0 d-form instructions,
	use them to save/restore the saved vector registers instead of
	using Altivec instructions.
	(rs6000_emit_epilogue): Likewise.
	(rs6000_lra_p): Use TARGET_LRA instead of the old option word.
	(rs6000_opt_masks): Split -mpower9-dform into
	-mpower9-dform-scalar and -mpower9-dform-vector.
	(rs6000_print_options_internal): Print -mno-<switch> if <switch>
	was not selected.
	* config/rs6000/constraints.md (wO constraint): New constraint for
	ISA 3.0 vector d-form support.
	* config/rs6000/predicates.md (quad_memory_operand): Move most of
	the code into quad_address_p and call it to share code with
	vsx_quad_dform_memory_operand.
	(vsx_quad_dform_memory_operand): New predicate for ISA 3.0 vector
	d-form support.
	* config/rs6000/rs6000-protos.h (quad_address_p): Add declaration.
	* config/rs6000/rs6000.md (p9_vecload_<mode>): Delete hack to emit
	ISA 3.0 vector indexed memory instructions, and fold the code into
	the normal mov<mode> patterns.
	(p9_vecstore_<mode>): Likewise.
	(vsx_mov<mode>): Add support for ISA 3.0 vector d-form
	instructions.
	(vsx_movti_64bit): Likewise.
	(vsx_movti_32bit): Likewise.
	* doc/invoke.texi (RS/6000 and PowerPC Options): Add documentation
	for -mpower9-dform.  Document -mlra.
	* doc/md.texi (wO constraint): Document wO constraint.

2016-05-10  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 236097.
	* REVISION: Update subversion id.

2016-05-05  Michael Meissner  <meissner@linux.vnet.ibm.com>

	<fsf submission>
	* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Use
	-mpower9-dform-scalar instead of -mpower9-dform.  Add note not to
	include -mpower9-dform-vector until we switch over to LRA.
	(POWERPC_MASKS): Add -mlra. Split -mpower9-dform into two. 
	switches, -mpower9-dform-scalar and -mpower9-dform-vector.
	* config/rs6000/rs6000.opt (-mlra): Switch to being an option mask
	bit instead of being a separate word.  Split -mpower9-dform into
	two switches, -mpower9-dform-scalar and -mpower9-dform-vector.
	* config/rs6000/rs6000.c (RELOAD_REG_QUAD_OFFSET): New addr_mask
	for the register class supporting 128-bit quad word memory
	offsets.
	(mode_supports_vsx_dform_quad): Helper function to return if the
	register class uses quad word memory offsets.
	(rs6000_debug_addr_mask): Add support for quad word memory
	offsets.
	(rs6000_debug_reg_global): Use TARGET_LRA instead of calling the
	lra_p target hook.
	(rs6000_setup_reg_addr_masks): If ISA 3.0 vector d-form
	instructions are enabled, set up the appropriate addr_masks for
	128-bit types.
	(rs6000_init_hard_regno_mode_ok): wb constraint is now based on
	-mpower9-dform-scalar, instead of -mpower9-dform.
	(rs6000_option_override_internal): Split -mpower9-dform into two
	switches, -mpower9-dform-scalar and -mpower9-dform-vector.  The
	-mpower9-dform switch sets or clears both.  If we are not using
	the LRA register allocator, do not enable -mpower9-dform-vector by
	default.  If we are using LRA, enable -mpower9-dform-vector and
	-mvsx-timode if it is appropriate.  Issue a warning if either
	-mpower9-dform-vector or -mvsx-timode are explicitly used without
	enabling LRA.
	(quad_address_offset_p): New helper function to return if the
	offset is legal for quad word memory instructions.
	(quad_address_p): New function to determin if GPR or vector
	register quad word memory addresses are legal.
	(mem_operand_gpr): Validate quad word address offsets.
	(reg_offset_addressing_ok_p): Add support for ISA 3.0 vector
	d-form (register + offset) instructions.
	(offsettable_ok_by_alignment): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(legitimate_lo_sum_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Add more debug statements for
	-mdebug=addr.
	(rs6000_legitimate_address_p): Add support for ISA 3.0 vector
	d-form instructions.
	(rs6000_secondary_reload_memory): Add support for ISA 3.0 vector
	d-form instructions.  Distinguish different cases in debug
	output.	(rs6000_secondary_reload_inner): Add support for ISA 3.0 vector
	d-form instructions.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_output_move_128bit): Add support for ISA 3.0 d-form
	instructions.  If ISA 3.0 is available, generate lxvx/stxvx instead
	of the ISA 2.06 indexed memory instructions.
	(rs6000_emit_prologue): If we have ISA 3.0 d-form instructions,
	use them to save/restore the saved vector registers instead of
	using Altivec instructions.
	(rs6000_emit_epilogue): Likewise.
	(rs6000_lra_p): Use TARGET_LRA instead of the old option word.
	(rs6000_opt_masks): Split -mpower9-dform into
	-mpower9-dform-scalar and -mpower9-dform-vector.
	(rs6000_print_options_internal): Print -mno-<switch> if <switch>
	was not selected.
	* config/rs6000/constraints.md (wO constraint): New constraint for
	ISA 3.0 vector d-form support.
	* config/rs6000/predicates.md (quad_memory_operand): Move most of
	the code into quad_address_p and call it to share code with
	vsx_quad_dform_memory_operand.
	(vsx_quad_dform_memory_operand): New predicate for ISA 3.0 vector
	d-form support.
	* config/rs6000/rs6000-protos.h (quad_address_p): Add declaration.
	* config/rs6000/rs6000.md (p9_vecload_<mode>): Delete hack to emit
	ISA 3.0 vector indexed memory instructions, and fold the code into
	the normal mov<mode> patterns.
	(p9_vecstore_<mode>): Likewise.
	(vsx_mov<mode>): Add support for ISA 3.0 vector d-form
	instructions.
	(vsx_movti_64bit): Likewise.
	(vsx_movti_32bit): Likewise.
	* doc/invoke.texi (RS/6000 and PowerPC Options): Add documentation
	for -mpower9-dform.
	* doc/md.texi (wO constraint): Document wO constraint.

2016-05-04  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Update
	code.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Do not document
	-mpower9-dform-vector or -mpower9-dform-scalar.

	* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Do not add
	-mlra, -mvsx-timode or -mpower9-dform-vector.

	* config/rs6000/rs6000.opt (-mlra): Turn LRA into an option mask.
	(-mpower9-dform-scalar): Likewise.
	(-mpower9-dform-vector): Likewise.

	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Restore code
	to print LRA status.
	(rs6000_option_override_internal): Rework error messages to only
	mention -mpower9-dform and not -mpower9-dform-{scalar,vector}.
	Set -mpower9-dform-vector if -mlra and -mcpu=power9.
	(rs6000_opt_masks): Remove "LRA".

2016-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	<fsf submission>
	* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Make -mlra
	an option mask instead of setting a separate word.  Add -mlra and
	-mvsx-timode as defaults for power9. Split -mpower9-dform into
	-mpower9-dform-scalar and -mpower9-dform-vector. Add support for
	ISA 3.0 vector d-form instructions. Set -mlra by default if
	-mpower9-dform-vector. Set -mvsx-timode if -mlra. Add more debug
	printouts. If we have ISA 3.0 d-form vector instructions use them
	for the epilog and prolog. Add wO constraint for ISA 3.0 vector
	d-form instructions. Rewrite quad memory support to support both
	lq/stq for GPRs and ISA 3.0 vector d-forms for vector registers.
	Delete p9_vecload_<mode> and p9_vecstore_<mode> in favor of
	folding the ISA 3.0 endian load/store into the general mov<mode>
	insns.
	(POWERPC_MASKS): Likewise.
	* config/rs6000/rs6000.opt (-mlra): Likewise.
	(-mpower9-dform): Likewise.
	(-mpower9-dform-scalar): Likewise.
	(-mpower9-dform-vector): Likewise.
	* config/rs6000/rs6000.c (RELOAD_REG_QUAD_OFFSET): Likewise.
	(mode_supports_vsx_dform_quad): Likewise.
	(rs6000_debug_addr_mask): Likewise.
	(rs6000_setup_reg_addr_masks): Likewise.
	(rs6000_option_override_internal): Likewise.
	(quad_address_offset_p): Likewise.
	(mem_operand_gpr): Likewise.
	(reg_offset_addressing_ok_p): Likewise.
	(offsettable_ok_by_alignment): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(legitimate_lo_sum_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_secondary_reload_memory): Likewise.
	(rs6000_secondary_reload_inner): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_output_move_128bit): Likewise.
	(rs6000_emit_prologue): Likewise.
	(rs6000_emit_epilogue): Likewise.
	(rs6000_lra_p): Likewise.
	(rs6000_opt_masks): Likewise.
	(rs6000_print_options_internal): Likewise.
	* config/rs6000/constraints.md (wO constraint): Likewise.
	* config/rs6000/predicates.md (quad_memory_operand): Likewise.
	(vsx_quad_dform_memory_operand): Likewise.
	* config/rs6000/rs6000-protos.h (quad_address_p): Likewise.
	* config/rs6000/vsx.md (p9_vecload_<mode>): Likewise.
	(p9_vecstore_<mode>): Likewise.
	(vsx_mov<mode): Likewise.
	(vsx_movti_64bi): Likewise.
	(vsx_movti_32bit): Likewise.
	* doc/invoke.texi (RS/6000 and PowerPC Options): Likewise.
	* doc/md.texi (wO constraint): Likewise.

2016-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Add -mlra
	and -mvsx-timode as defaults.

	* config/rs6000/rs6000.opt (-mlra): Make the option an option
	mask.

	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Drop printing
	whether we have LRA since it is an option mask.
	(rs6000_option_override_internal): Rework -mlra and -mvsx-timode
	settings.
	(legitimate_lo_sum_address_p): Fix comment.
	(rs6000_lra_p): Use TARGET_LRA instead of flag_lra_p.
	(rs6000_opt_masks): Print -mlra, -mno-lra.

	Merge up to 235831.
	* REVISION: Update subversion id.

2016-05-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 235794.
	* REVISION: Update subversion id.

2016-05-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wO constraint): Add support for
	ISA 3.0 vector d-form (register + offset) instructions. Split the
	existing switch -mpower9-dform into -mpower9-dform-scalar and
	-mpower9-dform-vector. Disable vector d-form support if reload is
	used, due to some error cases. Add more debug statements.
	* config/rs6000/predicates.md (quad_memory_operand): Likewise.
	(vsx_quad_dform_memory_operand): Likewise.
	* config/rs6000/rs6000-cpus.def (POWERPC_MASKS): Likewise.
	(ISA_3_0_MASKS_SERVER): Likewise.
	* config/rs6000/rs6000-protos.h (quad_address_p): Likewise.
	* config/rs6000/rs6000.opt (-mpower9-dform): Likewise.
	(-mpower9-dform-scalar): Likewise.
	(-mpower9-dform-vector): Likewise.
	* config/rs6000/rs6000.c (RELOAD_REG_QUAD_OFFSET): Likewise.
	(mode_supports_vsx_dform_quad): Likewise.
	(rs6000_debug_addr_mask): Likewise.
	(rs6000_setup_reg_addr_masks): Likewise.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	(rs6000_option_override_internal): Likewise.
	(quad_address_offset_p): Likewise.
	(mem_operand_gpr): Likewise.
	(reg_offset_addressing_ok_p): Likewise.
	(offsettable_ok_by_alignment): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(legitimate_lo_sum_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_secondary_reload_memory): Likewise.
	(rs6000_secondary_reload_inner): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_output_move_128bit): Likewise.
	(rs6000_emit_prologue): Likewise.g
	(rs6000_emit_epilogue): Likewise.
	(rs6000_opt_masks): Likewise.
	(rs6000_print_options_internal): Likewise.
	* config/rs6000/vsx.md (p9_vecload_<mode>): Delete special ISA 3.0
	move instructions, fold support back into the standard mov insns.
	(p9_vecstore_<mode>): Likewise.
	(vsx_mov<mode>, 64-bit): Add ISA 3.0 vector d-form support.
	(vsx_mov<mode>, 32-bit): Likewise.
	(vsx_movti_64bit): Likewise.
	(vsx_movti_32bit): Likewise.
	* doc/invoke.texi (RS/6000 and PowerPC Options): Fix
	typo. Document ISA 3.0 vector d-form instructions.
	* doc/md.texi (wO constraint): Document new constraint.

2016-05-02   Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch subversion id 235776

