2012-03-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/power7.md (power7-integer): Remove isel.
	(power7-isel): New reservation, isel takes 4 cycles on power7.

	* config/rs6000/rs6000.c (rs6000_adjust_cost): Add support for
	differentiating a real ISEL from a bc+8 scheduled like an ISEL.

	* config/rs6000/rs6000.md (isel_type): New attribute to
	distinguish between isel and bc+8.
	(bcp8_<mode>): Set type to be isel on power7, define isel_type.

2012-03-07  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 185061.
	* REVISION: Update subversion id.

2012-03-01  Michael Meissner  <meissner@the-meissners.org>

	* config/rs6000/rs6000.opt (-madjust-cost-power7-branch): New
	debug switches.
	(-madjust-cost-power7-isel): Likewise.
	* config/rs6000/rs6000.c (rs6000_adjust_cost): Use them.

2012-02-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* doc/invoke.texi (RS/6000 & PowerPC options): Delete
	-cmove-madjacent-memory from this branch.
	* config/rs6000/rs6000.opt (-mcmove-adjacent-memory): Likwise.
	* config/rs6000/rs6000.c (rs6000_cmove_md_extra): Likewise.
	(TARGET_CMOVE_MD_EXTRA): Likewise.
	(rs6000_decompose_offsettable_memref): Likewise.

	* config/rs6000/rs6000.opt (-miabs=default): Change enum used.
	(-miminmax=default): Likewise.

	* config/rs6000/rs6000.c (*_cost): Use IABS_UNSET instead of
	IABS_DEFAULT.  Use IMINMAX_UNSET instead of IMINMAX_DEFAULT.  Make
	power7 default to use bc+8 for integer min/max.
	(rs6000_option_override_internal): Likewise.
	(rs6000_adjust_cost): On power7 make the cost of most integer
	compares 0 so the cmp is scheduled next to the branch.  Don't do
	it for expensive compares like floating point or multiply.
	(rs6000_opt_enums): Likewise.

	* config/rs6000/rs6000.md (bcp8_<mode>): Use li/lis instead of
	addi/addis to load constants.

	* config/rs6000/rs6000-opts.h (enum rs6000_iabs_t): Delete default
	enum in favor of using the unset enum.
	(enum rs6000_iminmax_t): Likewise.

	* config/rs6000/rs6000.opt (-madjust-cost-compare-branch): New
	switch to adjust cost values for compare and branch/isel.
	(-madjust-cost-compare-isel): Likewise.

	* config/rs6000/rs6000.c (rs6000_adjust_cost): If either
	-madjust-cost-compare-branch or -madjust-cost-compare-isel are
	used, adjust the cost between the compare and the branch/isel.

	* config/rs6000/rs6000.md (bcp8_<mode>): Change type to branch
	instead of isel.

	* doc/invoke.texi (RS/6000 & PowerPC options): Update
	documentation for new switches.

2012-02-24  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 184562.
	* REVISION: Update subversion id.

	* config/rs6000/rs6000.c (rs6000_adjust_cost): Increase the cost
	on power7 to force the compare futher away from the ISEL or BC+8
	instruction.
	(insn_must_be_first_in_group): On power7 ISEL and BC+8 insns must
	be in the first group.

	* config/rs6000/rs6000.md (bcp8_<mode>): Change type attribute to
	isel.

2012-02-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (output_isel): Allow for 0 in isel.  Add
	gcc_assert.
	(rs6000_expand_iminmax): New function to emit the insns for SMIN,
	SMAX, UMIN, and UMAX during the first split phase.

	* config/rs6000/predicates.md (reg_or_zero_operand): New predicate
	to match a register or 0.

	* config/rs6000/rs6000.md (smin<mode>3): Move split code to
	rs6000_expand_iminmax.
	(smax<mode>3): Likewise.
	(umin<mode>3): Likewise.
	(umax<mode>3): Likewise.
	(isel_<mode>): Use reg_or_zero_operand instead of
	reg_or_cint_operand to match hardware.
	(isel_reversed_<mode>): Add support for 0 being in the false
	case.
	(bcp8_<mode>): Allow limited integer constants in the false case.

	* config/rs6000/rs6000-protos.h (rs6000_expand_iminmax): Add
	declaration.

	* config/rs6000/rs6000.opt (-miabs=): Delete power, powerpc
	suboptions.
	(-miminmax=): Likewise.

	* config/rs6000/rs6000.c (cost structures): Remote power/powerpc
	options.
	(rs6000_emit_int_cmove): Add argument to specify type argument to
	ISEL.  Change callers.  Always add type argument to ISEL.  Delete
	old isel_signed, isel_unsigned patterns.
	(rs6000_emit_sISEL): Likewise.
	(rs6000_cmove_md_extra): Likewise.
	(rs6000_emit_cmove): Likewise.
	(rs6000_debug_reg_global): Delete -miabs={power,powerpc} and
	-miminmax={power, powerpc} options.
	(rs6000_option_override_internal): Likewise.
	(rs6000_rtx_costs): Likewise.
	(rs6000_opt_enums): Likewise.

	* config/rs6000/rs6000.h (TARGET_IABS_POWER): Delete.
	(TARGET_IMINMAX_POWER): Likewise.
	(ISEL_OK_P): Rename from ISEL_LIMITED_OK_P, add in normal -misel
	support.

	* config/rs6000/rs6000.md (ISEL_GENERAL): New constant, for normal
	isel operations.
	(smin<mode>3): Drop power support.  Fold isel, isel_limited cases
	together.
	(smax<mode>3): Likewise.
	(umin<mode>3): Rewrite umin/umax to be like smin/smax.  Drop old
	power support.  Delete old uminsi3/umindi3/umaxsi3/umaxdi3.
	(uminsi3): Likewise.
	(umaxsi3): Likewise.
	(umindi3): Likewise.
	(umaxdi3): Likewise.
	(abs<mode>2): Drop old power support.  Combine isel, isel_limited
	cases.
	(nabs<mode>2): Likewise.
	(isel_signed_<mode>): Likewise.
	(isel_unsigned_<mode>): Likewise.
	(isel_reversed_signed_<mode>): Likewise.
	(isel_reversed_unsigned_<mode>): Likewise.
	(isel_limited_signed_<mode>): Likewise.
	(isel_limited_reversed_signed_<mode>): Likewise.
	(mov<mode>cc): Pass new argument to rs6000_emit_cmove.
	(movsfcc): Likewise.
	(movdfcc): Likewise.

	* config/rs6000/rs6000-opts.h (COND_MODE_*): Drop power options.
	(enum rs6000_iabs_t): Likewise.
	(enum rs6000_iminmax_t): Likewise.

	* config/rs6000/rs6000-protos.h (rs6000_emit_cmove): Update
	prototype.

2012-02-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_rtx_costs): Add ABS, SMIN, SMAX,
	UMIN, UMAX costs.

	* config/rs6000/rs6000.md (smin<mode>3): Rewrite signed integer
	minimum, maximum to use -miminmax= to select which code generation
	strategy to use.  Delete old patterns.
	(sminsi3): Likewise.
	(smin/smax splitters): Likewise.
	(smax<mode>3): Likewise.
	(smaxsi3): Likewise.
	(smindi3): Likewise.
	(smaxdi3): Likewise.
	(dozsi3): Name pattern.
	(dozsi3_cmp): Likewise.

	* config/rs6000/rs6000.opt (TARGET_ISEL_LIMITED): Rename from
	rs6000_isel_limited.
	(-mabs=): Rename enum values.
	(-miminmax=): New switch to control how the compiler optimizes
	integer min/max operations.

	* config/rs6000/rs6000.c (struct processor_costs): Add iminmax
	field to say preferred method of optimizing integer minimum and
	maximum.  Add field to all cost structures.  Rename IABS
	enumeration values.
	(rs6000_debug_reg_global): Print out the preferred way to do
	integer minimum and maximum.  Rework printing iabs.
	(rs6000_option_override_internal): Add support for
	-miminmax=<xxx>.  Rearrange -miabs= code.  Add support for
	resetting it in target attribute/pragma handling.  Rename
	rs6000_isel_limited to TARGET_ISEL_LIMITED.  Clear bits for
	abs/min/max  options we don't support.
	(enum rs6000_opt_enum_t): Rename enum values.  Add support for
	-miminmax=.
	(rs6000_opt_enums): Likewise.
	(rs6000_inner_target_options): Likewise.
	(rs6000_valid_attribute_p): Reset -miabs=, -miminmax=.
	(rs6000_pragma_target_parse): Likewise.

	* config/rs6000/rs6000.h (TARGET_ISEL*): New macros to describe
	which code generation method of integer absolute value to
	generate.
	(TARGET_IMINMAX*): New macros to describe which code generation
	method of integer minimum and maximum to generate.
	(ISEL_LIMITED_OK_P): Add support -miminmiax=.

	* config/rs6000/rs6000.md (ISEL_IMINMIAX): Preparation for
	supporting -miminmax=.
	(abs<mode>2): Switch to using bitmasks for the different code
	generation methods instead of an enumeration.
	(nabs<mode>2): Likewise.

	* config/rs6000/rs6000-opts.h (COND_MODE_*): New macros for
	bitmasks to specify the different methods to use for integer
	absolute value, mininum, maximum, conditional move, etc.
	(enum rs6000_iabs_t): Rework to use bitmasks.  Rename enumeration
	values.
	(IABS_BIT_P): New accessor macro.
	(IABS_CLEAR_BIT): Likewise.
	(IABS_SET): Likewise.
	(enum rs6000_iminmax_t): New enumeration for supporting
	-miminmax=.
	(IMINMAX_BIT_P): New accessor macro.
	(IMINMAX_CLEAR_BIT): Likewise.
	(IMINMAX_SET): Likewise.

	* config/rs6000/sysv4.h (TARGET_POWER): If KEEP_POWER is defined,
	don't redefine this to be 0, so old power code can be tested.

2012-02-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.opt (rs6000_isel_limited): New target
	variable.

	* config/rs6000/rs6000.c (power7_cost): Prefer classical shift
	method to do integer ABS over isel or branch conditional + 8.
	(rs6000_option_override_internal): Set rs6000_isel_limited if we
	have ISA 2.06 options, but -misel was not set explicitly.  Warn if
	-miabs=isel was used but ISEL is not available.
	(rs6000_inner_target_options): Allow setting the iabs options.

	* config/rs6000/rs6000.h (ISEL_LIMITED_OK_P): Test whether we can
	do limited ISEL instructions.

	* config/rs6000/rs6000.md (abs<mode>2): Check whether we can issue
	ISEL in a limited fashion.
	(nabs<mode>2): Likewise.

	* doc/invoke.texi (RS/6000 & PowerPC options): Update -miabs=
	documentation.

2012-02-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.opt (-miabs=): New switch to control how
	the compiler optimizes integer absolute value.

	* config/rs6000/rs6000.c (struct processor_costs): Add iabs field
	to say preferred method of optimizing integer absolute value.  Add
	field to all cost structures.
	(rs6000_debug_reg_global): Print out the preferred way to do
	integer absolute value.
	(rs6000_option_override_internal): Add support for -miabs=<xxx>.
	(output_cbranch): Add argument for bc+8 support.

	* config/rs6000/rs6000.h (ISEL_LIMITED_OK_P): New macro to
	validate limited ISEL handling.

	* config/rs6000/rs6000.md (ISEL_IABS): New flag for generating
	ISEL in limited cases without enabling ISEL in general.
	(ISEL_BCP8): New flag for doing branch conditional + 8 support.
	(abs<mode>2): Rewrite integer absolute value to provide different
	methods for doing the absolute value.  Combine 32-bit and 64-bit.
	Split insns for ABS before register allocation.
	(abssi2): Likewise.
	(abssi2_power): Likewise.
	(abs<mode>2_isel): Likewise.
	(nabs<mode>2_isel): Likewise.
	(nabs<mode>2): Likewise.
	(abssi2_nopower): Likewise.
	(nabs_power): Likewise.
	(nabs_nopower): Likewise.
	(isel_limited_signed_<mode>): Likewise.
	(isel_limited_reverse_signed_<mode>): Likewise.
	(bcp8_<mode>): Likewise.
	(absdi2): Likewise.
	(absdi2_internal): Likewise.
	(nabsdi2): Likewise.
	(branch insns): Add new parameter to output_cbranch call.

	* config/rs6000/rs6000-opts.h (enum rs6000_iabs_t): New
	enumeration to specify how to optimize abs.

	* config/rs6000/rs6000-protos.h (output_cbranch): Add argument.

	* doc/invoke.texi (RS/6000 & PowerPC options): Document -miabs.

2012-02-13  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_cmove_md_extra): Don't allow the
	test to contain non-integral values.

2012-02-10  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* ifcvt.c (struct noce_if_info): Eliminate extra field that was
	added by mistake.

	* config/rs6000/rs6000.c (rs6000_cmove_md_extra): Don't allow
	SIGN_EXTEND or ZERO_EXTEND after the cobmine pass has been run.

	Merge up to 184104.
	* REVISION: Update subversion id.

2012-02-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* target.def (cmove_md_extra): New hook that is called from
	ifcvt.c to allow the backend to generate additional conditional
	moves that aren't handled by the machine independent code.  Add
	support to call the hook at the appropriate places.
	* targhooks.h (default_cmove_md_extra): Likewise.
	* targhooks.c (default_cmove_md_extra): Likewise.
	* target.h (enum ifcvt_pass): Likewise.
	* ifcvt.c (find_if_header): Likewise.
	(noce_find_if_block): Likewise.
	(struct noce_if_info): Likewise.
	(noce_process_if_block): Likewise.
	(cond_move_process_if_block): Likewise.
	(if_convert): Likewise.
	(rest_of_handle_if_conversion): Likewise.
	(rest_of_handle_if_after_combine): Likewise.
	(rest_of_handle_if_after_reload): Likewise.
	* doc/tm.texi (TARGET_CMOVE_MD_EXTRA): Likewise.
	* doc/tm.texi.in (TARGET_CMOVE_MD_EXTRA): Likewise.

	* config/rs6000/rs6000.opt (-mcmove-adjacent-memory): Add support
	for a new switch to optimize conditional moves where each side is
	a memory reference and the memory locations are adjacent.
	* config/rs6000/rs6000.c (rs6000_cmove_md_extra): Likewise.
	(TARGET_CMOVE_MD_EXTRA): Likewise.
	(rs6000_decompose_offsettable_memref): Likewise.

	Clone branch at subvesion id 184062.
	* REVISION: New file.


