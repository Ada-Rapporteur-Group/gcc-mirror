2010-12-24  Joern Rennecke  <amylaar@spamcop.net>

contrib:
	* config-list.mk: New file.

2010-12-21  Joern Rennecke  <amylaar@spamcop.net>

	PR other/46677
gcc:
	* doc/tm.texi: Regenerate.
	* doc/tm.texi.in (SIZE_TYPE): Now an enum integer_type_kind value.
	(PTRDIFF_TYPE, WCHAR_TYPE, WINT_TYPE, INTMAX_TYPE): Likewise.
	(UINTMAX_TYPE, SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE): Likewise.
	(INT32_TYPE, INT64_TYPE, UINT8_TYPE, UINT16_TYPE): Likewise.
	(UINT32_TYPE, UINT64_TYPE, INT_LEAST8_TYPE): Likewise.
	(INT_LEAST16_TYPE, INT_LEAST32_TYPE, INT_LEAST64_TYPE): Likewise.
	(UINT_LEAST8_TYPE, UINT_LEAST16_TYPE, UINT_LEAST32_TYPE): Likewise.
	(UINT_LEAST64_TYPE, INT_FAST8_TYPE, INT_FAST16_TYPE): Likewise.
	(INT_FAST32_TYPE, INT_FAST64_TYPE, UINT_FAST8_TYPE): Likewise.
	(UINT_FAST16_TYPE, UINT_FAST32_TYPE, UINT_FAST64_TYPE): Likewise.
	(INTPTR_TYPE, UINTPTR_TYPE): Likewise.
	* defaults.h: Adjust for new *_TYPE definitions.
	(PID_TYPE): Now an enum integer_type_kind value.
	(CHAR16_TYPE, CHAR32_TYPE): Likewise.
	* tree.c (integer_type_names): New array.
	* tree.h (integer_type_names): Declare.
	* coretypes.h (enum integer_type_kind):
	Add comment about connection with integer_type_names.
	* config/alpha/alpha.h: Adjust for new *_TYPE definitions.
	* config/alpha/openbsd.h, config/alpha/osf5.h: Likewise.
	* config/frv/frv.h, config/s390/tpf.h, config/s390/linux.h: Likewise.
	* config/m32c/m32c.h, config/sparc/linux.h: Likewise.
	* config/sparc/sp64-elf.h, config/sparc/openbsd64.h: Likewise.
	* config/sparc/sp-elf.h, config/sparc/sol2-bi.h: Likewise.
	* config/sparc/sparc.h, config/sparc/linux64.h: Likewise.
	* config/sparc/netbsd-elf.h, config/sparc/sysv4.h: Likewise.
	* config/interix.h, config/vx-common.h, config/mep/mep.h: Likewise.
	* config/m32r/linux.h, config/m32r/m32r.h: Likewise.
	* config/openbsd-stdint.h, config/rx/rx.h: Likewise.
	* config/i386/cygming.h, config/i386/linux.h: Likewise.
	* config/i386/djgpp.h, config/i386/djgpp-stdint.h: Likewise.
	* config/i386/x86-64.h, config/i386/netbsd.h: Likewise.
	* config/i386/netbsd-elf.h, config/i386/cygwin-stdint.h: Likewise.
	* config/i386/netware.h, config/i386/i386-interix.h: Likewise.
	* config/i386/mingw-stdint.h, config/i386/sol2-10.h: Likewise.
	* config/i386/openbsdelf.h, config/i386/darwin.h: Likewise.
	* config/i386/mingw32.h, config/i386/openbsd.h: Likewise.
	* config/i386/nto.h, config/i386/freebsd.h: Likewise.
	* config/freebsd-stdint.h, config/sol2.h, config/sh/elf.h: Likewise.
	* config/sh/sh.h, config/sh/sh64.h, config/pdp11/pdp11.h: Likewise.
	* config/avr/avr.h, config/crx/crx.h: Likewise.
	* config/xtensa/linux.h, config/xtensa/elf.h: Likewise.
	* config/stormy16/stormy16.h, config/fr30/fr30.h: Likewise.
	* config/lm32/lm32.h, config/lynx.h, config/moxie/moxie.h: Likewise.
	* config/m68hc11/m68hc11.h, config/cris/linux.h: Likewise.
	* config/cris/cris.h, config/netbsd.h: Likewise.
	* config/iq2000/iq2000.h, config/svr4.h, config/ia64/ia64.h: Likewise.
	* config/ia64/hpux.h, config/ia64/sysv4.h: Likewise.
	* config/glibc-stdint.h, config/newlib-stdint.h: Likewise.
	* config/m68k/m68kemb.h, config/m68k/openbsd.h: Likewise.
	* config/m68k/netbsd-elf.h, config/m68k/m68k.h: Likewise.
	* config/rs6000/aix53.h, config/rs6000/netbsd.h: Likewise.
	* config/rs6000/aix.h, config/rs6000/aix51.h: Likewise.
	* config/rs6000/aix43.h, config/rs6000/linux64.h: Likewise.
	* config/rs6000/darwin.h, config/rs6000/aix52.h: Likewise.
	* config/rs6000/rs6000.h, config/rs6000/aix-stdint.h: Likewise.
	* config/rs6000/aix61.h, config/rs6000/freebsd.h: Likewise.
	* config/rs6000/sysv4.h, config/picochip/picochip.h: Likewise.
	* config/mcore/mcore.h, config/arc/arc.h, config/darwin.h: Likewise.
	* config/score/score.h, config/arm/arm.h: Likewise.
	* config/arm/linux-gas.h, config/arm/pe.h: Likewise.
	* config/arm/freebsd.h, config/arm/netbsd.h: Likewise.
	* config/arm/netbsd-elf.h, config/pa/pa-hpux.h: Likewise.
	* config/pa/pa-hpux11.h, config/pa/pa-64.h, config/pa/pa.h: Likewise.
	* config/pa/pa32-linux.h, config/mips/linux.h: Likewise.
	* config/mips/sde.h, config/mips/openbsd.h: Likewise.
	* config/mips/iris6.h, config/mips/mips.h: Likewise.
	* config/mips/netbsd.h, config/vax/openbsd.h: Likewise.
	* config/vax/linux.h, config/vax/elf.h, config/vax/netbsd.h: Likewise.
	* config/freebsd.h, config/h8300/h8300.h, config/vxworks.h: Likewise.
	* config/hpux-stdint.h, config/bfin/bfin.h: Likewise.
	* config/mn10300/mn10300.h, config/m68k/linux.h: Likewise.
	* config/v850/v850.h: Likewise.
gcc/c-family:
	c-common.c (c_get_ident): Delete.
	(c_common_nodes_and_builtins): Adjust for new *_TYPE definitions.
	(c_stddef_cpp_builtins): Likewise.
gcc/fortan:
	* iso-c-binding.def:  Adjust for new *_TYPE definitions.
	* trans-types.c (get_typenode_from_name): Delete.
	(get_int_kind_from_name): Likewise.
	(get_int_kind_from_kind): New function.
	* f95-lang.c: Adjust for new *_TYPE definitions.
gcc/lto:
	* lto-lang.c (lto_build_c_type_nodes, lto_init): Adjust for
	new *_TYPE definitions.

2010-12-20  Joern Rennecke  <amylaar@spamcop.net>

	PR other/46677
	http://gcc.gnu.org/ml/gcc-patches/2010-12/msg00934.html
gcc:
	* doc/tm.texi: Regenerate.
	* doc/tm.texi.in (BOOL_TYPE_SIZE): Delete.
	(TARGET_BOOL_TYPE_SIZE): New hook.
	* targhooks.c (legacy_integer_type_size): New function.
	(default_bool_type_size, legacy_float_type_size): Likewise.
	* targhooks.h (legacy_integer_type_size): Declare.
	(default_bool_type_size, legacy_float_type_size): Likewise.
	* target.def (bool_type_size): New hook.
	(integer_type_size, float_type_size): Likewise.
	* defaults.h (BOOL_TYPE_SIZE): Delete.
	* tree.c (free_lang_data): Use targetm.bool_type_size.
	(build_common_tree_nodes): Likewise.
	* tree.h (enum integer_type_kind): Move from here...
	* coretypes.h ... to here.
	* target.h (enum th_float_type): New enum.
	* tree-ssa-loop-ivopts.c (add_standard_iv_candidates):
	Use targetm.integer_type_size.
	* tree-data-ref.c: Include target.h
	(estimated_loop_iterations_tree): Use targetm.integer_type_size.
	* system.h (BOOL_TYPE_SIZE): Poison.
	* Makefile.in (tree-data-ref.o): Depend on $(TARGET_H) .
	* config/rs6000/darwin.h (BOOL_TYPE_SIZE): Delete.
	(darwin_bool_type_size): Declare.
	(TARGET_BOOL_TYPE_SIZE): Define.
	* config/darwin.c (darwin_bool_type_size): New function.
gcc/c-family.c:
	* c-common.c (c_common_to_target_charset):
	Use TYPE_PRECISION (char_type_node).
gcc/java:
	* decl.c (java_init_decl_processing): Use targetm.integer_type_size.
	* expr.c (expand_java_return): Likewise.
gcc/ada:
	* gcc-interface/decl.c (gnat_to_gnu_entity):
	Use targetm.float_type_size and targetm.integer_type_size.
	(make_type_from_size): Use targetm.integer_type_size.
	* gcc-interface/targtyps.c: Include target.h .
	[!ADA_LONG_TYPE_SIZE] (ADA_LONG_TYPE_SIZE):
	Use targetm.integer_type_size.
	[!WIDEST_HARDWARE_FP_SIZE] (LONG_DOUBLE_TYPE_SIZE): Don't define.
	(get_target_char_size): Use targetm.integer_type_size.
	(get_target_wchar_t_size, get_target_short_size): Likewise.
	(get_target_int_size, get_target_long_long_size): Likewise.
	(get_target_float_size): Use targetm.float_type_size.
	(get_target_double_size, get_target_long_double_size): Likewise.
	(MALLOC_OBSERVABLE_ALIGNMENT): Use targetm.integer_type_size.
	* gcc-interface/trans.c: Include target.h .
	(gigi): Use targetm.float_type_size.
	(build_binary_op_trapv): Use targetm.integer_type_size.
	* gcc-interface/Make-lang.in (ada/targtyps.o): Depend on $(TARGET_H).
	(ada/trans.o): Likewise.
gcc/fortran:
	* trans-types.c (gfc_init_kinds): Use targetm.integer_type_size.
	(gfc_build_int_type): Likewise.
	(gfc_build_uint_type): Use TYPE_PRECISION on the type nodes checked.
	(gfc_build_real_type): Use targetm.float_type_size.
	(gfc_build_logical_type): Use targetm.bool_type_size.
	[0] (c_size_t_size): Delete.
	* f95-lang.c [!CHAR_TYPE_SIZE] (CHAR_TYPE_SIZE): Don't define.
	[!INT_TYPE_SIZE] (INT_TYPE_SIZE): Likewise.
	* iso-c-binding.def (c_bool): Use targetm.bool_type_size.
	* types.def (BT_BOOL): Likewise.
	* trans-intrinsic.c (build_round_expr): Use TYPE_PRECISION
	on *_integer_type_node to find out these type's sizes.
	(gfc_conv_intrinsic_leadz, gfc_conv_intrinsic_trailz): Likewise.
	(gfc_conv_intrinsic_popcnt_poppar): Likewise.

2010-12-19  Joern Rennecke  <amylaar@spamcop.net>

	PR other/46677
	http://gcc.gnu.org/ml/gcc-patches/2010-11/msg02772.html
gcc:
	* targhooks.c (pointer_size): New function.
	* cppbuiltin.c (define_builtin_macros_for_lp64): Use pointer_size.
	(define_builtin_macros_for_type_sizes): Likewise.
	* target.h (pointer_size): Declare.

	* cppbuiltin.c (define_builtin_macros_for_type_sizes):
	Use TYPE_PRECISION (char_type_node).
gcc/c-family:
	c-common.c (c_common_nodes_and_builtins): Use pointer_size.
gcc/java:
	* decl.c (java_init_decl_processing): Use pointer_size.
	* java-tree.h (JAVA_POINTER_SIZE): Define.
	* class.c (make_class_data): Use JAVA_POINTER_SIZE.
	(emit_register_classes): Likewise.
	* jcf-parse.c (handle_long_constant): Likewise.
	* constants.c (build_constants_constructor): Likewise.
	* builtins.c (UNMARSHAL3, UNMARSHAL4, UNMARSHAL5): Likewise.
	(compareAndSwapObject_builtin): Likewise.
	* boehm.c (get_boehm_type_descriptor): Likewise.
	(mark_reference_fields): Add log2_size parameter.  Changed all callers.
gcc/cp:
	* cvt.c (cp_convert_to_pointer): Use TYPE_PRECISION (ptr_type_node).
gcc/fortran:
	* trans-types.c (gfc_init_kinds): Use pointer_size.
gcc/lto:
	* lto-object.c (lto_obj_begin_section): Use pointer_size.
ada:
	* gcc-interface/decl.c (gnat_to_gnu_entity): Replace pointer_size
	with pointer_size_t.  Replace POINTER_SIZE with pointer_size ().
	(rest_of_type_decl_compilation_no_defer): Use pointer_size.
	(gnat_to_gnu_param, annotate_rep, make_type_from_size): Likewise.
	* gcc-interface/utils2.c: Include target.h .
	(maybe_wrap_malloc, maybe_wrap_free): Use pointer_size.
	* gcc-interface/targtyps.c: Include target.h .
	(get_target_pointer_size): Use pointer_size.

2010-12-19  Joern Rennecke  <amylaar@spamcop.net>

	From Ralf Wildenhues:
	* target.def (init_cumulative_args): Documentation spelling fixes.
	* doc/tm.texi: Regenerate.

2010-12-18  Joern Rennecke  <amylaar@spamcop.net>

gcc:
	* doc/tm.texi: Regenerate.
	* doc/tm.texi.in (CALL_POPS_ARGS): Change into ...
	(TARGET_CALL_POPS_ARGS): New hook.
	(TARGET_CUMULATIVE_ARGS_SIZE): New hook marker.
	(TARGET_INIT_CUMULATIVE_ARGS): Likewise.
	* targhooks.c (legacy_init_cumulative_args): New function.
	(init_simple_cumulative_args, hook_int_cumulative_args_0): Likewise.
	* targhooks.h (legacy_init_cumulative_args): Declare.
	(init_simple_cumulative_args, hook_int_cumulative_args_0): Likewise.
	* genrecog.c (write_header): Also include target.h.
	* genemit.c (main): Likewise.
	* genconditions.c (write_header): Likewise.
	* gengtype (do_typedef): Also special-case cumulative_args_t.
	(main): Likewise.
	* target.def (cumulative_args_size): New const pod "hook".
	(init_cumulative_args, call_pops_args): New hooks.
	* target.h (cumulative_args_t) Move from here ...
	* coretypes.h (cumulative_args_t): ... to here.
	* builtin.c (std_gimplify_va_arg_expr): Use pack_cumulative_args.
	* expr.c (block_move_libcall_safe_for_call_parm): Use new hooks.
	* dse.c (get_call_args): Likewise.
	* calls.c (emit_call_1, emit_library_call_value_1): Likewise.
	* function.c (pass_by_reference): Take a cumulative_args_t parameter.
	Changed all callers.
	(reference_callee_copied): Likewise.
	(struct assign_parm_data_all): Change type of args_so_far to
	cumulative_args_t.  Changed all users.
	(assign_parms_initialize_all): Take an extra void * parameter.
	Changed all callers.  Use new hooks.
	* function.h (struct incoming_arg) <info>: Change type to
	cumulative_args_t.  Changed all users.
	(pass_by_reference, reference_callee_copied): Update prototype.
	* calls.c (emit_call_1): Changed args_so_far to cumulative_args_t.
	Changed all callers.
	(initialize_argument_information): Likewise.
	* Makefile.in (insn-emit.o): Depend on $(TARGET_H).
	(insn-recog.o): Likewise.
	(build/gencondmd.o): Depend on target.h.
	* config/m32c/m32c.h (CALL_POPS_ARGS): Don't define.
	* config/sh/sh.c (TARGET_CALL_POPS_ARGS): Override.
	(sh_call_pops_args): New function.
	* config/sh/sh.h (CALL_POPS_ARGS): Don't define.
gcc/ada:
	* gcc-interface/misc.c (default_pass_by_ref): Update for new
	pass_by_reference signature.

2010-12-17  Joern Rennecke  <amylaar@spamcop.net>

gcc/ada:
	* gcc-interface/decl.c (gnat_to_gnu_param): Use pack_cumulative_args.

2010-12-17  Joern Rennecke  <amylaar@spamcop.net>

	PR middle-end/46500
	http://gcc.gnu.org/ml/gcc-patches/2010-11/msg01994.html
	http://gcc.gnu.org/ml/gcc-bugs/2010-11/msg03026.html
gcc:
	* doc/tm.texi: Regenerate.
	* targhooks.c (default_setup_incoming_varargs): Replace
	CUMULATIVE_ARGS* argument type with cumulative_args_t.
	(default_pretend_outgoing_varargs_named): Likewise.
	(hook_pass_by_reference_must_pass_in_stack): Likewise.
	(hook_callee_copies_named): Likewise.
	(default_function_arg_advance): Likewise.
	(default_function_arg): Likewise.
	(default_function_incoming_arg): Likewise.
	(hook_bool_CUMULATIVE_ARGS_false): Likewise.
	(hook_bool_CUMULATIVE_ARGS_true): Likewise.
	(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false): Likewise.
	(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true): Likewise.
	(hook_int_CUMULATIVE_ARGS_mode_tree_bool_0): Likewise.
	* targhooks.h (default_setup_incoming_varargs): Likewise.
	(default_pretend_outgoing_varargs_named): Likewise.
	(hook_pass_by_reference_must_pass_in_stack): Likewise.
	(hook_callee_copies_named): Likewise.
	(default_function_arg_advance): Likewise.
	(default_function_arg): Likewise.
	(default_function_incoming_arg): Likewise.
	(hook_bool_CUMULATIVE_ARGS_false): Likewise.
	(hook_bool_CUMULATIVE_ARGS_true): Likewise.
	(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false): Likewise.
	(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true): Likewise.
	(hook_int_CUMULATIVE_ARGS_mode_tree_bool_0): Likewise.
	* target.def (pass_by_reference): Likewise.
	(setup_incoming_varargs, strict_argument_naming): Likewise.
	(pretend_outgoing_varargs_named, callee_copies): Likewise.
	(arg_partial_bytes, function_arg_advance, function_arg): Likewise.
	(function_incoming_arg): Likewise.
	* target.h: Don't include "tm.h" .
	(cumulative_args_t): New typedef.
	[GCC_TM_H] (get_cumulative_args): New static inline function.
	[GCC_TM_H] (pack_cumulative_args): Likewise.
	* config/alpha/alpha.c (alpha_function_arg): Replace CUMULATIVE_ARGS*
	argument type with cumulative_args_t.
	(alpha_function_arg_advance, alpha_arg_partial_bytes): Likewise.
	(alpha_pass_by_reference, alpha_setup_incoming_varargs): Likewise.
	* config/frv/frv.c (frv_setup_incoming_varargs): Likewise.
	(frv_arg_partial_bytes, frv_function_arg): Likewise.
	(frv_function_incoming_arg, frv_function_arg_advance): Likewise.
	(frv_function_arg_1): Likewise.
	* config/s390/s390.c (s390_pass_by_reference): Likewise.
	(s390_function_arg_advance, s390_function_arg): Likewise.
	* config/m32c/m32c.c (m32c_function_arg): Likewise.
	(m32c_pass_by_reference, m32c_function_arg_advance): Likewise.
	(m32c_strict_argument_naming): Likewise.
	* config/spu/spu.c (spu_pass_by_reference, spu_function_arg): Likewise.
	(spu_function_arg_advance): Likewise.
	(spu_setup_incoming_varargs): Likewise.  Make static.
	* config/spu/spu-protos.h (spu_setup_incoming_varargs):
	Remove prototype.
	* config/sparc/sparc.c (sparc_strict_argument_naming): Replace
	CUMULATIVE_ARGS* argument type with cumulative_args_t.
	(sparc_pass_by_reference, sparc_function_arg_advance): Likewise.
	(sparc_function_arg, sparc_function_incoming_arg): Likewise.
	(sparc_arg_partial_bytes, sparc_function_arg_1): Likewise.
	* config/mep/mep.c (mep_setup_incoming_varargs): Likewise.
	(mep_pass_by_reference, mep_function_arg): Likewise.
	(mep_function_arg_advance): Likewise.
	* config/m32r/m32r.c (m32r_setup_incoming_varargs): Likewise.
	(m32r_pass_by_reference, m32r_arg_partial_bytes): Likewise.
	(m32r_function_arg, m32r_function_arg_advance): Likewise.
	* config/rx/rx.c (rx_function_arg, rx_function_arg_advance): Likewise.
	* config/i386/i386.c (ix86_function_arg_advance): Likewise.
	(ix86_function_arg, ix86_pass_by_reference): Likewise.
	(ix86_setup_incoming_varargs): Likewise.
	* config/sh/sh.c (sh_setup_incoming_varargs): Likewise.
	(sh_strict_argument_naming): Likewise.
	(sh_pretend_outgoing_varargs_named, sh_pass_by_reference): Likewise.
	(sh_callee_copies, sh_arg_partial_bytes): Likewise.
	(sh_function_arg_advance, sh_function_arg): Likewise.
	* config/pdp11/pdp11.c (pdp11_function_arg): Likewise.
	(pdp11_function_arg_advance): Likewise.
	* config/microblaze/microblaze.c (microblaze_function_arg_advance):
	Likewise.
	(microblaze_function_arg, function_arg_partial_bytes): Likewise.
	* config/avr/avr.c (avr_function_arg): Likewise.
	(avr_function_arg_advance): Likewise.
	* config/crx/crx.c (crx_function_arg): Likewise.
	(crx_function_arg_advance): Likewise.
	* config/xtensa/xtensa.c (xtensa_function_arg_advance): Likewise.
	(xtensa_function_arg, xtensa_function_incoming_arg): Likewise.
	(xtensa_function_arg_1): Likewise.
	* config/stormy16/stormy16.c (xstormy16_function_arg_advance): Likewise.
	(xstormy16_function_arg): Likewise.
	* config/fr30/fr30.c (fr30_setup_incoming_varargs): Likewise.
	(fr30_arg_partial_bytes, fr30_function_arg): Likewise.
	(fr30_function_arg_advance): Likewise.
	* config/lm32/lm32.c (lm32_setup_incoming_varargs): Likewise.
	(lm32_function_arg, lm32_function_arg_advance): Likewise.
	* config/moxie/moxie.c (moxie_setup_incoming_varargs): Likewise.
	(moxie_function_arg, moxie_function_arg_advance): Likewise.
	(moxie_pass_by_reference, moxie_arg_partial_bytes): Likewise.
	* config/m68hc11/m68hc11.c (m68hc11_function_arg): Likewise.
	(m68hc11_function_arg_advance): Likewise.
	* config/cris/cris.c (cris_setup_incoming_varargs): Likewise.
	(cris_pass_by_reference, cris_arg_partial_bytes): Likewise.
	(cris_function_arg, cris_function_incoming_arg): Likewise.
	(cris_function_arg_advance, cris_function_arg_1): Likewise.
	* config/iq2000/iq2000.c (iq2000_setup_incoming_varargs): Likewise.
	(iq2000_pass_by_reference, iq2000_arg_partial_bytes): Likewise.
	(iq2000_function_arg, iq2000_function_arg_advance): Likewise.
	* config/mn10300/mn10300.c (mn10300_pass_by_reference): Likewise.
	(mn10300_function_arg, mn10300_function_arg_advance): Likewise.
	(mn10300_arg_partial_bytes): Likewise.
	* config/ia64/ia64.c (ia64_setup_incoming_varargs): Likewise.
	(ia64_arg_partial_bytes, ia64_function_arg): Likewise.
	(ia64_function_incoming_arg, ia64_function_arg_advance): Likewise.
	(ia64_function_arg_1): Likewise.
	* config/m68k/m68k.c (m68k_function_arg_advance): Likewise.
	(m68k_function_arg): Likewise.
	* config/rs6000/rs6000.c (rs6000_function_arg_advance): Likewise.
	(rs6000_function_arg, setup_incoming_varargs): Likewise.
	(rs6000_pass_by_reference, rs6000_arg_partial_bytes): Likewise.
	* config/picochip/picochip.c (picochip_arg_partial_bytes): Likewise.
	(picochip_function_arg, picochip_incoming_function_arg): Likewise.
	(picochip_arg_advance): Likewise.
	* config/mcore/mcore.c (mcore_setup_incoming_varargs): Likewise.
	(mcore_arg_partial_bytes, mcore_function_arg): Likewise.
	(mcore_function_arg_advance): Likewise.
	* config/arc/arc.c (arc_setup_incoming_varargs): Likewise.
	(arc_pass_by_reference, arc_function_arg): Likewise.
	(arc_function_arg_advance): Likewise.
	* config/score/score.c (score_pass_by_reference): Likewise.
	(score_function_arg_advance): Likewise.
	(score_arg_partial_bytes): Likewise.  Make static.
	* config/score/score-protos.h (score_arg_partial_bytes): Don't declare.
	* config/arm/arm.c (arm_arg_partial_bytes): Replace
	CUMULATIVE_ARGS* argument type with cumulative_args_t.
	(arm_function_arg, arm_function_arg_advance): Likewise.
	(arm_setup_incoming_varargs, arm_pass_by_reference): Likewise.
	* config/pa/pa.c (pa_pass_by_reference): Likewise.
	(pa_arg_partial_bytes, pa_function_arg_advance): Likewise.
	(pa_function_arg): Likewise.
	* config/mips/mips.c (mips_strict_argument_naming): Likewise.
	(mips_function_arg, mips_function_arg_advance): Likewise.
	(mips_arg_partial_bytes, mips_pass_by_reference): Likewise.
	(mips_callee_copies, mips_setup_incoming_varargs): Likewise.
	* config/vax/vax.c (vax_function_arg): Likewise.
	(vax_function_arg_advance): Likewise.
	* config/h8300/h8300.c (h8300_function_arg): Likewise.
	(h8300_function_arg_advance): Likewise.
	* config/v850/v850.c (v850_pass_by_reference): Likewise.
	(v850_strict_argument_naming, v850_function_arg): Likewise.
	(v850_arg_partial_bytes, v850_function_arg_advance): Likewise.
	(v850_setup_incoming_varargs): Likewise.
	* config/mmix/mmix.c (mmix_setup_incoming_varargs): Likewise.
	(mmix_function_arg_advance, mmix_function_incoming_arg): Likewise.
	(mmix_function_arg, mmix_pass_by_reference): Likewise.
	(mmix_function_arg_1): Replace const CUMULATIVE_ARGS* argument type
	with const void *.
	* config/bfin/bfin.c (setup_incoming_varargs): Replace
	CUMULATIVE_ARGS* argument type with cumulative_args_t.
	(bfin_function_arg_advance, bfin_function_arg): Likewise.
	(bfin_arg_partial_bytes, bfin_pass_by_reference): Likewise.
	* calls.c (initialize_argument_information): Use pack_cumulative_args.
	(expand_call, emit_library_call_value_1): Likewise.
	* dse.c (get_call_args): Likewise.
	* expr.c (block_move_libcall_safe_for_call_parm): Likewise.
	* function.c (pass_by_reference, reference_callee_copied): Likewise.
	(assign_parm_find_data_types, assign_parms_setup_varargs): Likewise.
	(assign_parm_find_entry_rtl, assign_parms): Likewise.
	(gimplify_parameters): Likewise.
	* config/iq2000/iq2000.c (iq2000_expand_prologue): Likewise.
	* config/mips/mips.c (mips_output_args_xfer): Likewise.
	* config/s390/s390.c (s390_call_saved_register_used): Likewise.
	* config/sh/sh.c (sh_output_mi_thunk): Likewise.
	* config/microblaze/microblaze.c (microblaze_expand_prologue): Likewise.
	* config/m32r/m32r.c (m32r_return_in_memory): Adjust for changed
	m32r_pass_by_reference.
	* config/spu/spu.c (spu_gimplify_va_arg_expr): Adjust for changed
	spu_pass_by_reference.
gcc/c-family:
	* c-opts.c: Include "tm.h" .
gcc/java:
	* expr.c: Include "tm.h" .
gcc/fortran:
	* trans-types.c: Include "tm.h" .

2010-12-17  Joern Rennecke  <amylaar@spamcop.net>

	PR46738
	http://gcc.gnu.org/ml/gcc-patches/2010-12/msg00128.html
gcc:
	* targhooks.c (legacy_asm_output_ident): New function.
	* targhooks.h (legacy_asm_output_ident): Declare.
	* target.def (asm_out): New hook output_ident.
	* doc/tm.texi.in (TARGET_ASM_OUTPUT_IDENT): Indicate place for new
	hook.
	* doc/tm.texi: Regenerate.
gcc/c-family:
	* c-lex.c (cb_ident): Use targetm.asm_out.output_ident.
gcc/ada:
	* gcc-interface/Make-lang.in (ada/trans.o): Depend on $(TARGET_H).
	* gcc-interface/trans.c: Include target.h .
	(gigi): Use targetm.asm_out.output_ident .

2010-12-17  Joern Rennecke  <amylaar@spamcop.net>

	Created pr46489-20101217-branch, revision 167974.
