# Copyright (c) Microsoft Corporation.

# MIT License

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: package-source-tarball

on:
  # We use only push event and workflow_dispatch event.
  # so that this workflow will show up during the PR
  push:
    branches:
      - "releases/**"
  workflow_dispatch:

jobs:
  package:
    container: cblmariner2preview.azurecr.io/base/core:2.0
    runs-on: ubuntu-22.04
    steps:

      # We need to install a minimum number of packages to run the workflow: git and ca-certificates.
      # We need to checkout the repository, and to checkout the repository we need git, since 
      # by default CBL-Mariner 2.0 image does not have git running.
      - name: Install Minimal Required Packages
        run: unset HOME && tdnf install git ca-certificates -y
        shell: bash

      # Clone the GCC repository to path gcc.
      - name: Checkout GCC Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          lfs: false
          path: gcc

      # Run composite job to generate gcc tar.xz files.
      - name: Run Composite Job To Build Tarball
        uses: ./gcc/.github/actions/build-tarball

      # Upload gcc-${{ env.release_version }}.tar.xz file to the Github Action artifact storage.
      # The variable ${{ env.release_version }} will be set by ./gcc/.github/actions/build-tarball job.
      - name: Upload GCC tar.xz
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ env.release_version }}.tar.xz
          path: ~/gcc-${{ env.release_version }}/gcc-${{ env.release_version }}.tar.xz
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
