2012-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-parser.c (c_parser_declaration_or_fndef): Saved function arguments
	for a declaration marked as elemental function.
	(c_parser_attributes): If vector attribute is used, then we call
	a function to parse elemental function data.
	(c_parser_elem_fn_processor_clause): Fixed couple spelling mistakes.
	(c_parser_elem_fn_expr_list): Consumed a token as needed.  Also fixed
	a couple spelling mistakes.
	* c-array-notation.c (find_rank): Fixed a bug of looking for not
	ignored builtin function.
	(fix_builtin_array_notation_fn): Similar to above, fixed a bug of
	looking for true not false.
	* expr.c (expand_expr_real_1): Enclosed a gcc_assert so that is is only
	called when cilk is disabled.
	* final.c (rest_of_handle_final): Moved outputing metadata after the
	assemble_end_function.
	* gimplify.c (gimplify_function_tree): Called function to create elem.
	function when appropriate vector attribute is set.
	* ipa.c (cgraph_remove_unreachable_nodes): Make elem. functions always
	needed.
	* passes.c (init_optimization_passes): Removed the elem function pass.
	* tree-data-ref.c (find_data_references_in_stmt): Ignored data refs.
	for elemental function params.
	* tree-inline.c (elem_fn_add_local_variables): New function.
	(elem_fn_copy_arguments_for_versioning): Likewise.
	(initialize_elem_fn_cfun): Likewise.
	(tree_elem_fn_versioning): Likewise.
	* tree-vect-stmts.c (vect_get_vec_def_for_operand): Check if parm_type
	is linear or uniform, if so set them as constant.  If uniform call
	build_vector_from_val or linear call the appropriate linear equivalent.
	(vectorizble_function): Insert appropriate elemental function in loop
	if the attribute is set.
	(vectorizable_call): Check fi the parm type is linear or uniform.  Also
	save function call if they got changed during the elem. function
	insertion.
	* tree.c (build_elem_fn_linear_vector_from_val): New function.

2012-03-20  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* elem-function.c (extract_elem_fn_values): Initialized proc_type field
	to NULL.

2012-03-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* elem-function.c (find_processor_code): Returned default value when
	no value is given.
	(find_vlength_code): Likewise.

2012-03-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notation.c (expand_array_notation_exprs): New function.
	(fix_array_notation_call_expr): Likewise.
	* c-parser.c (c_parser_compound_statement): Added a check for array
	notation exprs.
	(c_parser_expr_no_commas): Removed call to fix_array_notation_expr.

2012-03-16  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk-spawn.c (cilk_valid_spawn): Unwrapped the call_expr from expr
	and cleanup point statements.
	(gimplify_cilk_spawn): Likewise.
	* function.c (allocate_struct_function): Initialized calls_spawns
	correctly.
	* tree.h: Removed cilk_hyper_flag and replaced with cilk_has_spawn.
	Also added DECL_HAS_SPAWN_P and removed DECL_HYPER_LOOKUP_P.

2012-03-12  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-typeck.c (convert_arguments): Added array notation check for
	funtion values.
	* c-array-notation.c (extract_array_notation_exprs): Handled TREE_LIST.

2012-03-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* attribs.c (decl_attributes): Concatinated existing attributes with
	vector attributes.
	* c-decl.c (bind): Added a check if scope is not null.
	* elem-function.c (rename_elm_fn): New function.
	(is_elem_fn): Likewise.
	(find_processor_code): Likewise.
	(find_vlength_code): Likewise.
	(create_processor_attribute): Likewise.
	(create_optimize_attribute): Likewise.
	(find_suffix): Likewise.
	(create_elem_fn_nodes): Likewise.
	(extract_elem_fn_values): Likewise.
	(create_elem_vec_fn): Likewise.
	* passes.c (init_optimization_passes): Added elemental function pass.

2012-03-09  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* attribs.c (decl_attributes): Added a check for elemental function
	attribute.
	(is_elem_fn_attribute_p): New function.
	* c-parser.c (c_parser_attributes): Added a check for vector attribute.
	(c_parser_elem_fn_processor_clause): New function.
	(c_parser_elem_fn_uniform_clause): Likewise.
	(c_parser_elem_fn_linear_clause): Likewise.
	(c_parser_elem_fn_vlength_clause): Likewise.
	(c_parser_elem_fn_expr_list): Likewise.

2012-02-15  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (cilk_fix_stack_reg): New function.
	(expand_buitin_cilk_metadata): Added a check for memory type rtx and do
	a call to the cilk_fix_reg_stack function.

2012-02-14  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notation.c (contains_array_notation_exprs): Added a check
	for NULL expr.

2012-02-13  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notation.c (fix_builtin_array_notation_fn): Added a
	REDUCE_ANY_NONZEROS, REDUCE_ALL_NONZEROS and REDUCE_CUSTOM case.
	(is_builtin_array_notation_fn): Replaced all occurances of "zeros" in
	string with "zero."  Also, added a case for REDUCE_ALL_ZEROS and
	REDUCE_ALL_NONZEROS and REDUCE_CUSTOM.
	* array-notation-common.c (array_notation_init_builtins): Likewise.
	(is_sec_implicit_index_fn): Added a check for FUNCTION_DECL.
	* tree.h: Added REDUCE_ANY_NONZEROS and REDUCE_ALL_NONZEROS into enum.
	* c-typeck.c (convert_arguments): Added a check for array notation in
	the function decl.

2012-01-31  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notation.c (build_array_notation_expr): Added another
	dimension to lhs variables to handle gather scatter of array notations.

2012-01-26  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notation.c (fix_builtin_array_notation_fn): Initialized the
	maximum/minimum value for max/min index builtin function.

2012-01-26  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* array-notation-common.c (array_notation_init_builtins): Added the
	internal array notation function "__sec_reduce_implicit_index."
	(is_sec_implicit_index_fn): New function.
	(extract_sec_implicit_index_arg): Likewise.
	* c-array-notation.c (extract_array_notation_exprs): Added a check to
	see if we encountered sec_implicit_index function.
	(replace_array_notations): Likewise.
	(build_array_notation_expr): Likewise.

2012-01-25  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notation.c (replace_array_notations): Added a new bool as
	parameter and added support for it.
	(find_rank): Likewise.
	(extract_array_notation_exprs): Likewise.
	(replace_array_notations): Likewise.
	(max): New function.
	(fix_builtin_array_notation_fn): Likewise.
	(is_builtin_array_notation_fn): Likewise.
	(contains_array_notation_expr): Likewise.
	(build_array_notation_expr): Added support for builtin function.
	Changed all for-loops that have comparison with lhs_rank, with
	max (lhs_rank and rhs_rank).  Also added a check if array_expr_lhs is
	NULL, then we set that equal to lhs.
	* c-parser.c (c_parser_expr_no_commas): Added support for array
	notations inside function calls (i.e. function that takes array notation
	as input and returns a scalar value).
	* c-typeck.c (convert_arguments): If array notation is present inside
	a function call, then we skip it for now since we will fix it up in a
	later step.

2012-01-20  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* Makefile.in: Added array-notation-common.c file for compilation.
	* array-notation-common.c (mark_cold): New function.
	(array_notation_init_builtins): Likewise.
	* tree.h: Added a new enum list called "array_notation_reduce_type."
	
2012-01-16  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (cilk_remove_annotated_functions): Added a int cast for
	VEC_length in for-loop condition.

2011-12-25  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notations.c (find_rank): Added a check for CALL_EXPR and
	AGGR_INIT_EXPR.
	(extract_array_notation_exprs): Likewise.
	(replace_array_notations): Likewise.
	(build_array_notation_expr): Changed variable from ii to jj.
	(fix_array_notation_expr): Moved default_function_array_read_conversion
	into if and else-if to handle function call case.
	* c-parser.c (c_parser_expr_no_commas): Added a check for CALL_EXPR.

2011-12-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notations.c (fix_array_notation_expr): New function.
	(fix_conditional_array_notations_1): Fixed a bug, by changing greater
	than to less-than.
	* c-parser.c (c_parser_unary_expression): Added support to handle
	array notations in unary operations.
	(c_parser_postfix_expression_after_primary): Likewise.

2011-12-23  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-array-notations.c (fix_conditional_array_notations): New function.
	(fix_conditional_array_notations_1): Likewise.
	(extract_array_notation_exprs): Added a check for STATEMENT_LIST.
	(replace_array_notations): Likewise.
	* c-parser.c (c_parser_if_statement): Added a call to the function
	fix_conditional_array_notations.  Also stored the compound statement
	to a variable to be passed  into fix_conditional_array_notations.

2011-12-22  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-typeck.c (find_rank): Moved function to c-array-notations.c
	(build_array_notation_expr): Likewise.  Also added support for a
	polynomial right-hand-size expression.
	(replace_array_notations): New function.
	(extract_array_notation_exprs): New function.

2011-12-16  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-typeck.c (find_rank): Modified to find rank of array notation
	inside expressions such as PLUS_EXPR.
	(build_array_notation_expr): Added support for N-Diamension array
	notation.

2011-12-09  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-typeck.c (build_array_notation_expr): New function.
	* c-parser.c (c_parser_array_notation): Likewise.
	(c_parser_array_notation): Likewise.
	(c_parser_expr_no_commas): Added if statement to handle ARRAY_NOTATION.
	(c_parser_postfix_expression_after_primary): Added a check to see
	if ARRAY NOTATION was used, and if so then added appropriate code to
	handle it.
	* gimplify.c (gimplify_expr): Added a case for ARRAY_NOTATION_REF.
	* tree.def (ARRAY_NOTATION_REF): New tree-type for array_notation.
	* tree.h (ARRAY_NOTATION_CHECK): New define for ARRAY_NOTATION TREE
	(ARRAY_NOTATION_ARRAY): Likewise.
	(ARRAY_NOTATION_START): Likewise.
	(ARRAY_NOTATION_END): Likewise.
	(ARRAY_NOTATION_STRIDE): Likewise.
	(ARRAY_NOTATION_TYPE): Likewise.
	* tree-vectorizer.c (vectorize_loops): Added the function call
	optimize_loop_nest_for_speed_p () into the if-loop.

2011-12-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (create_metadata_label): Make notes instead of CODE_LABEL.
	(delete_zca_list): New function.
	(cilk_output_metadata): Called delete_zca_list().
	* final.c (rest_of_handle_final): Added a call for
	cilk_output_metadata.
	* toplev.c (compile_file): Removed call for cilk_output_metadata.

2011-12-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* builtin.c (expand_builtin): Added support for NOTIFY_INTRINSIC and
	NOTIFY_ZC_INTRINSIC.
	* builtins.def: Likewise.
	* cilk.h: Likewise.
	* cilk.c (cilk_annotated_function_p): Likewise.
	(cilk_init_builtins): Likewise.  Also, removed underscores
	from cilk_spawn_prepare and cilk_spawn_or_continue function declaration.
	(zca_stack): Changed a stack-based implementation to a linked-list
	based implementation.
	(insert_into_zca_list): Likewise.
	(find_zca_data): Likewise.
	(get_zca_entry): Likewise.
	(get_zca_string_table_size): Likewise.
	(output_zca_table): Likewise.
	(output_expr_table): Likewise.
	(cilk_remove_annotated_functions): Likewise.
	* dwarf2out.c (dwarf2out_var_location): Make early return if cilk is
	enabled.
	* function.h (struct function): Added calls_notify_intrinsic field.
	* sched-rgn.c (schedule_insns): Check if cilk is enabled along with
	whether the notify_intrinsic is used in function.

2011-12-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (cilk_init_builtins): Removed prefixing undescores from
	cilk_spawn_prepare and cilk_spawn_or_continue.
	(get_zca_table_size): Added 1 to length of string.
	(output_zca_section): Likewise.
	(cilk_output_metadata): Added a '0' to indicate end of string.  Also
	removed 'w' from the section type.  Finally, changed the entry count
	size from 4 to 2.
	(expand_builtin_cilk_metadata): Flipped the bytes of dwarf_expr in two
	places.
	(output_string_table): Removed unnecessary curly braces.
	(cilk_remove_annotated_functions): Likewise.
	* dwarf2out.c (dwarf2out_var_location): Make early return if cilk is
	enabled.

2011-11-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* opts.c: Removed the CILKPLUS_IMPLEMENTED macro and the #ifdef and
	#ifndefs that uses this macro.

2011-11-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk-spawn.c (wrapper_parm_cb): Changed a const tree cast
	to (tree *).
	(for_local_cb): Likewise.
	(wrapper_local_cb): Likewise.

2011-10-22  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (install_builtin): Changed implicit_built_in_decls[] to
	set_builtin_decl ().
	(cilk_call_setjmp): Replaced implicit_built_in_decls[] to
	builtin_decl_implicit ().

2011-10-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* builtins.def: Removed duplicate disable_instrumentation call.
	* cilk-spawn.c (cg_hacks): Set the "is_cilk_helper_function" flag.
	* cilk.c: Added new vector called zca_stack.
	(cilk_init_builtins): Removed underscores from zca functions.
	(create_metadata_label): New function.
	(get_zca_entry_count): Likewise.
	(get_zca_string_table_size): Likewise.
	(get_zca_exprs_table_size): Likewise.
	(output_zca_table): Likewise.
	(output_string_table): Likewise.
	(output_expr_table): Likewise.
	(cilk_output_metadata): Likewise.
	(expand_builtin_cilk_metadata): Likewise.
	(cilk_annotated_function_p): Likewise.
	(cilk_remove_annotated_function): Likewise.
	* cilk.h (ZCA_MAJOR_VER_NUMBER): New define.
	(ZCA_MINOR_VER_NUMBER): Likewise.
	(struct zca_data_t): Added new data structure.
	(expand_builtin_cilk_metadata): New function declaration.
	(cilk_output_metadata): Likewise.
	(cilk_remove_annotated_functions): Likewise.
	(cilk_annotated_function_p): Likewise.
	* dwarf2out.c (loc_descriptor): Made this function universal, that is,
	non-static.
	* dwarf2out.h: Added a prototype for loc_descriptor().
	* final.c (final): Added a call to cilk_remove_annotated_functions().
	* function.h (struct function): Added is_cilk_helper_function variable.
	* sched-rgn.c (schedule_insns): Added a check to see if we are inside
	cilk_helper.
	* toplev.c (compile_file): Added a call to cilk_output_metadata().

2011-10-17  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* builtin.c (expand_builtin): Added case statements for ZCA
	annotation functions support.
	* cilk.c (get_zca_exprs_table_size): New function for ZCA support.
	(output_zca_table): Likewise.
	(output_string_table): Likewise.
	(output_expr_table): Likewise.
	(cilk_output_metadata): Likewise.
	* cilk.h: Added function declarations for the newly added function in
	cilk.c.  Also added zca_data structure and zca_data stack.
	* toplev.c (compile_file): Added a call to cilk_output_metadata.

2011-10-06  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* c-decl.c (c_make_cilk_frame): Added cilk_enter_begin and
	cilk_enter_end function calls into spawn expansion.
	* cilk-spawn.c (install_body_with_frame_cleanup): Added
	cilk_enter_help_begin and cilk_enter_end function calls into spawn
	expansion.
	(gimplify_cilk_spawn): Inserted cilk_spawn_prepare and
	cilk_spawn_or_continue function calls into spawn expansion.
	* cilk.c (build_cilk_function_exit): Added cilk_leave_begin and
	cilk_leave_end function calls into spawn expansion.
	(build_cilk_sync): Added sync_begin and sync_end function calls into
	sync expansion.
	* gimplify.c (gimplify_call_expr): Added detach_begin and detach_end
	before calling cilkrts_detach.

2011-10-04  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (cilk_init_builtins): Added Cilkscreen builtin function
	declarations.
	* builtins.def: Added Cilkscreen builtin functions expand tags.
	* cilk.h: Added Cilkscreen builtin functions in the cilk_trees chain.

2011-09-20  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* ipa-inline.c(can_inline_edge_p): Added a check for function
	that spawns.
	* ipa-inline-analysis.c (initialize_inline_failed): Likewise.

2011-09-09  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* tree.c (walk_tree_1): Handled the "cilk_for" case.
	* tree.h (CILK_FOR_VAR): Use 5 instead of 4 as TREE_OPERAND
	argument.

2011-09-09  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* pragma_simd.c: Added the standard GCC header.

2011-09-08  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* gimplify.c (gimplify_call_expr): Removed if (SPAWN_CALL_P (*expr))
	statement.

2011-09-06  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cppbuiltin.c (define_builtin_macros_for_compliation_flags): Added
	the __cilk keyword and set it to 200.

2011-08-08 Balaji V. Iyer    <balaji.v.iyer@intel.com>

	* c-parser.c (c_parse_init): Added if statement to check if
	flag_enable_cilk is turned off. If so, then or D_CILK mask with mask.
	(c_parser_cilk_for_statement): Added new function
	(c_parser_cilk_grainsize): Likewise.
	(c_parser_simd_linear): Likewise.
	(c_parser_simd_private): Likewise.
	(c_parser_simd_assert):  Likewise.
	(c_parser_simd_vectorlength): Likewise.
	(c_parser_simd_reduction): Likewise.
	(c_parser_statement_after_labels): Added new case labels to handle
	RID_CILK_FOR and RID_CILK_SYNC.
	* c-typeck.c (c_finish_bc_stmt): Added "case 2" to check to see if
	there are break statements inside a cilk_for loop.
	(c_finish_cilk_loop): Added new function.
	(c_build_sync): Likewise.
	(c_calls_spawns): Likewise.
	* cilk.c: New file.
	* cilk.h: Likewise.
	* cilk-spawn.c: Likewise.
	* function.h (struct GTY(()) function): Added "cilk_frame_decl" and
	"is_cilk_function" elements into this structure.
	* gimplify.c (gimplify_call_expr): Added code to check if (is_detach)
	is set.  If so, then output the appropriate code for detach expression.
	Also, output appropriate code for pop_frame operation.
	(gimplify_expr): Check if a valid found is encountered.  If found,
	then do "cilk_gimplify_spawn" on the expression.
	(gimplify_expr): Added case statements for CILK_FOR_STMT and
	SYNC_STMT.
	* Make-lang.in: Added the newly added files into the compiliation list.
	* Makefile.in: Added cilk files to compile with the gcc files.
	* pragma_simd.c: New file.
	* passes.c(init_optimization_passes): Added NEXT_PASS(pass_expand_cilk)
	* tree-pretty-print.c (dump_generic_node): Added a new case statement
	SYNC_STMT, CILK_FOR_STMT, to print a cilk_for and sync statement.
	* tree.h (struct GTY(()) tree base): Added "is_cilk_spawn" element into
	structure. Also added "pragma_simd_index" element into this structure.
	(SPAWN_CALL_P, SPAWN_DETACH_POINT, DECL_DETACHES_P, DECL_SET_KNOT):
	New defines.
	(CILK_KNOT_NONE, CILK_KNOT_SPAWN, CILK_KNOT_SYNC, CILK_KNOT_FLUSH):
	Likewise.
	(struct GTY(()) tree_function_decl): Added "cilk_knot_type" and
	"cilk_hyper_flag" into this structure.
	(FOR_STMT_CHECK2): Added new define to check if it is for or cilk_for.
	(FOR_INIT_STMT, FOR_COND, FOR_EXPR, FOR_BODY): New defines.
	(CILK_FOR_VAR, CILK_FOR_INIT, CILK_FOR_GRAIN): Likewise.
	(INVALID_PRAGMA_SIMD_SLOT): Likewise.
	(enum pragma_simd_kind) : Newly added enum to hold different pragma
	simd clauses.
	(struct reduction values): New structure to hold #pragma simd reduction
	information.
	(struct pragma_simd_values): Structure to hold pragma simd clause
	values.
	(PRAGMA_SIMD_INDEX): New define.
	(LABEL_EXPR_PRAGMA_SIMD_INDEX): Likewise.
	(struct GTY(()) tree_label_decl): Added new variable
	"pragma_simd_index"
	* tree-inline.c (struct copy_body_data): Added remap_var_for_cilk
	variable.
	* tree-vect-loop.c (vect_determine_vectorization_factor): Added if
	statements in multiple locations to check if flag enable cilk is
	enabled and if pragma simd assert is requested. If so, then print
	appropriate error message.
