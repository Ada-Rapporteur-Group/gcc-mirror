2009-03-06  Richard Guenther  <rguenther@suse.de>

	* c-typeck.c (build_unary_op): Treat flag_strict_overflow the
	same as flag_wrapv.
	(build_binary_op): Likewise.

	cp/
	* typeck.c (cp_build_binary_op): Deal with *NV_EXPR.  Build
	*NV_EXPR variants for signed arithmetic with undefined overflow.
	(cp_build_unary_op): Likewise.
	* semantics.c (handle_omp_for_class_iterator): Deal with *NV_EXPR.

2009-03-06  Richard Guenther  <rguenther@suse.de>

	* fold-const.c (negate_expr_p): Only do not negate integer
	constants if overflows on the type trap and the negation
	might overflow.  Remove superfluous TYPE_OVERFLOW_WRAPS checks.
	Do not negate divisions on integral types.
	(fold_negate_expr): Do not negate divisions on integral types.
	(build_range_check): Remove superfluous TYPE_OVERFLOW_WRAPS checks.
	(extract_muldiv_1): Likewise.
	(fold_unary): Likewise for (T1)(X * Y) to (T1)X * (T1)Y folding.
	Adjust folding to also apply to MULTNV_EXPR if NV is dropped
	on the result.

2009-03-06  Richard Guenther  <rguenther@suse.de>

	* fold-const.c (fold_binary): Enable pointer re-association
	for POINTER_PLUSNV_EXPR.
	* gimplify.c (gimplify_expr): Handle POINTER_PLUSNV_EXPR.
	(gimplify_omp_for): Handle *NV_EXPR.
	* convert.c (convert_to_integer): Handle PLUSNV_EXPR and
	MINUSNV_EXPR in narrowing properly.  Remove use of
	TYPE_OVERFLOW_WRAPS.
	* omp-low.c (extract_omp_for_data): Handle *NV_EXPR.

2009-03-05  Richard Guenther  <rguenther@suse.de>

	* c-common.c (pointer_int_sum): Use *NV_EXPR codes for
	pointer arithmetic.
	* c-typeck.c (build_unary_op): Use NEGATENV_EXPR if
	signed arithmetic has undefined overflow.
	(build_binary_op): Handle *NV_EXPR for recursive invocations.
	If signed arithmetic has undefined overflow use
	PLUSNV_EXPR, MINUSNV_EXPR and MULTNV_EXPR.
	* c-omp.c (c_finish_omp_for): Deal with *NV_EXPR for increments.

2009-03-05  Richard Guenther  <rguenther@suse.de>

	* expr.c (expand_expr_real_1): Handle POINTER_PLUSNV_EXPR,
	PLUSNV_EXPR, MINUSNV_EXPR, MULTNV_EXPR and NEGATENV_EXPR.
	* flags.h (TYPE_OVERFLOW_WRAPS): Define to always true.
	(TYPE_OVERFLOW_UNDEFINED): Define to always false.
	(POINTER_TYPE_OVERFLOW_UNDEFINED): Define to always false.
	* optabs.c (optab_for_tree_code): Handle *NV_EXPR.
	* tree-cfg.c (verify_gimple_assign_unary): Likewise.
	(verify_gimple_assign_binary): Likewise.
	* tree-inline.c (estimate_operator_cost): Likewise.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	(op_code_prio): Likewise.
	(op_symbol_code): Likewise.
	* tree-ssa-structalias.c (find_func_aliases): Handle
	POINTER_PLUSNV_EXPR.
	* tree.c (build2_stat): Adjust checks.
	(associative_tree_code): Add PLUSNV_EXPR and MULTNV_EXPR.
	(commutative_tree_code): Add PLUSNV_EXPR and MULTNV_EXPR.
	(undefined_overflow_used_p_1): New function.
	* tree.def (PLUSNV_EXPR, MINUSNV_EXPR, MULTNV_EXPR,
	POINTER_PLUSNV_EXPR, NEGATENV_EXPR): New tree codes for
	operations that are known to not overflow.
	* tree.h (NEGATE_EXPR_CODE_P, PLUS_EXPR_CODE_P,
	POINTER_PLUS_EXPR_CODE_P, MINUS_EXPR_CODE_P, MULT_EXPR_CODE_P): New.
	(NEGATE_EXPR_P, PLUS_EXPR_P, POINTER_PLUS_EXPR_P, MINUS_EXPR_P,
	MULT_EXPR_P): Likewise.
	(strip_nv): New inline function.
	(undefined_overflow_used_p_1): Declare.
	(undefined_overflow_used_p): New inline function.
	* varasm.c (narrowing_initializer_constant_valid_p): Handle
	MINUSNV_EXPR.
	(initializer_constant_valid_p): Handle *NV_EXPR.
	* omp-low.c (omp_reduction_init): Likewise.
	* gimple-pretty-print.c (dump_unary_rhs): Handle NEGATENV_EXPR.
	* fold-const.c (fold_negate_expr): Likewise.
	(int_const_binop): Handle *NV_EXPR.
	(fold_unary): Handle NEGATENV_EXPR.
	(tree_binary_nonzero_warnv_p): The type argument is unused.
	(fold_binary): Handle simple cases for POINTER_PLUSNV_EXPR,
	PLUSNV_EXPR, MINUSNV_EXPR and MULTNV_EXPR.

