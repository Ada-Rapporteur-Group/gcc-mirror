2010-09-06  Alan Modra  <amodra@gmail.com>

	* config/rs6000/rs6000.c (toc_relative_ok): New function.
	(offsettable_ok_by_alignment): Don't segfault on NULL DECL_SIZE_UNIT.
	(rs6000_emit_move): Use toc_relative_ok.

	Backport from mainline
	2010-06-18  Alan Modra  <amodra@gmail.com>
	* config/rs6000/linux64.h (SET_CMODEL): Don't expand to empty.

	2010-06-15  Alan Modra  <amodra@gmail.com>
	* doc/invoke.texi: Add mcmodel to powerpc options.
	* configure.ac: Add HAVE_LD_LARGE_TOC test.
	* configure: Regenerate.
	* config.in: Regenerate.
	* config/rs6000/linux64.opt (mcmodel): New.
	* config/rs6000/linux64.h (TARGET_USES_LINUX64_OPT): Define.
	(TARGET_CMODEL, SET_CMODEL): Define.
	(SUBSUBTARGET_OVERRIDE_OPTIONS): Check user -mcmodel choice,
	select CMODEL_MEDIUM default.
	* config/rs6000/rs6000.h (enum rs6000_cmodel): New.
	(TARGET_CMODEL): Define default.
	* config/rs6000/rs6000.c (cmodel): New variable.
	(rs6000_explicit_options): Add cmodel field.
	(rs6000_handle_option): Handle -mcmodel.
	(create_TOC_reference): Add largetoc_reg param.  Generate high,
	lo_sum rtl for CMODEL_MEDIUM and CMODEL_LARGE.  Update all callers.
	(rs6000_delegitimize_address): Recognise new toc reference rtl
	and minimal-toc rtl.
	(rs6000_legitimize_reload_address): Handle new toc references.
	(print_operand_address): Handle legitimate_constant_pool_address_p
	match before lo_sum.
	(rs6000_eliminate_indexed_memrefs): Tidy.
	(rs6000_emit_move): Tweak threshold for inlining constants.
	Keep rs6000_emit_allocate_stack large stack frame offsets
	loaded into r0 inline.
	(rs6000_generate_compare <cmptf_internal2>): One more clobber.
	(tocrel_base, tocrel_offset): New variables.
	(toc_relative_expr_p): Set them here.
	(print_operand_address): Skip over any offset on constant pool
	address.
	(rs6000_output_addr_const_extra): Print tocrel_offset before @toc.
	(rs6000_mode_dependent_address <LO_SUM>): False for new toc refs.
	(offsettable_ok_by_alignment): New function.
	(rs6000_emit_move): Address suitably aligned local symbol_refs
	relative to the toc pointer for -mcmodel=medium.
	(legitimate_constant_pool_address_p): Make param const_rtx.  Add
	strict param.  Allow lo_sum version of addressing.  Verify reg
	used for -mminimal-toc and -mcmodel != small.  Update all callers.
	* config/rs6000/constraints.md: Update for above change.
	* config/rs6000/predicates.md: Likewise.
	* config/rs6000/rs6000.md (tls_gd_aix): Generate -mcmodel=medium/large
	code.
	(tls_gd): Split for -mcmodel=medium/large.
	(tls_gd_high, tls_gd_low): New.
	(tls_ld_aix, tls_ld, tls_ld_high, tls_ld_low): Similarly.
	(tls_got_dtprel, tls_got_dtprel_high, tls_got_dtprel_low): Similarly.
	(tls_got_tprel, tls_got_tprel_high, tls_got_tprel_low): Similarly.
	(largetoc_high, largetoc_low): New.
	(cmptf_internal2): Add clobber.
	* config/rs6000/rs6000-protos.h: Update.

2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.opt (-mfriz): New switch to control whether
	to convert (double)(long) into a single FRIZ instruction or not
	when -ffast-math is used.

	* config/rs6000/vsx.md (VSX_DF): New iterator for DF/V2DF modes.
	(vsx_float_fix_<mode>2): Optimize (double)(long) into X{S,V}RDPIZ
	or FRIZ instruction if -ffast-math.
	* config/rs6000/rs6000.md (friz): Ditto.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mfriz.

2010-08-31  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline:
	2010-08-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000-protos.h (rs6000_address_for_fpconvert):
	New declaration.
	(rs6000_allocate_stack_temp): Ditto.
	(rs6000_expand_convert_si_to_sfdf): Ditto.

	* config/rs6000/rs6000.c (rs6000_override_options): Adjust long
	line.  Update the options set if power6 or power7 server/embedded
	type options are used.  If we give a warning for no vsx under
	-mcpu=power7 -mno-altivec, mark -mvsx as an explicit option.
	(rs6000_allocate_stack_temp): New function to allocate a stack
	tempoary and adjust the address so it meets either REG+OFFSET or
	REG+REG addressing requirements.
	(rs6000_address_for_fpconvert): Adjust REG+OFFSET addresses so
	that they can be used with the LFIWAX/LFIWZX instrucitons.
	(rs6000_expand_convert_si_to_sfdf): New helper funciton for
	converting signed/unsigned SImode to either SFmode/DFmode.

	* config/rs6000/rs6000.h (TARGET_FCFID): New macros to determine
	whether certain instructions can be generated.
	(TARGET_FCTIDZ): Ditto.
	(TARGET_STFIWX): Ditto.
	(TARGET_LFIWAX): Ditto.
	(TARGET_LFIWZX): Ditto.
	(TARGET_FCFIDS): Ditto.
	(TARGET_FCFIDU): Ditto.
	(TARGET_FCFIDUS): Ditto.
	(TARGET_FCTIDUZ): Ditto.
	(TARGET_FCTIWUZ): Ditto.

	* config/rs6000/rs6000.md (UNSPEC_FCTIW): New unspec constants.
	(UNSPEC_FCTID): Ditto.
	(UNSPEC_LFIWAX): Ditto.
	(UNSPEC_LFIWZX): Ditto.
	(UNSPEC_FCTIWUZ): Ditto.
	(rreg): Use correct constraints.
	(SI_CONVERT_FP): New mode attribute for floating point conversion
	tests.
	(E500_CONVERT): Ditto.
	(lfiwax): New insns for converting from integer to floating point
	utilizing newer instructions.  Attempt to optimize conversions
	that come from memory so that we don't load the value into a GPR,
	spill it to the stack and reload it into a FPR.
	(floatsi<mode>2_lfiwax): Ditto.
	(floatsi<mode>2_lfiwax_mem): Ditto.
	(floatsi<mode>2_lfiwax_mem2): Ditto.
	(lfiwzx): Ditto.
	(floatunssi<mode>2_lfiwzx): Ditto.
	(floatunssi<mode>2_lfiwzx_mem): Ditto.
	(floatunssi<mode>2_lfiwzx_mem2): Ditto.
	(floatdidf2_mem): Ditto.
	(floatunsdidf2_fcfidu): Ditto.
	(floatunsdidf2_mem): Ditto.
	(floatunsdisf2): Ditto.
	(floatunsdisf2_fcfidus): Ditto.
	(floatunsdisf2_mem): Ditto.
	(floatsidf2): Add support for LFIWAX/LFIWZX/FCFIDS/FCFIDU/FCFIDUS.
	Use FCFID on 32-bit hosts that support it.
	(floatsidf2_internal): Ditto.
	(floatunssisf2): Ditto.
	(floatunssidf2): Ditto.
	(floatunssidf2_internal): Ditto.
	(floatsisf2): Ditto.
	(floatdidf2): Ditto.
	(floatdidf2_fpr): Ditto.
	(floatunsdidf2): Ditto.
	(floatdisf2): Ditto.
	(floatdisf2_fcfids): Ditto.
	(floatdisf2_internal1): Ditto.
	(fixuns_truncsfsi2): Delete, merge into common pattern for both
	SF/DF.  Add power7 support.
	(fix_truncsfsi2): Ditto.
	(fixuns_truncdfsi2): Ditto.
	(fixuns_truncdfdi2): Ditto.
	(fix_truncdfsi2): Ditto.
	(fix_truncdfsi2_internal): Ditto.
	(fix_truncdfsi2_internal_gfxopt): Ditto.
	(fix_truncdfsi2_mfpgpr): Ditto.
	(fctiwz): Ditto.
	(btruncdf2): Ditto.
	(btruncdf2_fpr): Ditto.
	(btructsf2): Ditto.
	(ceildf2): Ditto.
	(ceildf2_fpr): Ditto.
	(ceilsf2): Ditto.
	(floordf2): Ditto.
	(floordf2_fpr): Ditto.
	(floorsf2): Ditto.
	(rounddf2): Ditto.
	(rounddf2_fpr): Ditto.
	(roundsf2): Ditto.
	(fix_trunc<mode>si2): Combine SF/DF conversion into one insn.
	(fix_trunc<mode>di2): Ditto.
	(fixuns_trunc<mode>si2): Ditto.
	(fixuns_trunc<mode>di2): Ditto.
	(fctiwz_<mode>): Ditto.
	(btrunc<mode>2): Ditto.
	(btrunc<mode>2_fpr): Ditto.
	(ceil<mode>2): Ditto.
	(ceil<mode>2_fpr): Ditto.
	(floor<mode>2): Ditto.
	(float<mode>2_fpr): Ditto.
	(round<mode>2): Ditto.
	(round<mode>2_fpr): Ditto.
	(fix_trunc<mode>si2_stfiwx): New insn for machines with STFIWX.
	(fixuns_trunc<mode>si2_stfiwx): Ditto.
	(fix_truncdfsi2_internal): Ditto.
	(fix_trunc<mode>si2_mem): Combiner pattern to eliminate storing
	converted value on stack, loaded into GPR, and then stored into
	the final destination.
	(fix_trunc<mode>di2_fctidz): New pattern for targets supporting
	FCTIDZ.
	(lrint<mode>di2): New insn, provide the lrint builtin functions.
	(ftruncdf2): Delete, unused.
	(fix_trunctfsi2_internal): Use gen_fctiwz_df, not gen_fctiwz.

	* config/rs6000/vsx.md (toplevel): Update copyright year.
	(VSr2): Use "ws" contraint for DFmode, not "!r#r".
	(VSr3): Ditto.

	Backport from mainline:
	2010-08-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.opt (-mveclibabi=mass): New option to
	enable the compiler to autovectorize mathmetical functions for
	power7 using the Mathematical Acceleration Subsystem library.

	* config/rs6000/rs6000.c (rs6000_veclib_handler): New variable to
	handle which vector math library we have.
	(rs6000_override_options): Add -mveclibabi=mass support.
	(rs6000_builtin_vectorized_libmass): New function to handle auto
	vectorizing math functions that are in the MASS library.
	(rs6000_builtin_vectorized_function): Call it.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Document
	-mveclibabi=mass.

2010-08-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 163570.
	* REVISION: Update subvesion id.

2010-08-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-07-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_rtx_costs): Update costs for
	popcount on power7 and parity on power6 systems.
	(rs6000_emit_popcount): Rename gen_popcntwsi2 to gen_popcntddi2.
	(rs6000_emit_parity): Add support for power6 prtyd/prtyw
	instructions.

	* config/rs6000/rs6000.md (UNSPEC_COPYSIGN): New unspec.
	(UNSPEC_PARITY): Ditto.
	(SFDF): New iterator for SF/DF.
	(rreg2): New mode attribute for floating register constraint.
	(TARGET_FLOAT): New mode attribute for whether single/double float
	is supported.
	(popcntd<mode>2): Combine popcntwsi2 and popcntddi2 into one
	pattern.
	(parity<mode>2_cmpb): New insn for parity on power6 and newer
	machines.
	(copysign<mode>3): Combine copysignsf3, copysigndf3 into one
	pattern.  Add support for fcpsgn instruction added in power6.
	(copysignsf3): Delete.
	(copysigndf3): Delete.
	(copysign<mode>3_fcpsgn): New insn to generate fcpsgn.  Use UNSPEC
	instead of if_then_else in RTL to avoid problems with -0.

	* config/rs6000/vsx.md (vsx_copysign<mode>3): Use UNSPEC instead
	of if_then_else to mirror scalar code.
	(vsx_copysignsf3): Delete, use copysign<mode>3_fcpsgn in
	rs6000.md.

	* config/rs6000/vector.md (vector_copysign<mode>3): Use UNSPEC
	instead of if_then_else.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-07-20  Nathan Froyd  <froydnj@codesourcery.com>

	* config/rs6000/rs6000.md (abs<mode>2_isel, nabs<mode>2_isel):
	Reverse sense of if_then_else condition.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/44877
	* config/rs6000/rs6000.c (rs6000_expand_builtin): Use
	POINTER_TYPE_P instead of checking only for POINTER_TYPE for the
	builtin mask for load/store builtins.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-06-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/44218
	* doc/invoke.texi (RS/6000 and PowerPC Options): Delete obsolete
	-mswdiv option.  Add -mrecip, -mrecip=<xxx>, -mrecip-precision options.

	* doc/extend.texi (powerpc builtins): Document vec_recip,
	vec_rsqrt, vec_rsqrte altivec/vsx builtins.

	* config/rs6000/rs60000-protos.h (rs6000_emit_swdiv): New function.
	(rs6000_emit_swrsqrt): Ditto.
	(rs6000_emit_swdivsf): Delete.
	(rs6000_emit_swdivdf): Ditto.
	(rs6000_emit_swrsqrtsf): Ditto.

	* config/rs6000/rs6000.c (rs6000_recip_bits): New global to
	describe the reciprocal estimate support for each type.
	(recip_options): Map -mrecip=<opt> into option bits.
	(gen_2arg_fn_t): New typedef for binary rtx gen function.
	(rs6000_debug_reg_global): If -mdebug=reg, print the state of the
	reciprocal estimate instructions.
	(rs6000_init_hard_regno_mode_ok): Key ws constraint off of the
	debug -mvsx-scalar-memory switch instead of -mvsx-scalar-double.
	Set up rs6000_recip_bits based on the -mrecip* options.  Print the
	cost information if -mdebug=cost or -mdebug=reg.
	(rs6000_override_options): Set -mrecip-precision for power6, and
	power7 machines.  If -mvsx or -mdfp, enable various options that
	came in previous instruction set ISAs, unless the option was
	explicitly disabled by the command line option.  Parse
	-mrecip=<opt> options.
	(rs6000_builtin_vectorized_function): Add support for vectorizing
	the reciprocal estimate builtins and expansions.
	(rs6000_handle_option): Add -mrecip, -mrecip=<opt> support.
	(bdesc_2arg): Add reciprocal estimate builtins.
	(bdesc_1arg): Add reciprocal square root estimate builtins.
	(rs6000_expand_builtin): Rewrite to use a switch statement,
	instead of multiple if/then/elses.  Add reciprocal estimate builtins.
	(rs6000_init_builtins): Create declarations for reciprocal
	estimate builtins.
	(rs6000_preferred_reload_class): Simplify VSX preferences, if scalar
	sized, prefer traditional floating point registers, if integer
	vector types, prefer altivec registers.  Don't actually look at
	the memory address any more.
	(rs6000_builtin_reciprocal): Add new builtin reciprocal estimate
	builtins.
	(rs6000_load_constant_and_splat): New helper function to load up
	the constant for reciprocal estimate instructions.
	(rs6000_emit_madd): New helper function for generating
	multiply/add type instructions, based on the current switches.
	(rs6000_emit_msub): Ditto.
	(rs6000_emit_mnsub): Ditto.
	(rs6000_emit_swdiv_high_precision): Replace rs6000_emit_swdivsf to
	replace a divide with a reciprocal estimate and fixup, adding
	support for machines with high precision and vectors.
	(rs6000_emit_swdiv_low_precision): Rewrite rs6000_emit_swdivdf for
	low precision machines.
	(rs6000_emit_swdiv): New common function to be called to replace a
	division with reciprocal estimate and fixup.
	(rs6000_emit_swrsqrt): Replace rs6000_emit_swrsqrtsf.  Add support
	for double and vector types.  Add support for high precision machines.

	* config/rs6000/rs6000.h (TARGET_FRES): New macro to say whether
	the reciprocal estimate instructions can be generated.
	(TARGET_FRE): Ditto.
	(TARGET_FRSQRTES): Ditto.
	(TARGET_FRSQRTE): Ditto.
	(RS6000_RECIP_*): New macros for reciprocal estimate support.

	* config/rs6000/vector.md (rsqrte<mode>2): New insn for reciprocal
	square root estimate on vectors.
	(re<mode>2): New insn for reciprocal division estimate on vectors.

	* config/rs6000/rs6000-buitlins.def (ALTIVEC_BUILTIN_VRSQRTFP):
	New builtin.
	(ALTIVEC_BUILTIN_VRECIPFP): Ditto.
	(ALTIVEC_BUITLIN_VEC_RE): Ditto.
	(ALTIVEC_BUILTIN_VEC_RSQRT): Ditto.
	(VSX_BUILTIN_RSQRT_V4SF): Ditto.
	(VSX_BUITLIN_RSQRT_V2DF): Ditto.
	(RS6000_BUILTIN_RSQRT): Ditto.
	(ALTIVEC_BUILTIN_VEC_RSQRTE): Denote that the builtin is a
	floating point builtin.

	* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define
	macros __RECIP__, __RECIPF__, __RSQRTE__, __RSQRTEF__,
	__RECIP_PRECISION__ based on the command line switches.
	(altivec_overloaded_builtins): Add reciprocal estimate builtins.

	* config/rs6000/rs6000.opt (-mrecip): Document add support for
	replacing division instructions with reciprocal estimate and fixup.
	(-mrecip=<opt>): New option.
	(-mrecip-precision): Ditto.

	* config/rs6000/vsx.md (UNSPEC_VSX_RSQRTE): Delete.
	(vsx_rsqrte<mode>2): Use UNSPEC_RSQRT not UNSPEC_VSX_RSQRTE.
	(vsx_copysignsf3): If -mvsx, use double precision cpsign on single
	precision scalar.

	* config/rs6000/altivec.md (UNSPEC_RSQRTEFP): Delete.
	(UNSPEC_VREFP): Ditto.
	(altivec_vnmsubfp*): Make altivec nmsub mirror the scalar and VSX
	conterparts with regard to support of -mno-fused-madd and -ffast-math.
	(altivec_vrsqrtefp): Use common UNSPEC to allow scalar/vector
	reciprocal estimate instructions to be generated.
	(altivec_vrefp): Ditto.

	* config/rs6000/rs6000.md (RECIPF): New iterator for reciprocal
	estimate support.
	(rreg): New mode attribute for reciprocal estimate support.
	(recip<mode>3): New insn for division using reciprocal estimate
	and fixup builtins.
	(divide define_split): New define_split to convert floating point
	division to use reciprocal estimate if the user used the
	appropriate options and the split is run when we can add new
	pseudo registers for the fixup.
	(rsqrt<mode>2): New insn for reciprocal square root support.
	(recipsf3): Move into recip<mode>3.
	(recipdf3): Ditto.
	(fres): Use TARGET_FRES.
	(rsqrtsf2): Move into rsqrt<mode>2.
	(rsqrtsf_internal1): Use TARGET_FRSQRTSES.
	(copysignsf3): Add support for VSX.
	(fred): Use TARGET_FRE.
	(fred_fpr): Ditto.
	(rsqrtdf_internal1): New function for frsqrte instruciton.

	* config/rs6000/altivec.h (vec_recipdiv): Define new vector builtin.
	(vec_rsqrt): Ditto.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone from gcc-4_5-branch, subversion id 163203.
	* REVISION: New file, mark marge point revision.
