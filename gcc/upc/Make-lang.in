# Top level -*- makefile -*- fragment for GNU UPC

#    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
#    2010, 2011
#    Free Software Foundation, Inc.
#    Contributed by Gary Funck <gary@intrepid.com>
#      and Nenad Vukicevic <nenad@intrepid.com>.
#    Based on original implementation
#      by Jesse M. Draper <jdraper@super.org>
#      and William W. Carlson <wwc@super.org>.
#    Derived from objc/Make-lang.in

# This file is part of GCC.

# GCC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# GCC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.install-normal, foo.install-common, foo.install-man,
# foo.uninstall,
# foo.mostlyclean, foo.clean, foo.distclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: upc)
# - the compiler proper (eg: cc1upc)
# - define the names for selecting the language in LANGUAGES.

UPC_EXE = cc1upc$(exeext) xgupc$(exeext) gupc$(exeext)

# Installation name.

GUPC_INSTALL_NAME := $(shell echo gupc|sed '$(program_transform_name)')
UPC_INSTALL_NAME := $(shell echo upc|sed '$(program_transform_name)')
GUPC_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gupc|sed '$(program_transform_name)')

# Define the names for selecting UPC in LANGUAGES.
UPC Upc upc: $(UPC_EXE)

# Tell GNU make to ignore these if they exist.
.PHONY: UPC Upc upc

# Use maximal warnings for this front end.
upc-warn = $(STRICT_WARN)

# UPC PTS representation-dependent support.
# (Set by the --with-upc-pts={struct,packed} configure switch.)
UPC_PTS_C = upc-pts-packed.c upc-pts-struct.c
UPC_PTS_OBJ = upc/upc-pts-packed.o upc/upc-pts-struct.o

# Language-specific object files for UPC.
UPC_OBJS = c-family/stub-objc.o upc/upc-act.o \
	   upc/upc-genericize.o upc/upc-lang.o \
	   upc/upc-gasp.o $(UPC_PTS_OBJ)

cc1upc-checksum.c : build/genchecksum$(build_exeext) checksum-options \
        $(UPC_OBJS) $(C_AND_OBJC_OBJS) $(BACKEND) $(LIBDEPS)
	build/genchecksum$(build_exeext) $(UPC_OBJS) $(C_AND_OBJC_OBJS) \
        $(BACKEND) $(LIBDEPS) checksum-options > cc1upc-checksum.c.tmp && \
	$(srcdir)/../move-if-change cc1upc-checksum.c.tmp cc1upc-checksum.c

cc1upc-checksum.o : cc1upc-checksum.c $(CONFIG_H) $(SYSTEM_H)

cc1upc$(exeext): $(UPC_OBJS) $(C_AND_OBJC_OBJS) cc1upc-checksum.o \
		 $(BACKEND) $(LIBDEPS)
	$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
		$(UPC_OBJS) $(C_AND_OBJC_OBJS) cc1upc-checksum.o \
		$(BACKEND) $(LIBS) $(BACKENDLIBS)

xgupc$(exeext): $(srcdir)/upc/gupc.c Makefile cc1upc$(exeext) $(LIBDEPS)
	thisdir=`pwd` ; \
	incdir=`cd $(srcdir)/../libgupc/include; pwd`; \
	libdir=`dirname $${thisdir}`/$(target); \
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	    $(DRIVER_DEFINES) \
	    "-DCOMPILER=\"xgcc\"" \
	    "-DCOMPILER_DIR=\"$${thisdir}/\"" \
	    "-DBIN_PATH=\"$${thisdir}\"" \
	    "-DLIB_PATH=\"$${libdir}\"" \
	    "-DINC_PATH=\"$${incdir}\"" \
	    -c $(srcdir)/upc/gupc.c -o xgupc-tmp.o
	$(CC) $(ALL_LINKERFLAGS) $(LDFLAGS) xgupc-tmp.o -o xgupc$(exeext) $(LIBS)
	rm -f xgupc-tmp.o

gupc$(exeext): $(srcdir)/upc/gupc.c Makefile cc1upc$(exeext) $(LIBDEPS)
	thisdir=`pwd` ; \
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	    $(DRIVER_DEFINES) \
	    "-DCOMPILER=\"$(GCC_INSTALL_NAME)\"" \
	    "-DBIN_PATH=\"$(bindir)\"" \
	    -c $(srcdir)/upc/gupc.c -o gupc-tmp.o
	$(CC) $(ALL_LINKERFLAGS) $(LDFLAGS) gupc-tmp.o -o gupc$(exeext) $(LIBS)
	rm -f gupc-tmp.o

#
# UPC language specific files.
#
upc/upc-lang.o : upc/upc-lang.c \
   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \
   $(C_TREE_H) upc/upc-tree.h toplev.h \
   $(C_PRETTY_PRINT_H) $(DIAGNOSTIC_H) \
   $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) \
   gtype-upc.h gt-upc-upc-act.h upc/upc-act.h upc/upc-pts.h

upc/upc-act.o : upc/upc-act.c \
   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \
   $(TM_P_H) $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h toplev.h \
   flags.h input.h function.h output.h debug.h langhooks.h \
   $(LANGHOOKS_DEF_H) $(HASHTAB_H) c-family/c-pragma.h \
   gtype-upc.h gt-upc-upc-act.h upc/upc-act.h upc/upc-pts.h \
   upc/upc-rts-names.h

upc/upc-genericize.o : upc/upc-genericize.c \
   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \
   $(TM_P_H) $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h \
   toplev.h flags.h input.h function.h output.h debug.h langhooks.h \
   $(LANGHOOKS_DEF_H) $(HASHTAB_H) c-family/c-pragma.h \
   upc/upc-genericize.h upc/upc-tree.h upc/upc-act.h upc/upc-pts.h \
   gtype-upc.h gt-upc-upc-genericize.h upc/upc-act.h upc/upc-pts.h \
   upc/upc-rts-names.h

upc/upc-pts-packed.o: upc/upc-pts-packed.c \
   $(CONFIG_H) $(SYSTEM_H) $(TARGET_H) $(TM_H) $(TM_P_H) \
   $(TREE_H) coretypes.h $(LANGHOOKS_DEF_H) langhooks.h \
   c-family/c-pragma.h $(C_TREE_H) debug.h \
   diagnostic.h $(EXPR_H) flags.h function.h input.h \
   output.h $(RTL_H) toplev.h \
   upc/upc-act.h upc/upc-pts.h upc/upc-rts-names.h

upc/upc-pts-struct.o: upc/upc-pts-struct.c \
   $(CONFIG_H) $(SYSTEM_H) $(TARGET_H) $(TM_H) $(TM_P_H) \
   $(TREE_H) coretypes.h $(LANGHOOKS_DEF_H) langhooks.h \
   c-family/c-pragma.h $(C_TREE_H) debug.h \
   diagnostic.h $(EXPR_H) flags.h function.h input.h \
   output.h $(RTL_H) toplev.h \
   upc/upc-act.h upc/upc-pts.h upc/upc-rts-names.h

upc/upc-gasp.o : upc/upc-gasp.c \
   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \
   $(TM_P_H) $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h \
   toplev.h flags.h input.h function.h output.h debug.h langhooks.h \
   $(LANGHOOKS_DEF_H) $(HASHTAB_H) c-family/c-pragma.h \
   upc/upc-gasp.h upc/upc-tree.h upc/upc-act.h upc/upc-pts.h \
   upc/upc-rts-names.h

#
# Documentation

UPC_TEXI_FILES = \
	upc/gupc.texi \
        $(gcc_docdir)/include/fdl.texi \
	$(gcc_docdir)/include/gpl_v3.texi \
	$(gcc_docdir)/include/gcc-common.texi \
	gcc-vers.texi

doc/gupc.info: upc/gupc.texi
	if test "x$(BUILD_INFO)" = xinfo; then \
	  rm -f doc/gupc.info*; \
	  $(MAKEINFO) $(MAKEINFOFLAGS) -I. -I $(gcc_docdir) \
		-I $(gcc_docdir)/include -o $@ $<; \
	else true; fi

doc/gupc.dvi: $(UPC_TEXI_FILES)
	$(TEXI2DVI) -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<

doc/gupc.pdf: $(UPC_TEXI_FILES)
	$(TEXI2PDF) -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<

$(build_htmldir)/upc/index.html: $(UPC_TEXI_FILES)
	$(mkinstalldirs) $(@D)
	rm -f $(@D)/*
	$(TEXI2HTML) -I $(gcc_docdir) -I $(gcc_docdir)/include \
		-I $(srcdir)/upc -o $(@D) $<

.INTERMEDIATE: gupc.pod

gupc.pod: upc/gupc.texi
	-$(TEXI2POD) -D gupc < $< > $@

#
# Build hooks:

upc.all.build:
upc.all.cross:
upc.start.encap:
upc.rest.encap:
upc.info: doc/gupc.info
upc.dvi: doc/gupc.dvi
upc.pdf: doc/gupc.pdf
upc.html: $(build_htmldir)/upc/index.html
upc.srcinfo:
	-cp -p $^ $(srcdir)/doc
upc.man: doc/gupc.1
upc.srcman: doc/gupc.1
	-cp -p $^ $(srcdir)/doc
upc.srcextra:
upc.install-pdf:
upc.install-plugin:

upc.tags: force
	cd $(srcdir)/upc; etags -o TAGS.sub *.y *.c *.h; \
	etags --include TAGS.sub --include ../TAGS.sub

lang_checks += check-upc

#
# Install hooks:
# cc1upc is installed elsewhere as part of $(COMPILERS).

upc.install-common: cc1upc$(exeext) gupc$(exeext) installdirs
	-rm -f $(DESTDIR)$(bindir)/$(GUPC_INSTALL_NAME)$(exeext)
	$(INSTALL_PROGRAM) -m 755 gupc$(exeext) $(DESTDIR)$(bindir)/$(GUPC_INSTALL_NAME)$(exeext)
	-rm -f $(DESTDIR)$(bindir)/$(GUPC_TARGET_INSTALL_NAME)$(exeext)
	cd $(DESTDIR)$(bindir) && \
	   $(LN) $(GUPC_INSTALL_NAME)$(exeext) $(GUPC_TARGET_INSTALL_NAME)$(exeext)
	-rm -f $(DESTDIR)$(bindir)/$(UPC_INSTALL_NAME)$(exeext)
	cd $(DESTDIR)$(bindir) && $(LN_S) $(GUPC_INSTALL_NAME)$(exeext) $(UPC_INSTALL_NAME)$(exeext)

upc.install-plugin:

upc.install-info: $(DESTDIR)$(infodir)/gupc.info

upc.install-pdf: doc/gupc.pdf
	@$(NORMAL_INSTALL)
	test -z "$(pdfdir)" || $(mkinstalldirs) "$(DESTDIR)$(pdfdir)/gcc"
	@for p in doc/gupc.pdf; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(pdf__strip_dir) \
	  echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(pdfdir)/gcc/$$f'"; \
	  $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(pdfdir)/gcc/$$f"; \
	done

upc.install-html: $(build_htmldir)/upc
	@$(NORMAL_INSTALL)
	test -z "$(htmldir)" || $(mkinstalldirs) "$(DESTDIR)$(htmldir)"
	@for p in $(build_htmldir)/upc; do \
	  if test -f "$$p" || test -d "$$p"; then d=""; else d="$(srcdir)/"; fi; \
	  f=$(html__strip_dir) \
	  if test -d "$$d$$p"; then \
	    echo " $(mkinstalldirs) '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(mkinstalldirs) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
	    echo " $(INSTALL_DATA) '$$d$$p'/* '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p"/* "$(DESTDIR)$(htmldir)/$$f"; \
	  else \
	    echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(htmldir)/$$f"; \
	  fi; \
	done

upc.install-man: $(DESTDIR)$(man1dir)/$(GUPC_INSTALL_NAME)$(man1ext)

$(DESTDIR)$(man1dir)/$(GUPC_INSTALL_NAME)$(man1ext): doc/gupc.1 installdirs
	-rm -f $@
	-$(INSTALL_DATA) $< $@
	-chmod a-x $@

upc.uninstall:
	rm -rf $(DESTDIR)$(bindir)/$(GUPC_INSTALL_NAME)$(exeext)
	rm -rf $(DESTDIR)$(bindir)/$(UPC_INSTALL_NAME)$(exeext)
	rm -rf $(DESTDIR)$(man1dir)/$(GUPC_INSTALL_NAME)$(man1ext)
	rm -rf $(DESTDIR)$(bindir)/$(GUPC_TARGET_INSTALL_NAME)$(exeext)
	rm -rf $(DESTDIR)$(infodir)/gupc.info*

#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
upc.mostlyclean:
	-rm -f tmp-upc-prs.y
	-rm -f upc/*$(objext) upc/xforward upc/fflags
	-rm -f upc/*$(coverageexts)
upc.clean: upc.mostlyclean
	-rm -rf upc-headers
upc.distclean:
	-rm -f upc/Makefile upc/Make-host upc/Make-target
	-rm -f upc/config.status upc/config.cache
upc.maintainer-clean:

#
# Stage hooks:

upc.stage1: stage1-start
	-mv upc/*$(objext) stage1/upc
upc.stage2: stage2-start
	-mv upc/*$(objext) stage2/upc
upc.stage3: stage3-start
	-mv upc/*$(objext) stage3/upc
upc.stage4: stage4-start
	-mv upc/*$(objext) stage4/upc
upc.stageprofile: stageprofile-start
	-mv upc/*$(objext) stageprofile/upc
upc.stagefeedback: stagefeedback-start
	-mv upc/*$(objext) stagefeedback/upc
