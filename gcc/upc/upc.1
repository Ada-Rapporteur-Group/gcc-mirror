.\"
.\" Set up \*(lq, \*(rq if -man hasn't already set it up.
.\"if @@\*(lq@ \{\
.\"	ds lq "
.\"	if t .ds lq ``
.\"	if !@@\(lq@ .ds lq "\(lq
.\"\}
.\"if @@\*(rq@ \{\
.\"	ds rq "
.\"	if t .ds rq ''
.\"	if !@@\(rq@ .ds rq "\(rq
.\"\}
.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.de Sp
.if n .sp
.if t .sp 0.4
..
.TH UPC 1
.SH NAME
upc \- UPC compiler for parallel computers.
.SH SYNOPSIS
.B upc
.RI "[ " option " | " filename " ].\|.\|."
.SH DESCRIPTION
UPC is an extension to the GNU C compiler from the Free
Software Foundation.  In addition to the options specified here, all of
the normal GCC options listed in the man pages for
.I gcc(1)
are available.
The UPC compiler is integrated with the GCC compiler.  UPC processes input files
through one or more of four stages: preprocessing, compilation,
assembly, and linking.
.TP
.PP
Suffixes of source file names indicate the language and kind of
processing to be done:
.Sp
.nf
.ta \w'\fB.cxx\fP  'u
\&\fB.upc\fP	UPC source; preprocess, compile, assemble
\&\fB.upci\fP	preprocessed UPC; compile, assemble
\&\fB.h\fP	Preprocessor file; not usually named on command line
\&\fB.c,.i,.s\fP	Are C, preprocessed C, and assembler source files, and are processed by the C compiler and assembler. The resulting object files can be linked with UPC source code.
.Sp
.fi
Files with other suffixes are passed to the linker.  Common cases include:
.Sp
.nf
\&\fB.o\fP	Object file
\&\fB.a\fP	Archive file
.br
.fi
.Sp
Linking is always the last stage unless you use one of the
.BR \-c ,
.BR \-S ,
or
.B \-E
options to avoid linking (or unless compilation errors stop the whole
process).  For the link stage, all
.B .o
files corresponding to source files,
.B \-l
libraries, unrecognized filenames (including named
.B .o
object files and
.B .a
archives)
are passed to the linker in command-line order.
.SH OPTIONS
Here is a summary of all the UPC-specific options.
.TP
.B Information Options
\-v
.TP
.B Language Options
\-fupc-threads\-n
.br
\-fupc-pthreads-model-tls
.br
\-fupc-inline-lib
.br
\-fupc-instrument
.br
\-fupc-instrument-functions
.br
\-x upc
.br
.TP
.TP
.B Debugging Options
\-g
.TP
.B Optimization Options
\-O1, -O2, -O3
.SH INFORMATION OPTIONS
.TP
.B \-v
Identifies the version of UPC currently in use, with a path name to a
specification file that is in the same directory as include directories
and other version-specific directories and files.  Can be invoked without
a source file name.  When invoked with files, gives include and library
directory paths in the order that they are searched.
.SH LANGUAGE OPTIONS
All source files ending in .upc or .upci will be compiled by the UPC compiler. The
.B -x upc
switch tells the compiler to process all of the following file
names as UPC source code, ignoring the default language typically
associated with filename extensions.
.TP
.B \-fupc-threads\-n
Compile for
.B n
threads.  The special symbol THREADS will be set to
.B n
and can be used both in
data declarations (as a constant for array dimensions) and in expressions.
On each thread the special symbol MYTHREAD refers to the thread number.
.TP
.B \-fupc-pthreads-model-tls
Compile for POSIX threads (pthreads) environment. Each UPC thread is directly mapped
to one pthread.
.TP
.B \-fupc-inline-lib
Inline UPC run-time library calls. This option is turned on by default and 
.B \-fno-upc-inline-lib
option must be specified to turn it off. In general, inlining of the run-time library calls produces larger code
and needs to be turned off if more condensed code is required.
.SH DEBUGGING OPTIONS
.TP
.B \-g
Produce symbolic debugging information
.SH INSTRUMENTATION OPTIONS
.TP
.B \-fupc-instrument
Instrument UPC shared accesses and library calls, using GASP tool support (implies -fno-upc-inline-lib)
.TP
.B \-fupc-instrument-functions
Instrument functions calls, using GASP tool support (implies -fupc-instrument and -fno-upc-inline-lib)
.SH OPTIMIZATION OPTIONS
.TP
.B \-O2
This optimization level is one of GCC's standard options.  It is especially
important for UPC because it enables instruction scheduling, which increases
performance dramatically for distributed data access.  Nearly all supported
optimizations that do not involve a space-speed tradeoff are performed.  Loop
unrolling and function inlining are not done, for example.

.SH EXECUTION (RUNTIME) OPTIONS

The number of THREADS in an UPC application can be specified
statically at compile-time, or dynamically at execution time.
In the static compilation environment THREADS is a constant,
and can be used freely in contexts where a constant is required by
the C language specification (for example in an array declaration).
In a dynamic compilation environment, the value of THREADS is given at
runtime, and THREADS can be used in array declarations only if the
array is qualified as
.I shared
and in contexts where one and only one of the shared array's dimensions
is specified as an integral multiple of THREADS.

.TP
.B <UPC_program> [[\-fupc\-threads\-|\-n]<nthreads>] [[\-fupc\-heap\-|\-heap ]<heapsize>[K|M|G]] [upc affinity options] [program-specific-arguments and switches]
.PP
If the UPC program was not compiled with the \-fupc\-threads\-
option, then the number of THREADS must be specified 
explicitly on the command line when the
program is executed. The UPC runtime recognizes the
.I \-fupc\-threads\-<nthreads> 
or
.I \-n<nthreads>
command line switch, and establishes the number of parallel execution
threads given by the value `<nthreads>'. Generally, `<nthreads>' should not exceed the
number of physical central processing units.
.PP
The size of the heap used by the UPC program is established with the
specificaion of the
.I \-fupc\-heap\-<heapsize>
command line switch. The value of `<heapsize>' is the size of the heap available
to each thread, specified in bytes.
A suffix of `K', indicates that the value `<heapsize>' is expressed in kilobytes (2^10 bytes);
a suffix of `M' indicates that `<heapsize>' is expressed in megabytes (2^20 bytes);
and `G' indicates the value is given in gigabytes (2^30 bytes).
If the \-fupc\-heap\-<heapsize> switch is not supplied, then the runtime system
will choose a default heap size of 16 megabytes per thread.
.PP
As of version 4.2.3, upc run-time supports execution and memory affinity of UPC threads. The 
following options control how threads are scheduled:
.TP
.B\-sched-policy [cpu,strict,node,auto]
Controls the scheduling policy for threads. 
.I cpu
specifies that threads are evenly scheduled over available CPUs (single processor or a core
unit in multicore processor).
.I strict
is similar to cpu scheduling except that one to one mapping of threads and CPUs is required.
.I node
specifies that threads are scheduled on nodes if NUMA aware kernel is available. 
.I auto
specifies that UPC run-time should not manage scheduling of UPC threads.
.TP
.B\-sched-cpu-avoid n1,n2,.. 
Controls the availability of CPUs for UPC scheduling. UPC run-time will not schedule any thread
on CPUs specified with this option.
.TP
.B\-mem-policy [node,strict,auto]
Controls the threads's memory allocation policy if NUMA aware kernel is available.
-I node
allocates memory first from the node on which thread is scheduled to run.
-I strict
allocates memory only from the node on which thread is scheduled to run.
-I auto
lets kernel decide the best memory allocation policy.
.PP
The UPC runtime will remove all switches that begin with the prefix
.I \-fupc\-
and that immediately follow the UPC program name on the command line,
before calling the UPC program's `main()' routine.

.SH FILES
.nf
.ta \w'LIBDIR/g++\-include 'u
file.upc	UPC source file
file.upci	preprocessed UPC source file
file.c	C source file
file.h	C header (preprocessor) file
file.i	preprocessed C source file
file.s	assembly language file
file.o	object file
a.out	link edited output
\fITMPDIR\fR/cc\(**	temporary files
\fILIBDIR\fR/cpp	preprocessor
\fILIBDIR\fR/cc1upc	compiler for UPC
\fILIBDIR\fR/cc1	compiler for C
\fILIBDIR\fR/collect2	linker front end needed on some machines
\fILIBDIR\fR/libupc.a	UPC runtime library
\fILIBDIR\fR/libgcc.a	GCC subroutine library
/lib/crt[01n].o	start-up routine
/lib/libc.a	standard C library, see
.IR intro (3)
/usr/include	standard directory for \fB#include\fP files
\fILIBDIR\fR/include	standard gcc directory for \fB#include\fP files
.Sp
.fi
.I LIBDIR
should be found by using
.I upc \-v
.br
.I TMPDIR
comes from the environment variable
.B TMPDIR
(default
.B /usr/tmp
if available, else
.B /tmp\c
\&).
.SH "SEE ALSO"
gcc(1), cpp(1), as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1).
.PP
.B Introduction to UPC and Language Specification
.br
(\fIhttp://projects.seas.gwu.edu/~hpcl/upcdev/upctr.pdf\fP)
William W. Carlson et al., LLNL, CCS-TR-99-157, May 13, 1999
.PP
.B UPC Language Specifications
.br
(\fIftp://ftp.seas.gwu.edu/pub/upc/downloads/upc_specs.pdf\fP)
Tarek A. El-Ghazawi et al, February 25, 2001
.PP
.B GASP Tool Interface
.br
(\fIhttp://gasp.hcs.ufl.edu/\fP)
University of Florida, GASP Tool Interface
.PP
The
.B GCC UPC web site
.br
(\fIhttp://www.gccupc.org\fP)
.PP
The
.B GCC UPC Mailing List
.br
(\fIhttp://www.gwu.edu/~upc/software/gnu-upc-ml.html\fP)
is an electronic forum for discussing
news announcements, bug reports, planned developments,
and other topics of interest to GCC UPC developers and users.

.SH BUGS
Report bugs to
.I upc@intrepid.com
\.

.SH AUTHORS
Original Implementation by
Jesse M. Draper <jdraper@super.org> and William W. Carlson <wwc@super.org>.
.br
Ported to SGI Irix 6.5 and the gcc 2.95.2 baseline by Gary Funck <gary@intrepid.com> and Nenad Vukicevic <nenad@intrepid.com>.
