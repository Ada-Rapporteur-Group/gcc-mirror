==================== Branch work144-vsubreg, patch #507 ====================

Fix issue with -mno-store-vector-pair.

2023-11-09  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vector-pair.md (mov<mode>): Make -mno-load-vector-pair
	and -mno-store-vector-pair work.

==================== Branch work144-vsubreg, patch #506 (vsize #400) ====================

Add support for -mvector-size-32.

2023-11-09  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/predicates.md (const_0_to_31_operand): New predicate.
	* config/rs6000/rs6000-c.cc (rs6000_cpu_cpp_builtins): Define
	__VECTOR_SIZE_32__ if -mvector-size-32 was used.
	* config/rs6000/rs6000-cpus.def (OTHER_POWER10_MASKS): Add
	-mvector-size-32.
	(POWERPC_MASKS): Likewise.
	* config/rs6000/rs6000-protos.h (vector_pair_to_vector_mode): New
	declaration.
	(rs6000_adjust_for_vector_pair): Likewise.
	(split_unary_vector_pair): Likewise.
	(split_binary_vector_pair): Likewise.
	(split_fma_vector_pair): Likewise.
	* config/rs6000/rs6000.cc (rs6000_hard_regno_mode_ok_uncached): Add
	support for 32-byte vector types created with -mvector-size-32.
	(rs6000_modes_tieable_p): Make all 32-byte vectors tie with other
	32-byte vectors.
	(rs6000_debug_reg_global): If -mdebug=reg, print whether
	-mvector-size-32 was enabled.
	(rs6000_init_hard_regno_mode_ok): Add support for 32-byte vectors.
	(rs6000_option_override_internal): Add checking for -mvector-size-32.
	(rs6000_opt_masks): Add -mvector-size-32.
	(rs6000_expand_vector_extract): Add support for 32-byte vectors.
	(reg_offset_addressing_ok_p): Likewise.
	(rs6000_emit_move): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(vector_pair_to_vector_mode): New vector pair helper function.
	(rs6000_adjust_for_vector_pair): Likewise.
	(rs6000_split_vpair_constan): Likewise.
	(split_unary_vector_pair): Likewise.
	(split_binary_vector_pair): Likewise.
	(split_fma_vector_pair): Likewise.
	(rs6000_split_multireg_move): Add support for 32-byte vectors.
	* config/rs6000/rs6000.h (VECTOR_PAIR_MODE): New macro.
	* config/rs6000/rs6000.md (wd attribute): Add 32-byte vector modes.
	(RELOAD): Likewise.
	(toplevel): Include vector-pair.md.
	* config/rs6000/rs6000.opt (-mvector-size-32): New option.
	* config/rs6000/t-rs6000 (MD_INCLUDES): Add vector-pair.md.
	* config/rs6000/vector-pair.md: New file.
	* config/rs6000/vector.md (VEC_base): Add 32-byte vector modes.
	* config/rs6000/vsx.md (VSX_EXTRACT_PREDICATE): Likewise.
	(VSX_EX): Likewise.
	(VPAIR_V4DI_V4DF): New mode iterator.
	(VPAIR_VECTOR): New mode attribute.
	(vpair_vector): Likewise.
	(vsx_extract_<mode>, VPAIR_V4DF_V4DI iterator): New extract insn for
	vector pair support.
	(vsx_extract_v8sf): Likewise.
	(vsx_extract_<mode>, VPAIR_SMALL_INT iterator): Likewise.

gcc/testsuite/

	* gcc.target/powerpc/vector-size-32-1.c: New test.
	* gcc.target/powerpc/vector-size-32-2.c: New test.
	* gcc.target/powerpc/vector-size-32-3.c: New test.
	* gcc.target/powerpc/vector-size-32-4.c: New test.
	* gcc.target/powerpc/vector-size-32-5.c: New test.
	* gcc.target/powerpc/vector-size-32-6.c: New test.

==================== Branch work144-vsubreg, patch #505 (vpair #205) ====================

Add overloads for __builtin_vpair_assemble.

2023-11-09  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-overloads.def (__builtin_vpair_assemble): Add
	overloads.

==================== Branch work144-vsubreg, patch #504 (vpair #204) ====================

Add support for doing a horizontal add on vector pair elements.

This patch adds a series of built-in functions to allow users to write code to
do a number of simple operations where the loop is done using the __vector_pair
type.  The __vector_pair type is an opaque type.  These built-in functions keep
the two 128-bit vectors within the __vector_pair together, and split the
operation after register allocation.

This patch provides vector pair built-in functions to do a horizontal add on
vector pair elements.  Only floating point and 64-bit horizontal adds are
provided in this patch.

2023-11-08  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def (__builtin_vpair_f32_add_elements):
	New built-in function.
	(__builtin_vpair_f64_add_elements): Likewise.
	(__builtin_vpair_i64_add_elements): Likewise.
	(__builtin_vpair_i64u_add_elements): Likewise.
	* config/rs6000/vector-pair.md (UNSPEC_VPAIR_REDUCE_PLUS_F32): New
	unspec.
	(UNSPEC_VPAIR_REDUCE_PLUS_F64): Likewise.
	(UNSPEC_VPAIR_REDUCE_PLUS_I64): Likewise.
	(vpair_reduc_plus_scale_v8sf): New insn.
	(vpair_reduc_plus_scale_v4df): Likewise.
	(vpair_reduc_plus_scale_v4di): Likewise.
	* doc/extend.texi (__builtin_vpair_f32_add_elements): Document.
	(__builtin_vpair_f64_add_elements): Likewise.
	(__builtin_vpair_i64_add_elements): Likewise.

gcc/testsuite/

	* gcc.target/powerpc/vector-pair-16.c: New test.

==================== Branch work144-vsubreg, patch #503 (vpair #203) ====================

Add support for initializing and extracting from vector pairs.

This patch adds a series of built-in functions to allow users to write code to
do a number of simple operations where the loop is done using the __vector_pair
type.  The __vector_pair type is an opaque type.  These built-in functions keep
the two 128-bit vectors within the __vector_pair together, and split the
operation after register allocation.

This patch provides vector pair operations for loading up a vector pair with all
0's, duplicated (splat) from a scalar type, or combining two vectors in a vector
pair.  This patch also provides vector pair builtins to extract one vector
element of a vector pair.

2023-11-09  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/predicates.md (mma_assemble_input_operand): Allow any
	16-byte vector, not just V16QImode.
	* config/rs6000/rs6000-builtins.def (__builtin_vpair_zero): New vector
	pair initialization built-in functions.
	(__builtin_vpair_*_assemble): Likeise.
	(__builtin_vpair_*_splat): Likeise.
	(__builtin_vpair_*_extract_vector): New vector pair extraction built-in
	functions.
	* config/rs6000/vector-pair.md (UNSPEC_VPAIR_V32QI): New unspec.
	(UNSPEC_VPAIR_V16HI): Likewise.
	(UNSPEC_VPAIR_V8SI): Likewise.
	(UNSPEC_VPAIR_V4DI): Likewise.
	(VP_INT_BINARY): New iterator for integer vector pair.
	(vp_insn): Add supoort for integer vector pairs.
	(vp_ireg): New code attribute for integer vector pairs.
	(vp_ipredicate): Likewise.
	(VP_INT): New int interator for integer vector pairs.
	(VP_VEC_MODE): Likewise.
	(vp_pmode): Likewise.
	(vp_vmode): Likewise.
	(vp_neg_reg): New int interator for integer vector pairs.
	(vpair_neg_<vp_pmode>): Add integer vector pair support insns.
	(vpair_not_<vp_pmode>2): Likewise.
	(vpair_<vp_insn>_<vp_pmode>3): Likewise.
	(vpair_andc_<vp_pmode): Likewise.
	(vpair_iorc_<vp_pmode>): Likewise.
	(vpair_nand_<vp_pmode>_1): Likewise.
	(vpair_nand_<vp_pmode>_2): Likewise.
	(vpair_nor_<vp_pmode>_1): Likewise.
	(vpair_nor_<vp_pmode>_2): Likewise.
	* doc/extend.texi (PowerPC Vector Pair Built-in Functions): Document the
	integer vector pair built-in functions.

gcc/testsuite/

	* gcc.target/powerpc/vector-pair-5.c: New test.
	* gcc.target/powerpc/vector-pair-6.c: New test.
	* gcc.target/powerpc/vector-pair-7.c: New test.
	* gcc.target/powerpc/vector-pair-8.c: New test.


==================== Branch work144-vsubreg, patch #502 (vpair #202) ====================

Add support for integer point vector pair built-in functions.

This patch adds a series of built-in functions to allow users to write code to
do a number of simple operations where the loop is done using the __vector_pair
type.  The __vector_pair type is an opaque type.  These built-in functions keep
the two 128-bit vectors within the __vector_pair together, and split the
operation after register allocation.

This patch provides vector pair operations for 8, 16, 32, and 64-bit integers.

2023-11-09  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def (__builtin_vpair_i8*): Add built-in
	functions for integer vector pairs.
	(__builtin_vpair_i16*): Likeise.
	(__builtin_vpair_i32*): Likeise.
	(__builtin_vpair_i64*): Likeise.
	* config/rs6000/vector-pair.md (UNSPEC_VPAIR_V32QI): New unspec.
	(UNSPEC_VPAIR_V16HI): Likewise.
	(UNSPEC_VPAIR_V8SI): Likewise.
	(UNSPEC_VPAIR_V4DI): Likewise.
	(VP_INT_BINARY): New iterator for integer vector pair.
	(vp_insn): Add supoort for integer vector pairs.
	(vp_ireg): New code attribute for integer vector pairs.
	(vp_ipredicate): Likewise.
	(VP_INT): New int interator for integer vector pairs.
	(VP_VEC_MODE): Likewise.
	(vp_pmode): Likewise.
	(vp_vmode): Likewise.
	(vp_neg_reg): New int interator for integer vector pairs.
	(vpair_neg_<vp_pmode>): Add integer vector pair support insns.
	(vpair_not_<vp_pmode>2): Likewise.
	(vpair_<vp_insn>_<vp_pmode>3): Likewise.
	(vpair_andc_<vp_pmode): Likewise.
	(*vpair_iorc_<vp_pmode>): Likewise.
	(vpair_nand_<vp_pmode>_1): Likewise.
	(vpair_nand_<vp_pmode>_2): Likewise.
	(vpair_nor_<vp_pmode>_1): Likewise.
	(vpair_nor_<vp_pmode>_2): Likewise.
	* doc/extend.texi (PowerPC Vector Pair Built-in Functions): Document the
	integer vector pair built-in functions.

gcc/testsuite/

	* gcc.target/powerpc/vector-pair-5.c: New test.
	* gcc.target/powerpc/vector-pair-6.c: New test.
	* gcc.target/powerpc/vector-pair-7.c: New test.
	* gcc.target/powerpc/vector-pair-8.c: New test.


==================== Branch work144-vsubreg, patch #501 (vpair #201) ====================

Add support for floating point vector pair built-in functions.

This patch adds a series of built-in functions to allow users to write code to
do a number of simple operations where the loop is done using the __vector_pair
type.  The __vector_pair type is an opaque type.  These built-in functions keep
the two 128-bit vectors within the __vector_pair together, and split the
operation after register allocation.

This patch provides vector pair operations for 32-bit floating point and 64-bit
floating point.

2023-11-09  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def (__builtin_vpair_f32_*): Add vector
	pair built-in functions for float.
	(__builtin_vpair_f64_*): Add vector pair built-in functions for double.
	* config/rs6000/rs6000-protos.h (split_unary_vector_pair): Add
	declaration.
	(split_binary_vector_pair): Likewise.
	(split_fma_vector_pair): Likewise.
	* config/rs6000/rs6000.cc (split_unary_vector_pair): New helper function
	for vector pair built-in functions.
	(split_binary_vector_pair): Likewise.
	(split_fma_vector_pair): Likewise.
	* config/rs6000/rs6000.md (toplevel): Include vector-pair.md.
	* config/rs6000/t-rs6000 (MD_INCLUDES): Add vector-pair.md.
	* config/rs6000/vector-pair.md: New file.
	* doc/extend.texi (PowerPC Vector Pair Built-in Functions): Document the
	floating point and general vector pair built-in functions.

gcc/testsuite/

	* gcc.target/powerpc/vector-pair-1.c: New test.
	* gcc.target/powerpc/vector-pair-2.c: New test.
	* gcc.target/powerpc/vector-pair-3.c: New test.
	* gcc.target/powerpc/vector-pair-4.c: New test.

==================== Branch work144-vsubreg, patch #500 ====================

Peter's patches for subreg support.

2023-11-09  Peter Bergner  <bergner@linux.ibm.com>

gcc/

	PR target/109116
	* gcc/config/rs6000/rs6000.cc (rs6000_modes_tieable_p): Make OOmode
	tieable with 128-bit vector modes.

2023-11-09  Peter Bergner  <bergner@linux.ibm.com>

gcc/

	PR target/109116
	* gcc/config/rs6000/mma.md (vsx_disassemble_pair): Use SUBREG's instead
	of UNSPEC's.
	(mma_disassemble_acc): Likewise.

==================== Branch work144-vsubreg, patch #1 (from work144) ====================

See ChangeLog.meissner
