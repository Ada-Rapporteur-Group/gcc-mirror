[+ AutoGen5 template -*- Mode: Makefile -*-
mk
+][+COMMENT use 'autogen --trace=everything melt-build.def' to debug this
  See http://www.gnu.org/software/autogen/
+]
[+ (. (dne "#@#@# " "#@! ")) +]
##@@ melt-build.mk is generated from melt-build.tpl by 'autogen melt-build.def'
#
# Makefile fragment for MELT modules and MELT translator bootstrap.
#   Copyright (C) 2010,2011,2012  Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#@ [+ (. (tpl-file-line))+] generated by Autogen [+ (. autogen-version)+] using [+ (.(def-file))+]
## See http://stackoverflow.com/q/8727896/841108
## and http://lists.gnu.org/archive/html/help-make/2012-01/msg00017.html
## and http://gcc.gnu.org/ml/gcc/2012-01/msg00089.html
## and Ian Taylor's explanation http://gcc.gnu.org/ml/gcc/2012-01/msg00090.html
## Using remake http://bashdb.sourceforge.net/remake/ may help debugging this.
## Conventionally, all our timestamp files lie in the current directory.

[+(. (define comefromcount 0))+]
[+(. (define (fromline) (set! comefromcount (+ comefromcount 1)) 
	(sprintf "%s/%d" (tpl-file-line "%s:%d") comefromcount)
	))+]

#@ default MELT variant [+ (. (fromline))+]
melt_default_variant ?= optimized

# MELT_RUNNER is usually empty; it could be e.g 'time' or 'nice' or
# some other "prefix" to run MELT

## the following Makefile variables are expected to be set [+ (. (fromline))+] 
[+FOR meltmac IN 
	"melt_source_dir: directory containing *.melt & *.c files" 
	"melt_module_dir: directory containing *.so MELT module files" 
	"melt_make_module_makefile: our melt-module.mk Makefile  when making MELT"
	"melt_make_source_dir: directory containing the *.melt files when making MELT"
	"melt_make_module_dir: directory containing the *.so files when making MELT"
	"melt_default_modules_list: basename of the default module list"
	"melt_make_cc1: gcc -fplugin=melt or cc1-melt program within MELT branch"
	"melt_make_cc1_dependency: the make dependency for above"
	"melt_make_gencdeps: extra make dependency of generated C files -often empty-"
	"melt_move_if_change: a move if change command for MELT"
	"melt_cflags: the CFLAGS for compiling MELT generated C code"
	"melt_xtra_cflags: th CFLAGS for compiling extra applicative C code - often empty"
	"melt_default_variant: quicklybuilt | optimized | debugnoline"
+]
[+
	(define meltmac-name "?name")
	(define meltmac-comment "?comment")
	(let* ( 
	(meltmacstr (get "meltmac"))
	(colonpos (string-index meltmacstr #\: 
	))	
	(beforecolonstr (string-take meltmacstr colonpos))
	(aftercolonstr (string-drop meltmacstr (+ colonpos 1)))
	)
	(set! meltmac-name beforecolonstr)
	(set! meltmac-comment aftercolonstr)
	 ) +]
#@ [+ (. (fromline))+] name= [+(. meltmac-name)+] comment=  [+(. meltmac-comment)+]
ifndef [+(. meltmac-name)+]
$(warning unknown [+(. meltmac-name)+] ::: [+(. meltmac-comment)+])
endif

[+ENDFOR meltmac+]



## LN_S might not be defined, e.g. in MELT-Plugin-Makefile [+ (. (fromline))+]
LN_S ?= ln -sv

## GAWK is needed, the GNU awk [+ (. (fromline))+]
GAWK ?= gawk

## the md5sum utility is needed  [+ (. (fromline))+]
MD5SUM ?= md5sum

## the various arguments to MELT - avoid spaces in them! [+ (. (fromline))+]
meltarg_mode=$(if $(melt_is_plugin),-fplugin-arg-melt-mode,-fmelt-mode)
meltarg_init=$(if $(melt_is_plugin),-fplugin-arg-melt-init,-fmelt-init)
meltarg_module_path=$(if $(melt_is_plugin),-fplugin-arg-melt-module-path,-fmelt-module-path)
meltarg_source_path=$(if $(melt_is_plugin),-fplugin-arg-melt-source-path,-fmelt-source-path)
meltarg_tempdir=$(if $(melt_is_plugin),-fplugin-arg-melt-tempdir,-fmelt-tempdir)
meltarg_workdir=$(if $(melt_is_plugin),-fplugin-arg-melt-workdir,-fmelt-workdir)
meltarg_arg=$(if $(melt_is_plugin),-fplugin-arg-melt-arg,-fmelt-arg)
meltarg_bootstrapping=$(if $(melt_is_plugin),-fplugin-arg-melt-bootstrapping,-fmelt-bootstrapping)
meltarg_genworklink=$(if $(melt_is_plugin),-fplugin-arg-melt-generate-work-link,-fmelt-generate-work-link)
meltarg_makefile=$(if $(melt_is_plugin),-fplugin-arg-melt-module-makefile,-fmelt-module-makefile)
meltarg_makecmd=$(if $(melt_is_plugin),-fplugin-arg-melt-module-make-command,-fmelt-module-make-command)
meltarg_arglist=$(if $(melt_is_plugin),-fplugin-arg-melt-arglist,-fmelt-arglist)
meltarg_output=$(if $(melt_is_plugin),-fplugin-arg-melt-output,-fmelt-output)
meltarg_modulecflags=$(if $(melt_is_plugin),-fplugin-arg-melt-module-cflags,-fmelt-module-cflags)
meltarg_inhibitautobuild=$(if $(melt_is_plugin),-fplugin-arg-melt-inhibit-auto-build,-fmelt-inhibit-auto-build)

#@ [+ (. (fromline))+]
## MELT_DEBUG could be set to -fmelt-debug or -fplugin-arg-melt-debug
## the invocation to translate the very first initial MELT file [+ (. (fromline))+]
MELTCCINIT1ARGS= $(melt_make_cc1flags) -Wno-shadow $(meltarg_mode)=translateinit  \
	      $(meltarg_makefile)=$(melt_make_module_makefile) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(meltarg_bootstrapping) $(MELT_DEBUG)

#@ [+ (. (fromline))+]
## the invocation to translate the other files [+ (. (fromline))+]
MELTCCFILE1ARGS=  $(melt_make_cc1flags) -Wno-shadow $(meltarg_mode)=translatefile  \
	      $(meltarg_makefile)=$(melt_make_module_makefile) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(meltarg_bootstrapping)  $(MELT_DEBUG)

#@ [+ (. (fromline))+]
## the invocation to translate the application files -don't pass the -fmelt-bootstrap flag
MELTCCAPPLICATION1ARGS=  $(melt_make_cc1flags) -Wno-shadow $(meltarg_mode)=translatefile  \
	      $(meltarg_makefile)=$(melt_make_module_makefile) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(MELT_DEBUG)
MELTCCAPPLICATION1=$(melt_make_cc1) $(MELTCCAPPLICATION1ARGS)

#@ [+ (. (fromline))+]
## the invocation to run the application files -don't pass the -fmelt-bootstrap flag
MELTCCRUNFILE1ARGS=  $(melt_make_cc1flags) -Wno-shadow $(meltarg_mode)=runfile  \
	      $(meltarg_makefile)=$(melt_make_module_makefile) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(MELT_DEBUG)
MELTCCRUNFILE1=$(melt_make_cc1) $(MELTCCRUNFILE1ARGS)

## our vpath  [+ (. (fromline))+]
vpath %.quicklybuilt.so . melt-workdir/ $(melt_make_module_dir)
vpath %.debugnoline.so . melt-workdir/ $(melt_make_module_dir)
vpath %.dynamic.so . melt-workdir/ $(melt_make_module_dir)
vpath %.pic.o .  melt-workdir/ $(melt_make_module_dir)
vpath %.so $(melt_make_module_dir) .
vpath %.c $(melt_make_source_dir)/generated . $(melt_source_dir)
vpath %.h . $(melt_make_source_dir)/generated $(melt_source_dir)
vpath %.melt $(melt_make_source_dir) . $(melt_source_dir)


## using make to compile the generated C into MELT modules [+ (. (fromline))+]
## the invoking command could set MELT_MAKE_MODULE_XTRAMAKEFLAGS=-j2
export MELT_MAKE_MODULE_XTRAMAKEFLAGS 
##always prefix $(MELT_MAKE_MODULE) with a + in this file.
MELT_MAKE_MODULE=$(MAKE) -f $(melt_make_module_makefile) $(MELT_MAKE_MODULE_XTRAMAKEFLAGS) VPATH=$(VPATH):.

## The base name of the MELT translator files [+ (. (fromline))+]
MELT_TRANSLATOR_BASE= \
  [+FOR melt_translator_file " \\\n"+]  [+base+][+ENDFOR melt_translator_file+]

## the MELT translator MELT source files [+ (. (fromline))+]
MELT_TRANSLATOR_SOURCE= $(patsubst %,$(melt_make_source_dir)/%.melt,$(MELT_TRANSLATOR_BASE))

## The base name of the MELT application files [+ (. (fromline))+]
MELT_APPLICATION_BASE= \
  [+FOR melt_application_file " \\\n"+]  [+base+][+ENDFOR melt_application_file+]

## The MELT application source files [+ (. (fromline))+]
MELT_APPLICATION_SOURCE= $(patsubst %,$(melt_make_source_dir)/%.melt,$(MELT_APPLICATION_BASE))

## The cold stage 0 of the translator [+ (. (fromline))+]
[+FOR melt_translator_file +]
#@ The C files of the stage 0 are deposited [+ (. (fromline))+]
MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES= \
                  $(realpath $(melt_make_source_dir))/generated/[+base+].c \
                  $(wildcard $(realpath $(melt_make_source_dir))/generated/[+base+]+*.c)
# The base names of stage 0 files [+ (. (fromline))+]
MELT_ZERO_GENERATED_[+mkvarsuf+]_BASE= \
                  $(basename $(notdir $(MELT_GENERATED_[+mkvarsuf+]_C_FILES)))
# for stage 0 files, we don't compute the checksum, we extract what was deposited [+ (. (fromline))+]
## avoid spaces in MELT_GENERATED_[+mkvarsuf+]_CUMULMD5 below [+ (. (fromline))+]
MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5:=$(shell $(GAWK) -F\" '/extern/{next} /melt_cumulated_hexmd5/{print $$2}' $(melt_make_source_dir)/generated/[+base+]+meltdesc.c)
[+ENDFOR melt_translator_file+]

#@ the required work directory [+ (. (fromline))+]
melt-workdir:
	mkdir -p melt-workdir
	ls -ld $$PWD/melt-workdir > melt-workdir-directory.stamp

#@ the work directory timestamp  [+ (. (fromline))+]
melt-workdir-directory.stamp: melt-workdir ; @true

####----------------------------------------------------------------


## An empty file is needed for every MELT translation [+ (. (fromline))+]
empty-file-for-melt.c:
	date +"/* empty-file-for-melt.c %c */" > $@-tmp
	mv $@-tmp $@

## can be overridden manually to either melt-stage0-dynamic or
## melt-stage0-quicklybuilt  [+ (. (fromline))+]
.PHONY: warmelt0
## the default stage0 is [+ (. (fromline))+]
MELT_STAGE_ZERO?=melt-stage0-dynamic
MELT_ZERO_FLAVOR=$(patsubst melt-stage0-%,%,$(MELT_STAGE_ZERO))
warmelt0: $(melt_make_cc1_dependency) \
   $(MELT_STAGE_ZERO)-directory.stamp $(MELT_STAGE_ZERO)-fullstage.stamp 


########################################################################
## the rules to build the quicklybuilt and dynamic flavors of stage0, that
## is with static or dynamic field object offsets  [+ (. (fromline))+]

[+FOR zeroflavor IN "dynamic" "quicklybuilt" +]
## stage 0 flavor [+zeroflavor+]  [+ (. (fromline))+]

## stage 0 for [+base+] [+ (. (fromline))+]
melt-stage0-[+zeroflavor+]:
	test -d  melt-stage0-[+zeroflavor+]/ || mkdir  melt-stage0-[+zeroflavor+]/
	ls -ld $$PWD/melt-stage0-[+zeroflavor+]/ > melt-stage0-[+zeroflavor+]-directory.stamp
melt-stage0-[+zeroflavor+]-directory.stamp: melt-stage0-[+zeroflavor+] ; @true

#@ stage 0 flavor [+zeroflavor+] [+ (. (fromline))+]

[+FOR melt_translator_file +]

#@ stage 0 for [+base+] flavor [+zeroflavor+]  [+ (. (fromline))+]
melt-stage0-[+zeroflavor+]/[+base+].$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5).[+zeroflavor+].so:  $(MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES) \
             melt-run.h melt-runtime.h melt-runtime.c melt-workdir-directory.stamp \
             melt-predef.h melt-stage0-[+zeroflavor+]-directory.stamp $(melt_make_cc1_dependency)
	@echo stage0-[+zeroflavor+] [+base+] MELT_GENERATED_[+mkvarsuf+]_CUMULMD5= $(MELT_GENERATED_[+mkvarsuf+]_CUMULMD5)  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module \
	      GCCMELT_MAKEFROM=[+ (. (fromline))+] \
              GCCMELT_MODULE_WORKSPACE=melt-workdir \
              GCCMELT_MODULE_FLAVOR=[+zeroflavor+] \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
	      GCCMELT_MODULE_SOURCEBASE=$(melt_make_source_dir)/generated/[+base+] \
	      GCCMELT_CUMULATED_MD5=$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5) \
              GCCMELT_MODULE_BINARYBASE=melt-stage0-[+zeroflavor+]/[+base+]
	@echo  [+ (. (fromline))+] $@  "real!melt-workdir=$(realpath melt-workdir)"
	-ls -l melt-stage0-[+zeroflavor+]/[+base+]*  melt-workdir/[+base+]*
	$(LN_S) -v -f $(realpath melt-workdir)/$(notdir $@) $@
	touch -c $@
	@echo  '@@touched' $@ [+ (. (fromline))+]
	-ls -l melt-stage0-[+zeroflavor+]/[+base+]* melt-workdir/$(notdir $@) $@

#@ stage 0 for [+base+] flavor [+zeroflavor+]  descfiles [+ (. (fromline))+] 
melt-stage0-[+zeroflavor+]/[+base+]+meltdesc.c melt-stage0-[+zeroflavor+]/[+base+]+melttime.h: \
   $(melt_make_source_dir)/generated/[+base+]+meltdesc.c \
   $(melt_make_source_dir)/generated/[+base+]+melttime.h
	$(LN_S) -v -f $? melt-stage0-[+zeroflavor+]/


#@ stage 0 for [+base+] flavor [+zeroflavor+]  shortmodule [+ (. (fromline))+] 
melt-stage0-[+zeroflavor+]/[+base+].[+zeroflavor+].so: \
  melt-stage0-[+zeroflavor+]/[+base+].$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5).[+zeroflavor+].so
	@echo  [+ (. (fromline))+] $@
	-ls -l $< $@
	@echo  [+ (. (fromline))+] $@
	cd melt-stage0-[+zeroflavor+]/ ; $(LN_S) -v -f $(notdir $<) $(notdir $@)
	-ls -l $< $@
	touch -c $@
	@echo  '@@touched' $@ [+ (. (fromline))+] 
	$(MD5SUM) $@ > melt-stage0-[+base+].[+zeroflavor+]-module.stamp-tmp
	$(melt_move_if_change) melt-stage0-[+base+].[+zeroflavor+]-module.stamp-tmp \
             melt-stage0-[+base+].[+zeroflavor+]-module.stamp

#@ stage 0 for [+base+] flavor [+zeroflavor+]  stamp [+ (. (fromline))+] 
melt-stage0-[+base+].[+zeroflavor+]-module.stamp: \
  melt-stage0-[+zeroflavor+]/[+base+].[+zeroflavor+].so ; @true

#@ stage 0 for [+base+] flavor [+zeroflavor+] done  [+ (. (fromline))+]

#### end STAGE0 of [+base+] flavored [+zeroflavor+]  [+ (. (fromline))+]
[+ENDFOR melt_translator_file+]


#@ stage 0 flavor [+zeroflavor+] modulelist  [+ (. (fromline))+] 
melt-stage0-[+zeroflavor+]/warmelt.modlis:  | \
[+FOR melt_translator_file " \\\n" 
+]             melt-stage0-[+zeroflavor+]/[+base+].[+zeroflavor+].so \
                melt-stage0-[+zeroflavor+]/[+base+]+meltdesc.c [+
ENDFOR melt_translator_file+]
	date  +"#$@ generated %F" > $@-tmp
[+FOR melt_translator_file+]	echo $(melt_make_source_dir)/generated/[+base+].[+zeroflavor+] >> $@-tmp
	echo "#end stage 0 flavor [+zeroflavor+] module list" >> $@-tmp
[+ENDFOR melt_translator_file+]	$(melt_move_if_change) $@-tmp $@




#@ stage 0 flavor [+zeroflavor+] fullstage stamp  [+ (. (fromline))+] 
melt-stage0-[+zeroflavor+]-fullstage.stamp: \
[+FOR melt_translator_file " \\\n" 
  +] melt-stage0-[+base+].[+zeroflavor+]-module.stamp [+ENDFOR melt_translator_file+]
	cat $^ > $@-tmp
	$(melt_move_if_change) $@-tmp $@


##@ end STAGE0  flavor [+zeroflavor+]  [+ (. (fromline))+]
####-------------------------------------------------------------

[+ENDFOR zeroflavor+] 


################################################################
################################################################
#### making our melt stages  [+ (. (fromline))+]

[+FOR melt_stage+]
#@  for [+melt_stage+] [+ (. (fromline))+]
#### rules for [+melt_stage+][+ 
  (define stageindex (+ 1 (for-index)))
  (define previndex (for-index))
  (define prevstage (if (> stageindex 1) (sprintf "melt-stage%d" previndex) "$(MELT_STAGE_ZERO)"))
  (define prevflavor (if (> stageindex 1) "quicklybuilt" "$(MELT_ZERO_FLAVOR)"))
+], previous [+ (. prevstage)+]
[+FOR melt_translator_file+][+ 
  (define outbase (get "base")) (define outindex (for-index)) +]

### the C source of [+melt_stage+] for [+ (. outbase)+] [+ (. (fromline))+]

## the timestamp C header file  for [+ (. outbase)+] [+ (. (fromline))+]
[+melt_stage+]/[+ (. outbase)+]+melttime.h: [+melt_stage+]/[+ (. outbase)+]+meltdesc.c; @true

## the descriptive C of [+melt_stage+] for [+ (. outbase)+] [+ (. (fromline))+]
[+melt_stage+]/[+ (. outbase)+]+meltdesc.c [+melt_stage+]/[+ (. outbase)+].c:  \
     $(melt_make_source_dir)/[+ (. outbase)+].melt \
     [+melt_stage+]-directory.stamp \
     [+ (. prevstage)+]-fullstage.stamp [+ (. prevstage)+]/warmelt.modlis \
[+FOR includeload+]        [+includeload+] \
[+ENDFOR includeload
+][+FOR melt_translator_file+][+ (define inbase (get "base")) (define inindex (for-index)) 
  (define depstage (if (< inindex outindex) (get "melt_stage") prevstage))
  (define depindex (if (< inindex outindex) stageindex (- stageindex 1)))
+]      [+IF (< inindex outindex)+] [+ (. depstage)+]-[+(. inbase)+]-module.stamp \
[+ENDIF+][+ENDFOR melt_translator_file
+]  empty-file-for-melt.c melt-run.h melt-runtime.h melt-predef.h \
              $(melt_make_cc1_dependency)
##  [+ (. (fromline))+]
	@echo generating $< for [+melt_stage+]
	@echo [+IF (= outindex 0)+] $(MELTCCINIT1ARGS) $(meltarg_init)=\[+ELSE+] $(MELTCCFILE1ARGS) $(meltarg_init)=\[+ENDIF+]
[+FOR melt_translator_file ":\\\n"+][+ (define inbase (get "base")) (define inindex (for-index)) 
  (define depstage (if (< inindex outindex) (get "melt_stage") prevstage))
  (define depflavor (if (< inindex outindex) "quicklybuilt" prevflavor))
  (define depindex (if (< inindex outindex) stageindex (- stageindex 1)))
+][+ (. depstage)+]/[+ (. inbase)+].[+ (. depflavor)+][+ENDFOR melt_translator_file
+] > [+ (. outbase)+]+[+melt_stage+].args-tmp
	@echo $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	      $(meltarg_module_path)=$(realpath .):$(realpath [+melt_stage+]):$(realpath [+ (. prevstage)+]):$(realpath  $(melt_make_module_dir)) \
	      $(meltarg_source_path)=$(realpath .):$(realpath [+melt_stage+]):$(realpath [+ (. prevstage)+]):$(realpath $(melt_make_source_dir)):$(realpath $(melt_make_source_dir)/generated):$(realpath $(melt_source_dir)) \
	      $(meltarg_output)=[+melt_stage+]/[+ (. outbase)+] $(meltarg_workdir)=melt-workdir $(meltarg_genworklink) \
	      empty-file-for-melt.c >> [+ (. outbase)+]+[+melt_stage+].args-tmp
	@$(melt_move_if_change)  [+ (. outbase)+]+[+melt_stage+].args-tmp  [+ (. outbase)+]+[+melt_stage+].args
	@echo; echo; echo -n  [+ (. outbase)+]+[+melt_stage+].args: ; cat [+ (. outbase)+]+[+melt_stage+].args ; echo; echo; echo "***** doing " $@  [+ (. (fromline))+]
	@echo doing [+ (. outbase)+]+[+melt_stage+]  [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @[+ (. outbase)+]+[+melt_stage+].args
	@ls -l [+melt_stage+]/[+ (. outbase)+].c  || ( echo "*@*MISSING "  [+melt_stage+]/[+ (. outbase)+].c [+ (. (fromline))+] ; exit 1 )

#@ [+ (. (fromline))+]
################## quicklybuilt module [+ (. outbase)+] for [+melt_stage+]
[+melt_stage+]/[+(. outbase)+].quicklybuilt.so: [+melt_stage+]/[+ (. outbase)+].c \
              $(wildcard [+melt_stage+]/[+ (. outbase)+]+*.c)  [+ (. prevstage)+]-fullstage.stamp \
              melt-run.h melt-runtime.h melt-predef.h melt-workdir-directory.stamp \
              $(melt_make_cc1_dependency)
	@echo doing $@  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module \
              GCCMELT_MODULE_WORKSPACE=melt-workdir \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
	      GCCMELT_MAKEFROM=[+ (. (fromline))+] \
	      MELTGEN_MODULENAME=[+(. outbase)+] \
              GCCMELT_MODULE_FLAVOR=quicklybuilt \
	      GCCMELT_MODULE_SOURCEBASE=[+melt_stage+]/[+ (. outbase)+] \
              GCCMELT_MODULE_BINARYBASE=$(realpath [+melt_stage+])/[+(. outbase)+]
	touch -c $@
	@echo '@@touched' $@  [+ (. (fromline))+]
	$(MD5SUM) $@ > [+melt_stage+]-[+(. outbase)+]-module.stamp-tmp
	$(melt_move_if_change) [+melt_stage+]-[+(. outbase)+]-module.stamp-tmp [+melt_stage+]-[+(. outbase)+]-module.stamp


#@ [+ (. (fromline))+] time stamp for module
[+melt_stage+]-[+(. outbase)+]-module.stamp: [+melt_stage+]/[+(. outbase)+].quicklybuilt.so; @true


#@ [+ (. (fromline))+]
################## debugnoline module [+ (. outbase)+] for [+melt_stage+]
[+melt_stage+]/[+(. outbase)+].debugnoline.so:   [+melt_stage+]/[+ (. outbase)+].c \
              $(wildcard [+melt_stage+]/[+ (. outbase)+]+*.c) \
              melt-run.h melt-runtime.h melt-predef.h melt-workdir-directory.stamp \
              $(melt_make_cc1_dependency)
	@echo doing $@  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module_withoutline \
              GCCMELT_MODULE_WORKSPACE=melt-workdir \
              GCCMELT_MODULE_FLAVOR=debugnoline \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
	      GCCMELT_MODULE_SOURCEBASE=[+melt_stage+]/[+ (. outbase)+] \
              GCCMELT_MODULE_BINARYBASE=$(realpath [+melt_stage+])/[+(. outbase)+]

[+ENDFOR melt_translator_file+]


#@ [+ (. (fromline))+]
## the module list in [+melt_stage+]
[+melt_stage+]/warmelt.modlis:  \
[+FOR melt_translator_file " \\\n" +]             [+melt_stage+]/[+base+].quicklybuilt.so[+
ENDFOR melt_translator_file+]
	date  +"#$@ generated %F" > $@-tmp
[+FOR melt_translator_file+]	echo [+base+].quicklybuilt >> $@-tmp
[+ENDFOR melt_translator_file+]	$(melt_move_if_change) $@-tmp $@
[+ (define laststage (get "melt_stage"))
   (define lastindex stageindex)
+]

#@ [+ (. (fromline))+]
[+melt_stage+]/warmelt.debugnoline.modlis:  \
[+FOR melt_translator_file " \\\n" +]             [+melt_stage+]/[+base+].debugnoline.so[+
ENDFOR melt_translator_file+]
	date  +"#$@ generated %F" > $@-tmp
[+FOR melt_translator_file+]	echo [+base+].debugnoline >> $@-tmp
[+ENDFOR melt_translator_file+]	$(melt_move_if_change) $@-tmp $@
[+ (define laststage (get "melt_stage"))
   (define lastindex stageindex)
+]

## the stamp for [+melt_stage+]
#@ [+ (. (fromline))+]
[+melt_stage+]-fullstage.stamp:  melt-run.h  [+melt_stage+]/warmelt.modlis \
[+FOR melt_translator_file "\\\n"+] [+melt_stage+]-[+base+]-module.stamp [+melt_stage+]/[+base+].c [+ENDFOR melt_translator_file+]
	echo "#$@ generated" > $@-tmp
	$(MD5SUM) melt-run.h >> $@-tmp
[+FOR melt_translator_file "\n"+]	$(MD5SUM) [+melt_stage+]/[+base+].c $(wildcard [+melt_stage+]/[+base+]+[0-9]*.c) < /dev/null >> $@-tmp[+ENDFOR melt_translator_file+]
	echo "# end $@" >> $@-tmp
	$(melt_move_if_change) $@-tmp $@


### phony targets for  [+melt_stage+]
#@ [+ (. (fromline))+]
.PHONY: warmelt[+(. stageindex)+] warmelt[+(. stageindex)+]n
warmelt[+(. stageindex)+]: [+melt_stage+]-fullstage.stamp [+melt_stage+]/warmelt.modlis
	@echo MELT build made $@
warmelt[+(. stageindex)+]n:  [+melt_stage+]-fullstage.stamp [+melt_stage+]/warmelt.debugnoline.modlis
	@echo MELT build made $@

#@ [+ (. (fromline))+] [+melt_stage+] directory and stamp
[+melt_stage+]:
	test -d  [+melt_stage+]/ || mkdir [+melt_stage+] 
	ls -ld $$PWD/[+melt_stage+] > [+melt_stage+]-directory.stamp
[+melt_stage+]-directory.stamp: [+melt_stage+] ; @true

[+ (define laststage (get "melt_stage"))+]
### end of [+melt_stage+] [+ (. (fromline))+] 

[+ENDFOR melt_stage+]

#@ [+ (. (fromline))+]
######## last stage [+ (. laststage)+]
MELT_LAST_STAGE=[+ (. laststage)+]
WARMELT_LAST= warmelt[+ (. lastindex)+]
WARMELT_LAST_STAGESTAMP= [+ (. laststage)+]-fullstage.stamp
WARMELT_LAST_MODLIS= [+ (. laststage)+]/warmelt.modlis



#@ [+ (. (fromline))+]
.PHONY: warmelt
warmelt: $(WARMELT_LAST)



#@ [+ (. (fromline))+]
####### final targets [+ (. (fromline))+]
.PHONY: all-melt melt-all-modules melt-all-sources melt-tiny-tests
all-melt: melt-workdir-directory.stamp melt-modules-directory.stamp melt-sources-directory.stamp \
   melt-all-modules melt-all-sources melt-tiny-tests

### the final module directory [+ (. (fromline))+]
melt-modules: 
	test -d melt-modules/ || mkdir  melt-modules/
	ls -ld $$PWD/melt-modules > melt-modules-directory.stamp
melt-modules-directory.stamp: melt-modules; @true

### the final source directory [+ (. (fromline))+]
melt-sources: 
	test -d melt-sources/ || mkdir  melt-sources/
	ls -ld $$PWD/melt-sources > melt-sources-directory.stamp
melt-sources-directory.stamp: melt-sources; @true


### all sources [+ (. (fromline))+]
melt-all-sources: $(WARMELT_LAST_MODLIS) $(WARMELT_LAST_STAGESTAMP) empty-file-for-melt.c \
    melt-run.h melt-runtime.h melt-predef.h melt-sources-directory.stamp \
    $(melt_make_cc1_dependency) \
[+FOR melt_translator_file+]      melt-sources/[+base+].melt \
    melt-sources/[+base+]+melttime.h \
[+FOR includeload+]       melt-sources/[+includeload+] \
[+ENDFOR includeload+][+ENDFOR melt_translator_file+][+FOR melt_application_file" \\\n"
+]  melt-sources/[+base+].melt \
    melt-sources/[+base+]+melttime.h  [+ENDFOR melt_application_file+]


#### melt-sources translator files [+ (. (fromline))+]
[+FOR melt_translator_file+]
#@ [+ (. (fromline))+]
[+ (define transindex (for-index)) +]

## melt translator [+base+] # [+ (. transindex) +] [+ (. (fromline))+]
melt-sources/[+base+].melt: $(melt_make_source_dir)/[+base+].melt melt-sources-directory.stamp
	@echo  [+ (. (fromline))+]; ls -l $(melt_make_source_dir)/[+base+].melt 
	cd melt-sources; $(LN_S) -v -f  $(realpath $(melt_make_source_dir))/[+base+].melt [+base+].melt

### melt included files with (load ...) macro [+ (. (fromline))+]
[+FOR includeload+]
# included [+includeload+] [+ (. (fromline))+]
melt-sources/[+includeload+]: [+includeload+] melt-sources-directory.stamp
	rm -f melt-sources/[+includeload+]*
	cp -v $< melt-sources/[+includeload+]-tmp
	mv melt-sources/[+includeload+]-tmp  melt-sources/[+includeload+]
[+ENDFOR includeload+]

# MELT translator [+base+] in melt-sources/ timestamp [+ (. (fromline))+]
melt-sources/[+base+]+melttime.h: melt-sources-directory.stamp \
   melt-sources/[+base+].c melt-sources/[+base+]+meltdesc.c; @true

# MELT translator [+base+] in melt-sources/ C files [+ (. (fromline))+]
melt-sources/[+base+].c melt-sources/[+base+]+meltdesc.c: \
    melt-sources/[+base+].melt  melt-sources-directory.stamp [+FOR includeload
+]melt-sources/[+includeload+] [+ENDFOR includeload+] \
                    $(WARMELT_LAST_STAGESTAMP) $(WARMELT_LAST_MODLIS) \
                    empty-file-for-melt.c melt-run.h melt-runtime.h \
                    $(melt_make_cc1_dependency)
	@echo doing $@  [+ (. (fromline))+]
	@echo [+IF (= transindex 0)+] $(MELTCCINIT1ARGS) \[+ELSE+] $(MELTCCFILE1ARGS) \[+ENDIF+]
	     $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	     $(meltarg_module_path)=$(realpath $(MELT_LAST_STAGE)):$(realpath melt-modules): \
	     $(meltarg_source_path)=$(realpath $(MELT_LAST_STAGE)):$(realpath melt-sources):$(realpath $(melt_source_dir)) \
	     $(meltarg_init)=@$(basename $(WARMELT_LAST_MODLIS)) \
	     $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_inhibitautobuild) \
	     $(meltarg_output)=melt-sources/[+base+] empty-file-for-melt.c > [+base+]+sources.args-tmp
	@$(melt_move_if_change) [+base+]+sources.args-tmp [+base+]+sources.args
	@echo; echo; echo; echo -n [+base+]+sources.args: ; cat [+base+]+sources.args ; echo "***** doing " $@ [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @[+base+]+sources.args



#@  base= [+base+] [+ (. (fromline))+]
melt-modules/[+base+].optimized.so: melt-sources/[+base+].c \
      $(wildcard  melt-sources/[+base+]+*.c) \
      melt-modules-directory.stamp melt-sources-directory.stamp melt-workdir-directory.stamp \
      melt-run.h melt-runtime.h
	@echo doing $@  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
	      GCCMELT_MODULE_FLAVOR=optimized \
              GCCMELT_MODULE_WORKSPACE=melt-workdir \
	      GCCMELT_MODULE_SOURCEBASE=melt-sources/[+base+] \
              GCCMELT_MODULE_BINARYBASE=melt-modules/[+base+] 

#@  base= [+base+] [+ (. (fromline))+]
melt-modules/[+base+].debugnoline.so: melt-sources/[+base+].c \
   $(wildcard  melt-sources/[+base+]+*.c) \
   melt-modules-directory.stamp melt-sources-directory.stamp  melt-workdir-directory.stamp \
   melt-run.h melt-runtime.h 
	@echo doing $@  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
	      GCCMELT_MODULE_FLAVOR=debugnoline \
              GCCMELT_MODULE_WORKSPACE=melt-workdir \
	      GCCMELT_MODULE_SOURCEBASE=melt-sources/[+base+] \
              GCCMELT_MODULE_BINARYBASE=melt-modules/[+base+] 

#@ [+ (. (fromline))+]
melt-modules/[+base+].quicklybuilt.so: melt-sources/[+base+].c \
    $(wildcard  melt-sources/[+base+]+*.c) \
    melt-modules-directory.stamp melt-sources-directory.stamp  melt-workdir-directory.stamp \
    melt-run.h melt-runtime.h 
	@echo doing $@  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module \
	      GCCMELT_MODULE_FLAVOR=quicklybuilt \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
	      GCCMELT_MODULE_SOURCEBASE=melt-sources/[+base+] \
              GCCMELT_MODULE_BINARYBASE=melt-modules/[+base+] \
              GCCMELT_MODULE_WORKSPACE=melt-workdir 
# end translator [+base+]

#@  [+base+] [+ (. (fromline))+]
[+ENDFOR melt_translator_file+]

#@ [+ (. (fromline))+]

[+FOR flavor IN quicklybuilt optimized debugnoline+]
#@ [+ (. (fromline))+]
#### melt-sources warmelt-[+flavor+] is the sequence of translator files:
melt-sources/warmelt-[+flavor+].modlis: [+FOR melt_translator_file " \\\n"+]melt-modules/[+base+].optimized.so [+ENDFOR melt_translator_file+]
	@echo building [+flavor+] module list $@ [+ (. (fromline))+]
	date  +"# MELT warmelt-[+flavor+] list $@ generated %F" > $@-tmp
	echo "#  [+flavor+] translator files" >> $@-tmp
[+FOR melt_translator_file+]	echo [+base+].[+flavor+] >> $@-tmp
[+ENDFOR melt_translator_file+]
	echo "# end $@" >> $@-tmp
	$(melt_move_if_change) $@-tmp $@

[+ENDFOR flavor+]

#### melt-sources application files
[+ (define prevapplbase (list)) +]
[+FOR melt_application_file+]

#@ [+ (. (fromline))+]
## melt application [+base+]
melt-sources/[+base+].melt: $(melt_make_source_dir)/[+base+].melt
	cd melt-sources; $(LN_S) -v -f $(realpath $^) [+base+].melt


#@ [+ (. (fromline))+]
## melt application [+base+] generated files
## we translate them twice, first with a quicklybuilt, then with an optimized warmelt
## to exercise the optimized warmelt...
melt-sources/[+base+].c: \
   melt-sources/[+base+].melt \
   melt-sources/warmelt-quicklybuilt.modlis melt-sources/warmelt-optimized.modlis \
   melt-sources-directory.stamp \
 [+FOR includeload
+]  melt-sources/[+includeload+] [+ENDFOR includeload+] \
   $(MELT_TRANSLATOR_SOURCE) \
   $(WARMELT_LAST_STAGESTAMP) $(WARMELT_LAST_MODLIS) \
   empty-file-for-melt.c melt-run.h melt-runtime.h \
   $(melt_make_cc1_dependency)
	@echo doing $@  [+ (. (fromline))+] with quicklybuilt warmelt
	@echo 	$(MELTCCAPPLICATION1ARGS) \
	     $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	     $(meltarg_module_path)=$(realpath melt-modules) \
	     $(meltarg_source_path)=$(realpath melt-sources) \
             $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_inhibitautobuild) \
	     $(meltarg_init)=@warmelt-quicklybuilt:[+ (. (join ":" (reverse prevapplbase)))+] \
	     $(meltarg_output)=$(basename $@) empty-file-for-melt.c > $(notdir $(basename $@))-quickb.args-tmp
	@$(melt_move_if_change) $(notdir $(basename $@))-quickb.args-tmp $(notdir $(basename $@))-quickb.args
	@echo; echo; echo; echo -n $(notdir $(basename $@))-quickb.args: ; cat $(notdir $(basename $@))-quickb.args ; echo "***** doing " $@ [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @$(notdir $(basename $@))-quickb.args
#@ [+ (. (fromline))+]
	@echo doing $@  [+ (. (fromline))+] with optimized warmelt
	@echo 	$(MELTCCAPPLICATION1ARGS) \
	     $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	     $(meltarg_module_path)=$(realpath melt-modules) \
	     $(meltarg_source_path)=$(realpath melt-sources) \
             $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_inhibitautobuild) \
	     $(meltarg_init)=@warmelt-optimized:[+ (. (join ":" (reverse prevapplbase)))+] \
	     $(meltarg_output)=$(basename $@) empty-file-for-melt.c > $(notdir $(basename $@))-optim.args-tmp
	@$(melt_move_if_change) $(notdir $(basename $@))-optim.args-tmp $(notdir $(basename $@))-optim.args
	@echo; echo; echo; echo -n $(notdir $(basename $@))-optim.args: ; cat $(notdir $(basename $@))-optim.args ; echo "***** doing " $@ [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @$(notdir $(basename $@))-optim.args

#@ [+ (. (fromline))+]
## melt application [+base+] various flavors of modules

[+FOR applflavor IN "quicklybuilt"  "optimized"  "debugnoline" +]
## melt application [+base+] flavor [+applflavor+]  [+ (. (fromline))+]
melt-modules/[+base+].[+applflavor+].so: melt-sources-directory.stamp \
     melt-sources/[+base+].c melt-modules-directory.stamp  melt-workdir-directory.stamp \
     $(wildcard  melt-sources/[+base+]+*.c) \
     melt-run.h melt-runtime.h 
	@echo doing $@  [+ (. (fromline))+]
	+$(MELT_MAKE_MODULE) melt_module \
	      GCCMELT_MODULE_FLAVOR=[+applflavor+] \
	      GCCMELT_CFLAGS="$(melt_cflags)" \
              GCCMELT_MODULE_WORKSPACE=melt-workdir \
	      GCCMELT_MODULE_SOURCEBASE=melt-sources/[+base+] \
              GCCMELT_MODULE_BINARYBASE=melt-modules/[+base+] 

#@ [+ (. (fromline))+] [+base+].[+applflavor+]
[+ENDFOR applflavor+]
#@ [+ (. (fromline))+]
[+ (define prevapplbase (cons (get "base") prevapplbase)) +]
# end application [+base+]

#@ [+ (. (fromline))+]
[+ENDFOR melt_application_file+]

################

#@ [+ (. (fromline))+]
melt-sayhello.melt: $(melt_default_modules_list).modlis
	@date +'(code_chunk say%YM%mhello #{printf("hello_from_MELT on %c pid %%d\n", (int) getpid());}#)' > $@
#@ [+ (. (fromline))+]

melt-tiny-tests: melt-sayhello.melt melt-modules melt-sources \
		melt-all-modules melt-all-sources \
		melt-default-modules-quicklybuilt.modlis melt-runtime.args \
		$(MELT_RUNTIME_C)
# test that a helloworld can be translated [+ (. (fromline))+]
	@echo doing $@  [+ (. (fromline))+]
	@echo	$(MELTCCAPPLICATION1ARGS) \
	     $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	     $(meltarg_module_path)=$(realpath melt-modules) \
	     $(meltarg_source_path)=$(realpath melt-sources) \
       $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_inhibitautobuild) \
       $(meltarg_output)=$(basename $<) empty-file-for-melt.c > $(basename $<).args-tmp
	@$(melt_move_if_change) $(basename $<).args-tmp $(basename $<).args
	@echo; echo; echo; echo -n $(basename $<).args: ; cat $(basename $<).args ; echo "***** doing " $(basename $<)  [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @$(basename $<).args
# test that a helloworld can be run [+ (. (fromline))+]
	@echo	$(MELTCCRUNFILE1ARGS) $(meltarg_init)=@melt-default-modules-quicklybuilt \
	     $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	     $(meltarg_module_path)=$(realpath melt-modules) \
	     $(meltarg_source_path)=$(realpath melt-sources) \
       $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_inhibitautobuild) \
       $(meltarg_output)=$(basename $<) empty-file-for-melt.c > $(basename $<)-run.args-tmp
	@$(melt_move_if_change) $(basename $<)-run.args-tmp $(basename $<)-run.args
	@echo; echo; echo; echo -n $(basename $<)-run.args: ; cat $(basename $<)-run.args ; echo "***** doing " $(basename $<)-run  [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @$(basename $<)-run.args
# test that the melt-runtime follows MELT coding rules; this also tests
# a real MELT pass on real code, like our melt-runtime.c
# test melt-runtime [+ (. (fromline))+]
	@echo  $(melt_make_cc1flags) >  meltframe.args-tmp
	@echo  $(meltarg_mode)=meltframe  \
	      $(meltarg_makefile)=$(melt_make_module_makefile) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(MELT_DEBUG) $(meltarg_init)=@melt-default-modules-quicklybuilt \
	     $(meltarg_module_path)=$(realpath melt-modules) \
	     $(meltarg_source_path)=$(realpath melt-sources) \
       $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_inhibitautobuild) >>  meltframe.args-tmp
	@echo -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) -o /dev/null >> meltframe.args-tmp
	@echo -Iinclude/ >> meltframe.args-tmp
	@if [ -d include-fixed ] ; then echo -Iinclude-fixed/  >> meltframe.args-tmp ; fi
	@echo  -O -Wno-shadow  >> meltframe.args-tmp
	@cat melt-runtime.args >> meltframe.args-tmp
	@$(melt_move_if_change) meltframe.args-tmp meltframe.args
	@echo; echo; echo; echo -n meltframe.args: ; cat meltframe.args ; echo "***** doing " meltframe  [+ (. (fromline))+]
	$(MELT_RUNNER) $(melt_make_cc1) @meltframe.args


#@ [+ (. (fromline))+]




################
#@ [+ (. (fromline))+]
melt-all-modules:  melt-workdir \
[+FOR melt_translator_file+]    melt-modules/[+base+].optimized.so \
[+ENDFOR melt_translator_file+] \
[+FOR melt_translator_file+]    melt-modules/[+base+].quicklybuilt.so \
[+ENDFOR melt_translator_file+] \
[+FOR melt_translator_file+]    melt-modules/[+base+].debugnoline.so \
[+ENDFOR melt_translator_file+] \
    \
[+FOR melt_application_file+]    melt-modules/[+base+].optimized.so \
[+ENDFOR melt_application_file+] \
[+FOR melt_application_file+]    melt-modules/[+base+].quicklybuilt.so \
[+ENDFOR melt_application_file+] \
[+FOR melt_application_file+]    melt-modules/[+base+].debugnoline.so \
[+ENDFOR melt_application_file+]

$(melt_default_modules_list).modlis: melt-all-modules \
       $(melt_default_modules_list)-quicklybuilt.modlis \
       $(melt_default_modules_list)-optimized.modlis \
       $(melt_default_modules_list)-debugnoline.modlis
	cd $(dir $@) ; $(LN_S) -v -f $(melt_default_modules_list)-$(melt_default_variant).modlis  $(notdir $@)


#@ [+ (. (fromline))+]
## MELT various variants of module lists

[+FOR variant IN quicklybuilt optimized debugnoline+]
#@ [+ (. (fromline))+]
### [+variant+] default module list
$(melt_default_modules_list)-[+variant+].modlis:  melt-all-modules  melt-modules/ $(wildcard melt-modules/*.[+variant+].so)
	@echo building [+variant+] module list $@
	date  +"# MELT module  [+variant+] list $@ generated %F" > $@-tmp
	echo "#  [+variant+] translator files" >> $@-tmp
[+FOR melt_translator_file+]	echo [+base+].[+variant+] >> $@-tmp
[+ENDFOR melt_translator_file+]
	echo "#  [+variant+] application files" >> $@-tmp
[+FOR melt_application_file+]	echo [+base+].[+variant+] >> $@-tmp
[+ENDFOR melt_application_file+]
	echo "# end $@" >> $@-tmp
	$(melt_move_if_change) $@-tmp $@

[+ENDFOR variant+]

#@ [+ (. (fromline))+]
### MELT upgrade
.PHONY: warmelt-upgrade-translator meltrun-generate


#@ [+ (. (fromline))+]
####### generate the runtime support files meltrunsup.h meltrunsup-inc.c
meltrun-generate: $(WARMELT_LAST) $(WARMELT_LAST_MODLIS)  $(WARMELT_LAST_STAGESTAMP) empty-file-for-melt.c \
                   $(melt_make_cc1_dependency)
	@rm -f $(wildcard meltrunsup*)
	@echo $(melt_make_cc1flags) \
	      $(meltarg_mode)=runtypesupport  \
	      $(meltarg_workdir)=melt-workdir $(meltarg_genworklink) $(meltarg_bootstrapping)  $(MELT_DEBUG) \
	      $(meltarg_init)=@$(basename $(WARMELT_LAST_MODLIS)) \
	      $(meltarg_module_path)=$(MELT_LAST_STAGE):. \
	      $(meltarg_source_path)=$(MELT_LAST_STAGE):$(melt_source_dir):. \
	      $(meltarg_output)=meltrunsup  \
	      empty-file-for-melt.c > $(basename $@).args-tmp
	@$(melt_move_if_change) $(basename $@).args-tmp $(basename $@).args
	@echo; echo; echo; echo -n $(basename $@).args: ; cat $(basename $@).args ; echo "***** doing " $@
	 $(MELT_RUNNER) $(melt_make_cc1) @$(basename $@).args
	if [ -n "$(GCCMELTRUNGEN_DEST)" ]; then \
	   for f in $(GCCMELTRUNGEN_DEST)/meltrunsup*.[ch]; \
	     do mv $$f $$f.bak; \
	   done; \
	   cp -v meltrunsup*.[ch] "$(GCCMELTRUNGEN_DEST)" ; \
        fi
	ls -l meltrunsup*.[ch]


###### generate the translator files warmelt*.c
#@ [+ (. (fromline))+]
warmelt-upgrade-translator: $(WARMELT_LAST) $(WARMELT_LAST_STAGESTAMP) meltrun-generate \
[+FOR melt_translator_file " \\\n"
+]   $(MELT_LAST_STAGE)/[+base+].c \
         $(wildcard  $(MELT_LAST_STAGE)/[+base+]+*.c) [+
ENDFOR melt_translator_file+]
	@echo upgrading the MELT translator
	@which unifdef > /dev/null || (echo missing unifdef for warmelt-upgrade-translator; exit 1)
	@which indent  > /dev/null || (echo missing indent for warmelt-upgrade-translator; exit 1)
	ls -l meltrunsup.h meltrunsup-inc.c 
	indent meltrunsup.h
	indent meltrunsup-inc.c
#@ [+ (. (fromline))+]
[+FOR melt_translator_file+]
#@ [+ (. (fromline))+]
	@echo upgrading MELT translator [+base+]
## dont indent the [+base+]+meltdesc.c or [+base+]+melttime.h ::: [+ (. (fromline))+]
	cp $(MELT_LAST_STAGE)/[+base+]+meltdesc.c  $(MELT_LAST_STAGE)/[+base+]+meltdesc.c~; \
	sed s/$(MELT_LAST_STAGE)/MELT-STAGE-ZERO/g $(MELT_LAST_STAGE)/[+base+]+meltdesc.c > $(srcdir)/melt/generated/[+base+]+meltdesc.c 
	cp $(MELT_LAST_STAGE)/[+base+]+melttime.h  $(MELT_LAST_STAGE)/[+base+]+melttime.h~; \
	sed s/$(MELT_LAST_STAGE)/MELT-STAGE-ZERO/g $(MELT_LAST_STAGE)/[+base+]+melttime.h > $(srcdir)/melt/generated/[+base+]+melttime.h 
	for f in $(MELT_LAST_STAGE)/[+base+].c $(MELT_LAST_STAGE)/[+base+]+[0-9]*.c ; do \
	  bf=`basename $$f`; \
	  rm -f $(srcdir)/melt/generated/$$bf-tmp; \
          grep -v '^#line' < $$f \
            | unifdef -UMELTGCC_NOLINENUMBERING | indent \
                 > $(srcdir)/melt/generated/$$bf-tmp; \
	  ls -l $(srcdir)/melt/generated/$$bf-tmp; \
	  if [ -f $(srcdir)/melt/generated/$$bf ]; then \
             $(melt_move_if_change) $(srcdir)/melt/generated/$$bf $(srcdir)/melt/generated/$$bf~ ; \
	  fi ; \
	  $(melt_move_if_change) $(srcdir)/melt/generated/$$bf-tmp \
                     $(srcdir)/melt/generated/$$bf ; \
        done
	rm -f $(MELT_STAGE_ZERO)/[+base+]*.so $(MELT_STAGE_ZERO)/[+base+]*.c
#@ [+ (. (fromline))+]
#
[+ENDFOR melt_translator_file+]
	cp -v meltrunsup*.[ch]   $(srcdir)/melt/generated/
#@ [+ (. (fromline))+]





### Generated MELT documentation
#@ [+ (. (fromline))+]
meltgendoc.texi: $(melt_default_modules_list).modlis \
[+FOR melt_translator_file+]                    melt-sources/[+base+].melt \
[+ENDFOR melt_translator_file+][+FOR melt_application_file+]                    melt-sources/[+base+].melt \
[+ENDFOR melt_application_file+]                    empty-file-for-melt.c melt-run.h melt-runtime.h \
                    $(melt_make_cc1_dependency)
	echo $(melt_make_cc1flags) $(meltarg_mode)=makedoc  \
	      $(meltarg_makefile)=$(melt_make_module_makefile) \
	      $(meltarg_makecmd)=$(MAKE) \
	      $(meltarg_workdir)=melt-workdir  $(meltarg_genworklink) $(meltarg_bootstrapping)  $(MELT_DEBUG) \
	      $(meltarg_init)=@$(melt_default_modules_list) \
	      $(meltarg_module_path)=$(realpath melt-modules):. \
	      $(meltarg_source_path)=$(realpath melt-sources):. \
	      $(meltarg_output)=$(basename $@).texi  \
              $(meltarg_arglist)=[+FOR melt_translator_file+][+base+].melt,[+ENDFOR melt_translator_file+]\
[+FOR melt_application_file "," +][+base+].melt[+ENDFOR melt_application_file+] \
              empty-file-for-melt.c > $(notdir $(basename $@)).args-tmp
	$(melt_move_if_change) $(notdir $(basename $@)).args-tmp  $(notdir $(basename $@)).args
	@echo; echo; echo; echo -n $(notdir $(basename $@)).args: ; cat $(notdir $(basename $@)).args ; echo "***** doing " $@
	$(MELT_RUNNER) $(melt_make_cc1) @$(notdir $(basename $@)).args





### MELT cleanup  [+ (. (fromline))+]
.PHONY: melt-clean
melt-clean:
	rm -rf *melt*.args melt-workdir melt-stage0-* melt-sayhello* \
               $(wildcard *melt-*.stamp) \
	       melt-run.h *melt*.o *melt*.so melt*~ meltgen*.texi melt-default* \
[+FOR melt_stage+]           [+melt_stage+]  \
[+ENDFOR melt_stage+]               melt-sources melt-modules

#@ [+ (. (fromline))+]
## eof melt-build.mk generated from melt-build.tpl & melt-melt-build.def
