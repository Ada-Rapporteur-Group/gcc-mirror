2018-10-23  Jakub Jelinek  <jakub@redhat.com>

	* builtin-types.def (BT_FN_UINT_OMPFN_PTR_UINT_UINT): New.
	* omp-builtins.def (BUILT_IN_GOMP_PARALLEL_REDUCTIONS): New builtin.
	* omp-low.c (scan_sharing_clauses): Handle reduction clause with task
	modifier on parallel like reduction on taskloop.
	(scan_omp_parallel): Add _reductemp_ clause if there are any reduction
	clauses with task modifier.
	(finish_taskreg_scan): Move field corresponding to _reductemp_ clause
	first.
	(lower_rec_input_clauses): Don't set reduction_omp_orig_ref if handling
	reduction as task reductions.  Handle reduction clauses with task
	modifiers like task_reduction clauses.  For is_parallel_ctx perform
	initialization unconditionally.
	(lower_reduction_clauses): Ignore reduction clauses with task modifier
	on parallel constructs.
	(lower_send_clauses): Likewise.
	(lower_omp_task_reductions): Handle code == OMP_PARALLEL.  Use ctx
	rather than ctx->outer in lower_omp call.
	(lower_omp_taskreg): Handle reduction clauses with task modifier on
	parallel construct.
	* omp-expand.c (workshare_safe_to_combine_p): Return false for
	non-worksharing loops.
	(determine_parallel_type): Don't combine if there are any
	OMP_CLAUSE__REDUCTEMP_ clauses.
	(expand_parallel_call): Use GOMP_parallel_reductions call instead
	of GOMP_parallel if there are any reductions, store return value into
	the _reductemp_ temporary.

2018-10-18  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (enum omp_region_type): Add ORT_TASKLOOP and
	ORT_UNTIED_TASKLOOP.
	(omp_default_clause): Print "taskloop" rather than "task" if
	ORT_*TASKLOOP.
	(gimplify_scan_omp_clauses): Add shared clause on parallel for
	combined parallel master taskloop{, simd} if taskloop has
	firstprivate, lastprivate or reduction clause.
	(gimplify_omp_for): Likewise.  Use ORT_TASKLOOP or
	ORT_UNTIED_TASKLOOP instead of ORT_TASK or ORT_UNTIED_TASK.

2018-10-16  Jakub Jelinek  <jakub@redhat.com>

	* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE__REDUCTEMP_.
	* tree.h (OMP_CLAUSE_DECL): Use OMP_CLAUSE__REDUCTEMP_ instead of
	OMP_CLAUSE__LOOPTEMP_.
	* tree.c (omp_clause_num_ops, omp_clause_code_name): Add _reductemp_
	clause.
	(walk_tree_1): Handle OMP_CLAUSE__REDUCTEMP_.
	* tree-nested.c (convert_nonlocal_omp_clauses,
	convert_local_omp_clauses): Likewise.
	* tree-pretty-print.c (dump_omp_clause): Likewise.
	* omp-low.c (struct omp_context): Add task_reductions and
	task_reduction_map fields.
	(delete_omp_context): Release task_reductions and task_reduction_map.
	(scan_sharing_clauses): Don't add any fields for reduction clause on
	taskloop.  Handle OMP_CLAUSE__REDUCTEMP_.
	(add_taskreg_looptemp_clauses): Add OMP_CLAUSE__REDUCTEMP_ clause if
	needed.
	(finish_taskreg_scan): Move also OMP_CLAUSE__REDUCTEMP_ clause in
	front if present.
	(task_reduction_read): New function.
	(lower_rec_input_clauses): Handle OMP_CLAUSE_REDUCTION on taskloop
	construct.  Pass NULL_TREE instead of build_outer_var_ref to
	omp_clause_default_ctor langhook for task reductions for now.  Handle
	OMP_CLAUSE__REDUCTEMP_.
	(lower_send_clauses): Handle OMP_CLAUSE__REDUCTEMP_.  Don't send
	anything for OMP_CLAUSE_REDUCTION on taskloop.
	(lower_omp_task_reductions): Unshare byte positions before gimplifying
	them.  Remember mapping of clauses to indexes in the registered array
	and if offsets or whole sizes are constant, those constants.  Don't
	clear OMP_CLAUSE_REDUCTION_PLACEHOLDER or
	OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER for OMP_CLAUSE_REDUCTION.
	Handle code OMP_TASKLOOP.
	(create_task_copyfn): Copy over OMP_CLAUSE__REDUCTEMP_ pointer.
	(lower_omp_taskreg): Handle reduction clause on taskloop construct.
	* omp-expand.c (expand_task_call): Add GOMP_TASK_FLAG_REDUCTION flag
	to flags if there are any reduction clauses.

2018-10-10  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (lower_rec_input_clauses): Handle VLAs properly.
	(lower_omp_task_reductions): Likewise.
	* gimplify.c (enum omp_region_type): Add ORT_TASKGROUP.
	(gimple_add_tmp_var, omp_firstprivatize_variable, omp_notice_variable,
	omp_is_private, omp_check_private, gimplify_omp_depend): Handle
	ORT_TASKGROUP like ORT_WORKSHARE.
	(omp_add_variable): Don't add private/firstprivate for VLAs in
	ORT_TASKGROUP.
	(gimplify_expr) <case OMP_TASKGROUP>: Move handling into a separate
	case, make sure to scan omp clauses before gimplifying body.

2018-10-09  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (lower_omp_task_reductions): Force TYPE_MAX_VALUE into
	a temporary in the start sequence and even when it is a decl already.

	* omp-low.c (lower_rec_input_clauses, lower_reduction_clauses,
	lower_omp_task_reductions): Remove second argument create_tmp_var
	if it is NULL.
	* gimplify.c (gimplify_omp_depend): Likewise.

2018-10-08  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (lower_omp_task_reductions): For array section reductions,
	read address from avar array instead of computing it again at the end
	of taskgroup, as the base might have changed during the taskgroup.

2018-09-27  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (lower_rec_input_clauses): Fix handling of
	OMP_CLAUSE_REDUCTION_OMP_ORIG_REF for task array reductions.

	* builtin-types.def (BT_FN_VOID_SIZE_SIZE_PTR): New.
	* omp-builtins.def (BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER,
	BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER,
	BUILT_IN_GOMP_TASK_REDUCTION_REMAP): New builtins.
	* omp-low.c (use_pointer_for_field): Use is_global_var instead
	of TREE_STATIC || DECL_EXTERNAL, and apply only if not privatized
	in outer contexts.
	(scan_sharing_clauses): Handle OMP_CLAUSE_IN_REDUCTION in task
	contexts.  Handle OMP_CLAUSE_TASK_REDUCTION.
	(scan_omp_1_stmt): Call scan_sharing_clauses for taskgroups.
	(lower_rec_input_clauses): Handle OMP_CLAUSE_IN_REDUCTION.  Set
	TREE_THIS_NOTRAP instead of just noop testing it.
	(lower_send_clauses): Handle OMP_CLAUSE_IN_REDUCTION.
	(omp_task_reductions_find_first, omp_task_reduction_iterate,
	lower_omp_task_reductions): New functions.
	(lower_omp_taskgroup): Handle taskgroup reductions.
	(create_task_copyfn): Handle OMP_CLAUSE_IN_REDUCTION and
	OMP_CLAUSE_REDUCTION clauses.

2018-08-02  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (gimplify_omp_depend): Load block from elt 5 instead
	of 4, in 4 expect to find original step expression, gimplify it and
	use it to determine if iterating upwards or downwards.  When iterating
	downwards with unsigned iterator type, negate both the difference and
	step before division.

2018-08-01  Jakub Jelinek  <jakub@redhat.com>

	* tree-core.h (enum omp_clause_depend_kind): Remove
	OMP_CLAUSE_DEPEND_UNSPECIFIED, add OMP_CLAUSE_DEPEND_DEPOBJ.
	* gimplify.c (gimplify_omp_depend): Handle OMP_CLAUSE_DEPEND_DEPOBJ
	instead of OMP_CLAUSE_DEPEND_UNSPECIFIED.
	* omp-low.c (lower_depend_clauses): Likewise.
	* tree-pretty-print.c (dump_omp_clause): Likewise, print the
	dependence type unconditionally.

	* tree.h (OMP_CLAUSE_REDUCTION_TASK, OMP_CLAUSE_REDUCTION_INSCAN):
	Define.
	* tree-pretty-print.c (dump_omp_clause): Print reduction modifiers.
	* gimplify.c (gimplify_scan_omp_clauses): Handle
	OMP_CLAUSE_REDUCTION_TASK diagnostics.

2018-07-25  Jakub Jelinek  <jakub@redhat.com>

	* gimple.h (enum gf_mask): Add GF_OMP_TEAMS_HOST.
	(struct gimple_statement_omp_taskreg): Add GIMPLE_OMP_TEAMS to
	comments.
	(struct gimple_statement_omp_single_layout): And remove here.
	(struct gomp_teams): Inherit from gimple_statement_omp_taskreg rather
	than gimple_statement_omp_single_layout.
	(is_a_helper <gimple_statement_omp_taskreg *>::test): Allow
	GIMPLE_OMP_TEAMS.
	(is_a_helper <const gimple_statement_omp_taskreg *>::test): Likewise.
	(gimple_omp_subcode): Formatting fix.
	(gimple_omp_teams_child_fn, gimple_omp_teams_child_fn_ptr,
	gimple_omp_teams_set_child_fn, gimple_omp_teams_data_arg,
	gimple_omp_teams_data_arg_ptr, gimple_omp_teams_set_data_arg,
	gimple_omp_teams_host, gimple_omp_teams_set_host): New inline
	functions.
	* gimple.def (GIMPLE_OMP_TEAMS): Use GSS_OMP_PARALLEL_LAYOUT instead
	of GSS_OMP_SINGLE_LAYOUT, adjust comments.
	* gimplify.c (enum omp_region_type): Reserve bits 1 and 2 for
	auxiliary flags, renumber values of most of ORT_* enumerators,
	add ORT_HOST_TEAMS and ORT_COMBINED_HOST_TEAMS enumerators.
	(maybe_fold_stmt): Don't fold even in host teams regions.
	(gimplify_scan_omp_clauses, gimplify_omp_for): Adjust tests for
	ORT_COMBINED_TEAMS.
	(gimplify_omp_workshare): Set ort to ORT_HOST_TEAMS or
	ORT_COMBINED_HOST_TEAMS if not inside of target construct.  If
	host teams, use gimplify_and_return_first etc. for body like
	for target or target data constructs, and at the end call
	gimple_omp_teams_set_host on the GIMPLE_OMP_TEAMS object.
	* omp-builtins.def (BUILT_IN_GOMP_TEAMS_REG): New builtin.
	* omp-low.c (is_host_teams_ctx): New function.
	(is_taskreg_ctx): Return true also if is_host_teams_ctx.
	(scan_sharing_clauses): Don't ignore shared clauses in
	is_host_teams_ctx contexts.
	(finish_taskreg_scan): Handle GIMPLE_OMP_TEAMS like
	GIMPLE_OMP_PARALLEL.
	(scan_omp_teams): Handle host teams constructs.
	(check_omp_nesting_restrictions): Allow teams with no outer
	OpenMP context.  Adjust diagnostics for teams strictly nested into
	some explicit OpenMP construct other than target.
	(scan_omp_1_stmt) <case GIMPLE_OMP_TEAMS>: Temporarily bump
	taskreg_nesting_level while scanning host teams construct.
	(lower_rec_input_clauses): Don't ignore shared clauses in
	is_host_teams_ctx contexts.
	(lower_omp_1): Use lower_omp_taskreg instead of lower_omp_teams
	for host teams constructs.
	* omp-expand.c (expand_teams_call): New function.
	(expand_omp_taskreg): Allow GIMPLE_OMP_TEAMS and call
	expand_teams_call for it.  Formatting fix.
	(expand_omp_synch): For host teams call expand_omp_taskreg.

2018-07-18  Jakub Jelinek  <jakub@redhat.com>

	* tree.h (OMP_CLAUSE_FIRSTPRIVATE_NO_REFERENCE): Define.
	* gimplify.c (gimplify_omp_for): Handle C++ range for loops with
	NULL TREE_PURPOSE in OMP_FOR_ORIG_DECLS.  Firstprivatize
	__for_end and __for_range temporaries on OMP_PARALLEL for
	distribute parallel for{, simd}.
	* omp-low.c (lower_rec_input_clauses): Handle
	OMP_CLAUSE_FIRSTPRIVATE_NO_REFERENCE on OMP_CLAUSE_FIRSTPRIVATE
	clauses.

2018-06-28  Jakub Jelinek  <jakub@redhat.com>

	* tree-core.h (enum omp_clause_depend_kind): Add
	OMP_CLAUSE_DEPEND_UNSPECIFIED.
	* gimplify.c (gimplify_omp_depend): If there are any
	OMP_CLAUSE_DEPEND_UNSPECIFIED or OMP_CLAUSE_DEPEND_MUTEXINOUTSET
	depend clauses, use a new array format.
	* omp-low.c (lower_depend_clauses): Likewise.
	* tree-pretty-print.c (dump_omp_clause): Handle
	OMP_CLAUSE_DEPEND_UNSPECIFIED.

2018-06-19  Jakub Jelinek  <jakub@redhat.com>

	* gimple.h (enum gf_mask): Add GF_OMP_TASK_TASKWAIT.
	(gimple_omp_task_taskwait_p, gimple_omp_task_set_taskwait_p): New
	inline functions.
	* gimplify.c (gimplify_omp_task): Handle taskwait with depend clauses.
	* tree-pretty-print.c (dump_generic_node): Print taskwait with depend
	clauses.
	* gimple-pretty-print.c (dump_gimple_omp_task): Likewise.
	* omp-low.c (scan_omp_task): Handle taskwait with depend clauses.
	(lower_omp_taskreg): Likewise.
	* omp-expand.c (expand_taskwait_call): New function.
	(expand_omp_taskreg): Handle taskwait with depend clauses.
	(build_omp_regions_1, omp_make_gimple_edges): Treat taskwait with
	depend clauses as a standalone directive.
	* omp-builtins.def (BUILT_IN_GOMP_TASKWAIT_DEPEND): New builtin.

2018-06-14  Jakub Jelinek  <jakub@redhat.com>

	* omp-low.c (check_omp_nesting_restrictions): Allow OpenMP atomics
	inside of simd regions.

2018-06-13  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (gimplify_omp_depend): New function.
	(gimplify_scan_omp_clauses): Gimplify depend clauses with iterators.
	* omp-low.c (lower_depend_clauses): If OMP_CLAUSE_DEPEND_LAST is seen,
	assume lowering is done already and return early.  Set kind
	on artificial depend clause to OMP_CLAUSE_DEPEND_LAST.
	* tree-pretty-print.c (dump_omp_iterators): New function.
	(dump_omp_clause): Print iterators in depend clauses.  Print
	__internal__ for OMP_CLAUSE_DEPEND_LAST.

2018-06-04  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (omp_is_private): Allow simd iterator to be lastprivate
	or private.  Fix up diagnostics if linear is used on collapse>1 simd
	iterator.

2018-05-31  Jakub Jelinek  <jakub@redhat.com>

	* Makefile.in (GTFILES): Add omp-general.h.
	* gengtype.c (open_base_files): Likewise.
	* tree-core.h (enum omp_memory_order): New enum.
	(struct tree_base): Add omp_atomic_memory_order field into union.
	Remove OMP_ATOMIC_SEQ_CST comment.
	* tree.h (OMP_ATOMIC_SEQ_CST): Remove.
	(OMP_ATOMIC_MEMORY_ORDER): Define.
	* tree-pretty-print.h (dump_omp_atomic_memory_order): Declare.
	* tree-pretty-print.c (dump_omp_atomic_memory_order): New function.
	(dump_generic_node): Use it.
	* gimple.h (enum gf_mask): Remove GF_OMP_ATOMIC_SEQ_CST, add
	GF_OMP_ATOMIC_MEMORY_ORDER, use different value for
	GF_OMP_ATOMIC_NEED_VALUE.
	(gimple_build_omp_atomic_load): Add enum omp_memory_order argument.
	(gimple_build_omp_atomic_store): Likewise.
	(gimple_omp_atomic_seq_cst_p): Remove.
	(gimple_omp_atomic_memory_order): New function.
	(gimple_omp_atomic_set_seq_cst): Remove.
	(gimple_omp_atomic_set_memory_order): New function.
	* gimple.c (gimple_build_omp_atomic_load): Add mo argument, call
	gimple_omp_atomic_set_memory_order.
	(gimple_build_omp_atomic_store): Likewise.
	* gimple-pretty-print.c (dump_gimple_omp_atomic_load,
	dump_gimple_omp_atomic_store): Use dump_omp_atomic_memory_order.
	* gimplify.c (gimplify_omp_atomic): Use OMP_ATOMIC_MEMORY_ORDER instead
	of OMP_ATOMIC_SEQ_CST, pass it as new argument to
	gimple_build_omp_atomic_load and gimple_build_omp_atomic_store, remove
	gimple_omp_atomic_set_seq_cst calls.
	* omp-general.h (enum omp_requires): New enum.
	(omp_requires_mask): Declare.
	* omp-general.c (enum omp_requires): New variable.
	* omp-expand.c (omp_memory_order_to_memmodel): New function.
	(expand_omp_atomic_load, expand_omp_atomic_store,
	expand_omp_atomic_fetch_op): Use it and gimple_omp_atomic_memory_order
	instead of gimple_omp_atomic_seq_cst_p.
	* omp-low.c (lower_reduction_clauses): Initialize
	OMP_ATOMIC_MEMORY_ORDER to relaxed.
	* tree-parloops.c (create_call_for_reduction_1): Pass
	OMP_MEMORY_ORDER_RELAXED as new argument to dump_gimple_omp_atomic_load
	and dump_gimple_omp_atomic_store.

2018-05-07  Jakub Jelinek  <jakub@redhat.com>

	* tree-core.h (enum omp_clause_depend_kind): Add
	OMP_CLAUSE_DEPEND_MUTEXINOUTSET.
	* omp-low.c (lower_depend_clauses): For now handle
	OMP_CLAUSE_DEPEND_MUTEXINOUTSET like OMP_CLAUSE_DEPEND_OUT.
	* tree-pretty-print.c (dump_omp_clause): Handle
	OMP_CLAUSE_DEPEND_MUTEXINOUTSET.

2018-05-04  Jakub Jelinek  <jakub@redhat.com>

	* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_NONTEMPORAL.
	* tree.c (omp_clause_num_ops, omp_clause_code_name): Add nontemporal
	clause entries.
	(walk_tree_1): Handle OMP_CLAUSE_NONTEMPORAL.
	* gimplify.c (enum gimplify_omp_var_data): Add GOVD_NONTEMPORAL.
	(gimplify_scan_omp_clauses): Handle cancel and simd
	OMP_CLAUSE_IF_MODIFIERs.  Handle OMP_CLAUSE_NONTEMPORAL.
	(gimplify_adjust_omp_clauses_1): Ignore GOVD_NONTEMPORAL.
	(gimplify_adjust_omp_clauses): Handle OMP_CLAUSE_NONTEMPORAL.
	* omp-grid.c (grid_eliminate_combined_simd_part): Formatting fix.
	Fix comment typos.
	* tree-nested.c (convert_local_omp_clauses): Handle
	OMP_CLAUSE_NONTEMPORAL.
	(convert_nonlocal_omp_clauses): Likewise.  Remove useless test.
	* tree-pretty-print.c (dump_omp_clause): Handle OMP_CLAUSE_NONTEMPORAL.
	Handle cancel and simd OMP_CLAUSE_IF_MODIFIERs.
	* omp-low.c (scan_sharing_clauses): Handle OMP_CLAUSE_NONTEMPORAL.

2018-05-03  Jakub Jelinek  <jakub@redhat.com>

	* tree-core.h (enum omp_clause_defaultmap_kind): New.
	(struct tree_omp_clause): Add subcode.defaultmap_kind.
	* tree.h (OMP_CLAUSE_DEFAULTMAP_KIND, OMP_CLAUSE_DEFAULTMAP_CATEGORY,
	OMP_CLAUSE_DEFAULTMAP_BEHAVIOR, OMP_CLAUSE_DEFAULTMAP_SET_KIND):
	Define.
	* tree-pretty-print.c (dump_omp_clause): Handle new kinds of
	OMP_CLAUSE_DEFAULTMAP.
	* gimplify.c (enum gimplify_omp_var_data): Add GOVD_MAP_ALLOC_ONLY
	and GOVD_MAP_FROM_ONLY.
	(enum gimplify_defaultmap_kind): New.
	(struct gimplify_omp_ctx): Remove target_map_scalars_firstprivate and
	target_map_pointers_as_0len_arrays members, add defaultmap.
	(new_omp_context): Initialize defaultmap member.
	(omp_firstprivatize_variable): Test ctx->defaultmap[GDMK_SCALAR]
	instead of ctx->omp_firstprivatize_variable.
	(computable_teams_clause): Likewise.
	(omp_notice_variable): Handle new defaultmap clause kinds.
	(gimplify_scan_omp_clauses): Likewise.
	(gimplify_adjust_omp_clauses_1): Handle GOVD_MAP_ALLOC_ONLY
	and GOVD_MAP_FROM_ONLY.

2017-06-30  Jakub Jelinek  <jakub@redhat.com>

	* gimplify.c (gimplify_omp_for): Move OMP_CLAUSE_REDUCTION
	and OMP_CLAUSE_IN_REDUCTION from taskloop to the task construct
	sandwiched in between two taskloops.

2017-06-29  Jakub Jelinek  <jakub@redhat.com>

	* omp-general.c (omp_extract_for_data): Allow NE_EXPR
	even in OpenMP loops, transform them into LT_EXPR or
	GT_EXPR loops depending on incr sign.  Formatting fixes.

2017-06-12  Jakub Jelinek  <jakub@redhat.com>

	* tree.def (OMP_TASKGROUP): Add another operand, move next to other
	OpenMP constructs with body and clauses operands.
	* gimple-pretty-print.c (dump_gimple_omp_taskgroup): New function.
	(pp_gimple_stmt_1): Handle GIMPLE_OMP_TASKGROUP.
	* gimple.h (gimple_build_omp_taskgroup): Add clauses argument.
	(gimple_omp_taskgroup_clauses): New inline function.
	(gimple_omp_taskgroup_clauses_ptr): Likewise.
	(gimple_omp_taskgroup_set_clauses): Likewise.
	* tree.h (OMP_BODY): Use OMP_MASTER instead of OMP_TASKGROUP.
	(OMP_CLAUSES): Use OMP_TASKGROUP instead of OMP_SINGLE.
	(OMP_TASKGROUP_CLAUSES): Define.
	(OMP_CLAUSE_REDUCTION_CODE): Handle OMP_CLAUSE_{,IN_,TASK_}REDUCTION.
	(OMP_CLAUSE_REDUCTION_INIT): Likewise.
	(OMP_CLAUSE_REDUCTION_MERGE): Likewise.
	(OMP_CLAUSE_REDUCTION_PLACEHOLDER): Likewise.
	(OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER): Likewise.
	(OMP_CLAUSE_REDUCTION_OMP_ORIG_REF): Likewise.
	* tree-pretty-print.c (dump_omp_clause): Handle
	OMP_CLAUSE_{TASK,IN}_REDUCTION.
	(dump_generic_node): Print taskgroup clauses.
	* gimple.def (GIMPLE_OMP_TASKGROUP): Use GSS_OMP_SINGLE_LAYOUT
	instead of GSS_OMP.
	* tree.c (omp_clause_num_ops): Add in_reduction and task_reduction
	clause entries.
	(omp_clause_code_name): Likewise.
	(walk_tree_1): Handle OMP_CLAUSE_{TASK,IN}_REDUCTION.
	* tree-streamer-out.c (pack_ts_omp_clause_value_fields): Likewise.
	(write_ts_omp_clause_tree_pointers): Likewise.
	* tree-streamer-in.c (unpack_ts_omp_clause_value_fields): Likewise.
	* gimple.c (gimple_build_omp_taskgroup): Add CLAUSES argument.  Call
	gimple_omp_taskgroup_set_clauses.
	(gimple_copy): Copy taskgroup clauses.
	* omp-low.c (scan_sharing_clauses): Handle
	OMP_CLAUSE_{TASK,IN}_REDUCTION like OMP_CLAUSE_REDUCTION.
	(lower_rec_input_clauses): Likewise.
	(scan_omp_for): Fix comment formatting.
	* lto-streamer-out.c (hash_tree): Handle
	OMP_CLAUSE_{TASK,IN}_REDUCTION.
	* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_TASK_REDUCTION
	and OMP_CLAUSE_IN_REDUCTION.
	* gimplify.c (gimplify_scan_omp_clauses): Handle
	OMP_CLAUSE_{TASK,IN}_REDUCTION.
	(gimplify_adjust_omp_clauses): Likewise.
	(gimplify_expr): Handle taskgroup clauses.
	* tree-inline.c (remap_gimple_stmt): Remap taskgroup clauses.

2017-05-10  Jakub Jelinek  <jakub@redhat.com>

	* tree.h (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL): Define.
	* tree-pretty-print.c (dump_omp_clause) <case OMP_CLAUSE_LASTPRIVATE>:
	Print conditional: for OMP_CLAUSE_LASTPRIVATE_CONDITIONAL.
	* gimplify.c (gimplify_scan_omp_clauses): Diagnose invalid
	gimplify_scan_omp_clauses.

2017-05-04  Jakub Jelinek  <jakub@redhat.com>

	* omp-expand.c (expand_parallel_call, expand_omp_for): For dynamic
	and guided schedule without monotonic and nonmonotonic modifier,
	default to nonmonotonic.

Copyright (C) 2017-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
