2010-06-07  Richard Guenther  <rguenther@suse.de>

	* ipa-struct-reorg.c (reorg_structs_drive): Disable.

	testsuite/
	* gcc.dg/struct: XFAIL all testcases.

2010-06-07  Richard Guenther  <rguenther@suse.de>

	* matrix-reorg.c (may_flatten_matrices_1): Sanitize.
	(ssa_accessed_in_tree): Handle MEM_REF.
	(ssa_accessed_in_assign_rhs): Likewise.
	(update_type_size): Likewise.
	(analyze_accesses_for_call_stmt): Likewise.
	(analyze_accesses_for_assign_stmt): Likewise.
	(transform_access_sites): Likewise.
	(transform_allocation_sites): Likewise.

2010-06-07  Richard Guenther  <rguenther@suse.de>

	* gimplify.c (gimplify_cond_expr): Make sure to build MEM_REFs when
	returning GS_ALL_DONE.
	(gimplify_cleanup_point_expr): For empty body and EH-only cleanup
	drop the cleanup instead of inserting it unconditionally.
	* tree-ssa.c (useless_type_conversion_p): Also drop pointer conversions
	with differing pointed-to volatile qualifiers.

	cp/
	* cp-gimplify.c (cp_gimplify_expr): Open-code the rhs
	predicate we are looking for, allow non-gimplified
	INDIRECT_REFs.

	testsuite/
	* gcc.dg/volatile2.c: Adjust.

2010-06-06  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r160345.

2010-05-26  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r159869.

2010-05-20  Richard Guenther  <rguenther@suse.de>

	* cgraphbuild.c (mark_load): Properly check for NULL result
	from get_base_address.
	(mark_store): Likewise.
	* tree-pretty-print.c (print_call_name): Handle MEM_REF.
	* tree-ssa-structalias.c (find_func_clobbers): Likewise.
	* gimple.h (gimple_call_fndecl): Likewise.

2010-05-19  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Fix
	another merge glitch.

2010-05-19  Richard Guenther  <rguenther@suse.de>

	* gimplify.c (gimplify_expr): Fix merge glitch.

2010-05-19  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r159559.

2010-04-15  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r158375.

2010-04-09  Richard Guenther  <rguenther@suse.de>

	* builtins.c (maybe_emit_free_warning): Handle MEM_REF.
	* tree-ssa-phiopt.c (add_or_mark_expr): Likewise.
	(cond_store_replacement): Likewise.
	* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.
	(propagate_with_phi): Likewise.
	* tree-object-size.c (addr_object_size): Complete MEM_REF
	handling, fix error in previous conversion.

2010-04-08  Richard Guenther  <rguenther@suse.de>

	* tree-vrp.c (vrp_stmt_computes_nonzero): Adjust for MEM_REF.
	* tree-pretty-print.c (dump_generic_node): Print MEM_REFs
	equivalent to plain old INDIRECT_REFs as * and -> again.
	* gimplify.c (gimple_fold_indirect_ref): Restore some
	foldings.

2010-04-08  Richard Guenther  <rguenther@suse.de>

	* tree-vrp.c (check_array_ref): Handle MEM_REF.
 
2010-04-08  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r158111.

2010-04-05  Richard Guenther  <rguenther@suse.de>

	Merge from trunk r157963.

2010-04-01  Richard Guenther  <rguenther@suse.de>

	* emit-rtl.c (set_mem_attributes_minus_bitpos): Handle MEM_REF.
	* tree-loop-distribution.c (generate_builtin): Exchange INDIRECT_REF
	handling for MEM_REF.

2010-04-01  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Re-instantiate
	TBAA code.
	(indirect_refs_may_alias_p): Likewise.
	(refs_may_alias_p_1): Move MEM_REF base offset handling to
	disambiguators.  Remove pointer SSA name def chasing code.

2010-03-31  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-loop-ivopts.c (find_interesting_uses_address):
	Replace INDIRECT_REF handling with MEM_REF handling.
	(get_computation_cost_at): Likewise.
	(tree_ssa_iv_optimize): Re-enable.

2010-03-31  Richard Guenther  <rguenther@suse.de>

	* tree-ssa.c (useless_type_conversion_p): Move restrict
	cast conversion check before void type check.

2010-03-31  Richard Guenther  <rguenther@suse.de>

	* tree-sra.c (create_access): Swap INDIRECT_REF handling for
	MEM_REF handling.
	(disqualify_base_of_expr): Likewise.
	(build_ref_for_offset_1): Re-instantiate.
	(build_ref_for_offset): Revert previous changes.
	(gate_intra_sra): Re-enable.
	(ptr_parm_has_direct_uses): Swap INDIRECT_REF handling for
	MEM_REF handling.
	(sra_ipa_modify_expr): Remove INDIRECT_REF handling.
	Use mem_ref_offset.
	(ipa_early_sra_gate): Re-enable.

2010-03-31  Richard Guenther  <rguenther@suse.de>

	* tree.h (mem_ref_offset): Declare.
	* tree.c (mem_ref_offset): New function.
	* tree-ssa-alias.c (refs_may_alias_p_1): Use it.
	* expr.c (get_inner_reference): Likewise.
	(expand_expr_addr_expr_1): Likewise.
	* tree-dfa.c (get_ref_base_and_extent): Likewise.

2010-03-30  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-ccp.c (may_propagate_address_into_dereference):
	Handle MEM_REF.
	* tree-ssa-forwprop.c (forward_propagate_addr_expr_1):
	Propagate through constant pointer adjustments.
	Re-instantiate more cases to propagate into dereferences.
	(tree_ssa_forward_propagate_single_use_vars): Adjust
	accordingly.
	* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Fix
	offset check.  Disable fancy access-path based TBAA disambiguation.
	(indirect_refs_may_alias_p): Likewise.

2010-03-30  Richard Guenther  <rguenther@suse.de>

	* gimplify.c (mark_addressable): Handle MEM_REF.
	(gimplify_modify_expr_to_memcpy): Properly build a MEM_REF tree.
 
2010-03-26  Richard Guenther  <rguenther@suse.de>

	* ipa-reference.c (mark_load): Use get_base_address.
	(mark_store): Likewise.

	* tree-ssa-ccp.c (maybe_fold_reference): Avoid introducing
	not useless type conversions.
	* ipa-pure-const.c (check_op): Handle MEM_REF.
	* cfgexpand.c (expand_debug_expr): Fold MEM_REFs in debug
	expressions to avoid handing non-canonicalized MEM_EXPRs
	to the alias-oracle from the scheduler.

2010-03-24  Richard Guenther  <rguenther@suse.de>

	* tree.c (recompute_tree_invariant_for_addr_expr): Handle MEM_REF.
	* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Re-instantiate
	code handling ALIGN_INDIRECT_REF and MISALIGNED_INDIRECT_REF.
	* tree-ssa-ccp.c (maybe_fold_reference): Drop code folding
	constant-offset component references into the MEM_REF constant
	offset.

2010-03-24  Richard Guenther  <rguenther@suse.de>

	* tree-object-size.c (compute_object_offset): Remove extra
	break stmt.

2010-03-24  Richard Guenther  <rguenther@suse.de>

	* tree-object-size.c (compute_object_offset): Handle MEM_REF.

2010-03-24  Richard Guenther  <rguenther@suse.de>

	* tree-ssa-ccp.c (gimplify_and_update_call_from_tree): Avoid
	inserting GIMPLE_NOPs into the IL.
	* tree-ssa-structalias.c (get_constraint_for_component_ref):
	Explicitly strip handled components and indirect references.

	* fold-const.c (operand_equal_p): Handle MEM_REF.
	(build_fold_addr_expr_with_type_loc): Only fold addresses of
	MEM_REF with zero constant offset.
	(fold_binary_loc): Do simple MEM_REF combining.
	* tree-ssa-ccp.c (ccp_fold): Replace INDIRECT_REF folding with
	MEM_REF.  Propagate &foo + CST as &MEM[&foo, CST].
	(fold_const_aggregate_ref): Handle MEM_REF.
	(ccp_fold_stmt): Use VIEW_CONVERT_EXPR on mismatched types.
	(maybe_fold_reference): Use fold_binary.
	(fold_gimple_assign): Simplify ADDR_EXPR handling.
	* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Replace
	INDIRECT_REF folding with MEM_REF.
	* gimple.c (is_gimple_invariant_address): &MEM[&foo, CST] is
	invariant.
	* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Handle
	MEM_REF.
	(vn_reference_lookup_3): Replace INDIRECT_REF handling with
	MEM_REF.
	* tree-ssa-pre.c (create_component_ref_by_pieces_1): Fold
	the build MEM_REF.
	* gimplify.c (gimplify_expr): Fold MEM_REFs before gimplifying
	them.  Gimplify operand zero to a register if it doesn't
	satisfy the constraint invariant address form.
	* tree-object-size.c (addr_object_size): Handle MEM_REFs
	instead of INDIRECT_REFs.
	* tree-predcom.c (ref_at_iteration): Handle MEM_REFs.

2010-03-22  Richard Guenther  <rguenther@suse.de>

	* fold-const.c (fold_unary_loc): Do not strip qualifiers when
	folding address expressions.
	* gimple.c (gimple_ior_addresses_taken_1): Use get_base_address.
	* tree-ssa-alias.c (decl_refs_may_alias_p): Do not use
	operand_equal_p to compare decls.
	(ptr_deref_may_alias_decl_p): Likewise.
	* tree-ssa-operands.c (get_asm_expr_operands): Simplify
	* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond):
	Handle reversed comparison ops.
	* tree-sra.c (asm_visit_addr): Use get_base_address.
	* ipa-prop.c (visit_store_addr_for_mod_analysis): Use
	get_base_address.
	* ipa-reference.c (mark_address): Use get_base_address.

	* alias.c (ao_ref_from_mem): Handle MEM_REF.
	(get_alias_set): Likewise.
	* expr.c (expand_assignment): Handle MEM_REF.
	(get_inner_reference): Likewise.
	(expand_expr_addr_expr_1): Likewise.
	(expand_expr_real_1): Likewise.
	* fold-const.c (build_fold_addr_expr_with_type_loc): Handle MEM_REF.
	(fold_comparison): Likewise.
	* gimple.c (is_gimple_addressable): Adjust for MEM_REF.
	(is_gimple_address): Likewise.
	(is_gimple_min_lval): Likewise.
	(get_base_address): Adjust for MEM_REFs with ADDR_EXPRs.
	(count_ptr_derefs): Adjust for MEM_REFs.
	(get_base_loadstore): Likewise.
	* gimplify.c (gimplify_init_ctor_preeval_1): Handle MEM_REF.
	(gimple_fold_indirect_ref): Adjust for MEM_REF.
	(gimplify_expr): Gimplify INDIRECT_REF to MEM_REF.  Handle
	MEM_REF.
	* tree-cfg.c (verify_expr): Handle MEM_REF.
	Disable TREE_ADDRESSABLE checking for now.
	(verify_types_in_gimple_min_lval): Handle MEM_REF.
	(verify_types_in_gimple_reference): Likewise.
	(verify_gimple_assign_single): Do not allow INDIRECT_REF.
	Handle MEM_REF.
	* tree-flow.h (get_addr_base_and_offset): Declare.
	(symbol_marked_for_renaming): Likewise.
	* tree-into-ssa.c (symbol_marked_for_renaming): Export.
	* tree-pretty-print.c (dump_generic_node): Handle MEM_REF.
	* tree-ssa-alias.c (ptr_deref_may_alias_decl_p): Adjust
	for MEM_REFs.
	(ptr_derefs_may_alias_p): Likewise.
	(ptr_deref_may_alias_ref_p_1): Likewise.
	(ao_ref_init_from_ptr_and_size): Likewise.
	(indirect_ref_may_alias_decl_p): Likewise.
	(indirect_refs_may_alias_p): Likewise.
	(refs_may_alias_p_1): Likewise.
	(ref_maybe_used_by_call_p_1): Likewise.
	(call_may_clobber_ref_p_1): Likewise.
	* tree-ssa-loop-im.c (for_each_index): Handle MEM_REF.
	(gen_lsm_tmp_name): Likewise.  Handle ADDR_EXPR.
	* tree-ssa-loop-ivopts.c (determine_base_object): Adjust
	for MEM_REF.
	(strip_offset_1): Likewise.
	(tree_ssa_iv_optimize): Disable for now.
	* tree-ssa-operands.c (opf_non_addressable, opf_not_non_addressable):
	New.
	(mark_address_taken): Handle MEM_REF.
	(get_indirect_ref_operands): Pass through opf_not_non_addressable.
	* tree-ssa-operands.c (get_asm_expr_operands): Pass
	opf_not_non_addressable.
	(get_expr_operands): Handle opf_[not_]non_addressable.
	Handle MEM_REF.
	* tree-ssa-pre.c (create_component_ref_by_pieces_1): Handle
	MEM_REF.
	* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Handle MEM_REF.
	* tree-ssa-sink.c (is_hidden_global_store): Handle MEM_REF
	and constants.
	* tree-ssa.c (useless_type_conversion_p): Make most pointer
	conversions useless.
	(execute_update_addresses_taken): Implement re-writing of MEM_REFs
	to SSA form.
	* tree.def (MEM_REF): New tree code.
	* tree-ssa-ccp.c (maybe_fold_reference): Fold MEM_REF back to
	usual references if possible.  Validize MEM_REF of invariant
	address bases.  Collapse component-refs around MEM_REF.
	(fold_gimple_assign): Fold the address of a MEM_REF to
	POINTER_PLUS_EXPR.
	* tree-dfa.c (get_ref_base_and_extent): Handle MEM_REF.
	(get_addr_base_and_offset): New function.
	* tree-nested.c (get_static_chain): Adjust for MEM_REF.
	(get_frame_field): Likewise.
	(get_nonlocal_debug_decl): Likewise.
	(convert_nonlocal_reference_op): Likewise.
	* tree-ssa-dce.c (ref_may_be_aliased): Handle MEM_REF.
	* tree-stdarg.c (check_all_va_list_escapes): Adjust for MEM_REF.
	* tree-vect-stmts.c (vectorizable_store): Adjust for MEM_REF.
	(vectorizable_load): Likewise.
	* tree.c (build_simple_mem_ref_loc): New function.
	* tree.h (build_simple_mem_ref_loc): Declare.
	(build_simple_mem_ref): Define.
	* cfgexpand.c (expand_debug_expr): Handle MEM_REF.
	* config/i386/i386.c (ix86_va_start): Adjust for MEM_REF.
	(ix86_canonical_va_list_type): Likewise.
	* dwarf2out.c (loc_list_from_tree): Handle MEM_REF.
	* tree-eh.c (tree_could_trap_p): Handle MEM_REF.
	* tree-sra.c (build_access_from_expr_1): Handle MEM_REF.
	(build_ref_for_offset_1): Remove.
	(build_ref_for_offset): Build MEM_REFs.
	(gate_intra_sra): Disable for now.
	(sra_ipa_modify_expr): Handle MEM_REF.
	(ipa_early_sra_gate): Disable for now.
	* tree-ssa-structalias.c (get_constraint_for_1): Handle MEM_REF.
	* tree-complex.c (extract_component): Handle MEM_REF.
	* tree-inline.c (declare_return_variable): Handle MEM_REF.
	* builtins.c (stabilize_va_list_loc): Work around very broken
	va_list_type_node design.
	* tree-data-ref.c (dr_analyze_indices): Handle MEM_REF.
	* cgraphunit.c (thunk_adjust): Adjust for MEM_REF.
	* omp-low.c (build_receiver_ref): Adjust for MEM_REF.
	(build_outer_var_ref): Likewise.
	(scan_omp_1_op): Likewise.
	(lower_rec_input_clauses): Likewise.
	(lower_lastprivate_clauses): Likewise.
	(lower_reduction_clauses): Likewise.
	(lower_copyprivate_clauses): Likewise.
	(expand_omp_atomic_pipeline): Likewise.
	(expand_omp_atomic_mutex): Likewise.
	(create_task_copyfn): Likewise.
	* tree-parloops.c (take_address_of): Adjust for MEM_REF.
	(eliminate_local_variables_1): Likewise.
	(create_call_for_reduction_1): Likewise.
	(create_loads_for_reductions): Likewise.
	(create_loads_and_stores_for_name): Likewise.
	* ipa-struct-reorg.c (decompose_indirect_ref_acc): Handle MEM_REF.
	(decompose_access): Likewise.
	(replace_field_acc): Likewise.
	(replace_field_access_stmt): Likewise.
	(insert_new_var_in_stmt): Likewise.
	(get_stmt_accesses): Likewise.
	* tree-mudflap.c (mf_xform_derefs_1): Adjust for MEM_REF.

	* gcc.c-torture/execute/20100316-1.c: New testcase.
