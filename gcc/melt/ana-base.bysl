;; -*- Lisp -*-
;; file ana-base.bysl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(comment "
    Copyright 2008, 2009 Free Software Foundation, Inc.
    Contributed by Basile Starynkevitch <basile@starynkevitch.net>

    This file is part of GCC.

    GCC is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3, or (at your option)
    any later version.

    GCC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GCC; see the file COPYING3.  If not see
    <http://www.gnu.org/licenses/>.
")

;; the copyright notice above apply both to ana-base.bysl and 
;; to the generated file  ana-base*.c

;; a class containing the analysis state
(defclass class_analysis_state
  :super class_proped
  :fields (
))


;;; primitive to access the gdbmstate

(defprimitive fetch_gdbmstate_constr (:cstring keystr) :value
  "(basilysgc_fetch_gdbmstate_const((" keystr ")))")

(defprimitive fetch_gdbmstate (key) :value
  "(basilysgc_fetch_gdbmstate((" key ")))")

(defprimitive put_gdbmstate_constr (:cstring keystr :value data) :void
  "basilysgc_put_gdbmstate_const((" keystr "), (basilys_ptr_t) (" data "))")

(defprimitive put_gdbmstate (key data) :void
  "basilysgc_put_gdbmstate((basilys_ptr_t)(" key "), (basilys_ptr_t)(" data "))")

(defun install_gcc_pass (pass)
  (assert_msg "check pass" (is_a pass class_gcc_pass))
  (mapstring_putstr (unsafe_get_field :sysdata_pass_dict initial_system_data)
		 (unsafe_get_field :named_name pass)
		 pass)
  (debug_msg pass "installed gcc pass")
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; gimple & tree related primitives

(defprimitive is_gimple (v) :long
  "(basilys_magic_discr((basilys_ptr_t)(" v ")) == OBMAG_GIMPLE)")

(defprimitive make_gimple (discr :gimple g) :value
  "(basilysgc_new_gimple((basilysobject_ptr_t)(" discr "),(" g ")))")

(defprimitive gimple_content (v) :gimple
  "(basilys_gimple_content((basilys_ptr_t)(" v ")))")

;; match a gimple value & extract the gimple of it
(defcmatcher gimpleval
  (gv)					;match & no ins
  (:gimple g) 				;outs
  gimpsta				;statesymb
  (					;test expansion
  "(basilys_magic_discr((basilys_ptr_t)(" gv ")) == OBMAG_GIMPLE)"
  )
  (					;fill expansion
   g " = basilys_gimple_content(((basilys_ptr_t)(" gv ")));"
   )
  (					;operator expansion
   "(basilysgc_new_gimple((basilysobject_ptr_t)NULL, (" g ")))"
   )
)

;; match a gimple single assign
(defcmatcher gimple_assign_single
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs				;first right operand
  )					;outs
  gimpasg
  (					;test expansion
   "(" ga " && gimple_assign_single_p (" ga "))"
   )
  (					;fill expansion
   lhs " = gimple_assign_lhs(" ga ");"
   rhs " = gimple_assign_rhs1(" ga ");"
   )
)


;; match a gimple cast assign
(defcmatcher gimple_assign_cast
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs				;first right operand
  )					;outs
  gimpasg
  (					;test expansion
   "(" ga " && gimple_assign_cast_p (" ga "))"
   )
  (					;fill expansion
   lhs " = gimple_assign_lhs(" ga ");"
   rhs " = gimple_assign_rhs1(" ga ");"
   )
)

;; match a gimple copy assign
(defcmatcher gimple_assign_copy
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs				;first right operand
  )					;outs
  gimpasg
  (					;test expansion
   "(" ga " && gimple_assign_copy_p (" ga "))"
   )
  (					;fill expansion
   lhs " = gimple_assign_lhs(" ga ");"
   rhs " = gimple_assign_rhs1(" ga ");"
   )
)

;; match a gimple copy assign with ssa name
(defcmatcher gimple_assign_ssa_name_copy
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs				;first right operand
  )					;outs
  gimpasg
  (					;test expansion
   "(" ga " && gimple_assign_ssa_name_copy_p (" ga "))"
   )
  (					;fill expansion
   lhs " = gimple_assign_lhs(" ga ");"
   rhs " = gimple_assign_rhs1(" ga ");"
   )
)

;; match a gimple unary nop assign
(defcmatcher gimple_assign_unary_nop
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs				;first right operand
  )					;outs
  gimpasg
  (					;test expansion
   "(" ga " && gimple_assign_unary_nop_p (" ga "))"
   )
  (					;fill expansion
   lhs " = gimple_assign_lhs(" ga ");"
   rhs " = gimple_assign_rhs1(" ga ");"
   )
)


;;;; match a gimple assign with addition ie X = Y + Z

(defcmatcher gimple_assign_plus
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs1
   :tree rhs2
   )
  gasplus
  (; test
   ga " && is_gimple_assign(" ga ") && gimple_expr_code(" ga ") == PLUS_EXPR"
   )
  (; fill
   lhs " = gimple_assign_lhs(" ga ");\n"
   rhs1 " = gimple_assign_rhs1(" ga ");\n"
   rhs2 " = gimple_assign_rhs2(" ga ");\n"
   ))


(defcmatcher gimple_assign_pointerplus
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs1
   :tree rhs2
   )
  gasplus
  (; test
   ga " && is_gimple_assign(" ga ") && gimple_expr_code(" ga ") == POINTER_PLUS_EXPR"
   )
  (; fill
   lhs " = gimple_assign_lhs(" ga ");\n"
   rhs1 " = gimple_assign_rhs1(" ga ");\n"
   rhs2 " = gimple_assign_rhs2(" ga ");\n"
   ))


;;;; match a gimple assign with multiplication ie X = Y * Z

(defcmatcher gimple_assign_mult
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs1
   :tree rhs2
   )
  gasmult
  (; test
   ga " && is_gimple_assign(" ga ") && gimple_expr_code(" ga ") == MULT_EXPR"
   )
  (; fill
   lhs " = gimple_assign_lhs(" ga ");\n"
   rhs1 " = gimple_assign_rhs1(" ga ");\n"
   rhs2 " = gimple_assign_rhs2(" ga ");\n"
   ))



;;; match a gimple assign binary op
(defcmatcher gimple_assign_binaryop
  (:gimple ga)				;match
  (:tree lhs				;left hand side
   :tree rhs1
   :tree rhs2
   :long opcode
   )
  gasplus
  (; test
   ga " && is_gimple_assign(" ga ") && gimple_num_ops(" ga ")>=3"
   )
  (; fill
   lhs " = gimple_assign_lhs(" ga ");\n"
   rhs1 " = gimple_assign_rhs1(" ga ");\n"
   rhs2 " = gimple_assign_rhs2(" ga ");\n"
   opcode " = gimple_assign_rhs_code(" ga ");\n"
   ))

;;;;;;;;;;;;;;;;
;;; match a gimple cond less or equal
(defcmatcher gimple_cond_lessequal
  (:gimple gc)
  (:tree lhs 
   :tree rhs
   :tree truelab
   :tree falselab
   )
  gimpcondle
  (; test expansion
   gc " && gimple_code(" gc ")==GIMPLE_COND "
      " && gimple_cond_code(" gc ")==LE_EXPR" 
   )
  (; fill expansion
   lhs "= gimple_cond_lhs(" gc ");\n"
   rhs "= gimple_cond_rhs(" gc ");\n"
   truelab "= gimple_cond_true_label(" gc ");\n"
   falselab "= gimple_cond_false_label(" gc ");\n"
   )
  )
;;;;;;;;;;;;;;;;
;;; match a gimple cond not equal
(defcmatcher gimple_cond_notequal
  (:gimple gc)
  (:tree lhs 
   :tree rhs
   :tree truelab
   :tree falselab
   )
  gimpcondle
  (; test expansion
   gc " && gimple_code(" gc ")==GIMPLE_COND "
      " && gimple_cond_code(" gc ")==NE_EXPR" 
   )
  (; fill expansion
   lhs "= gimple_cond_lhs(" gc ");\n"
   rhs "= gimple_cond_rhs(" gc ");\n"
   truelab "= gimple_cond_true_label(" gc ");\n"
   falselab "= gimple_cond_false_label(" gc ");\n"
   )
  )

;;; match a gimple cond greater
(defcmatcher gimple_cond_greater
  (:gimple gc)
  (:tree lhs 
   :tree rhs
   :tree truelab
   :tree falselab
   )
  gimpcondle
  (; test expansion
   gc " && gimple_code(" gc ")==GIMPLE_COND "
      " && gimple_cond_code(" gc ")==GT_EXPR" 
   )
  (; fill expansion
   lhs "= gimple_cond_lhs(" gc ");\n"
   rhs "= gimple_cond_rhs(" gc ");\n"
   truelab "= gimple_cond_true_label(" gc ");\n"
   falselab "= gimple_cond_false_label(" gc ");\n"
   )
  )


;;; match a gimple call to a direct function
(defcmatcher gimple_call
  (:gimple gc)
  (:tree lhs
	 fndecl
   )
  gimpcall
  (; test 
   gc " && gimple_code(" gc ")==GIMPLE_CALL"
   )
  (; fill
   lhs " = gimple_call_lhs(" gc ");\n"
   fndecl " = gimple_call_fndecl(" gc ");\n"
   ))

;;;;  match a gimple return
(defcmatcher gimple_return
  (:gimple gr)
  (:tree retval
   )
  gimpret
  (; test 
   gr " && gimple_code(" gr ")==GIMPLE_RETURN"
   )
  (; fill
   retval " = gimple_return_retval(" gr ");\n"
   ))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defprimitive is_gimpleseq (v) :long
  "(basilys_magic_discr((basilys_ptr_t)(" v ")) == OBMAG_GIMPLESEQ)")

(defprimitive make_gimpleseq (discr :gimpleseq g) :value
  "(basilysgc_new_gimpleseq((basilysobject_ptr_t)(" discr "),(" g ")))")

(defprimitive gimpleseq_content (v) :gimpleseq
  "(basilys_gimpleseq_content((basilys_ptr_t)(" v ")))")



(defprimitive is_tree (v) :long
  "(basilys_magic_discr((basilys_ptr_t)(" v ")) == OBMAG_TREE)")

(defprimitive make_tree (discr :tree g) :value
  "(basilysgc_new_tree((basilysobject_ptr_t)(" discr "),(" g ")))")

(defprimitive tree_content (v) :tree
  "(basilys_tree_content((basilys_ptr_t)(" v ")))")

(defprimitive inform_at_tree (:tree tr :cstring msg) :void
  ;; if DECL_P(tr) use DECL_SOURCE_LOCATION(tr)
  ;; if EXPR_P(tr) use EXPR_LOCATION(tr)
  ;; otherwise no location
  "inform((DECL_P(" tr ")? DECL_SOURCE_LOCATION(" tr 
  ") : EXPR_P(" tr ") ? EXPR_LOCATION(" tr ") : UNKNOWN_LOCATION), "
  msg ");"
)



;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;
;; pattern (tree_function_decl <funame> <initialtree>) match a tree for a function
;; declaration
(defcmatcher tree_function_decl 
  (:tree tr) 				;matched
  ;; output 
  (:cstring funame
   :tree initialdcl
   )
  treefun				;state symbol
  (; test expansion
   "((" tr ") && TREE_CODE(" tr ") == FUNCTION_DECL)"
   )
  (;; fill expansion
   funame "=NULL; "
   initialdcl "=NULL; "
   "if (DECL_NAME(" tr "))"
   funame "= IDENTIFIER_POINTER(DECL_NAME(" tr ")); "
   initialdcl  "=DECL_INITIAL(" tr "); "
   )
)

;;;;;;;;;;;;;;;;
;; similarily pattern (tree_variable_decl <funame>)
(defcmatcher tree_variable_decl 
  (:tree tr)
  (:cstring varname
   )
  treevar				;statesym
  (; test expansion
   "((" tr ") && TREE_CODE(" tr ") == VAR_DECL)"
   )
  (;; fill expansion
   varname "=NULL; "
   "if (DECL_NAME(" tr ")) "
   varname "= IDENTIFIER_POINTER(DECL_NAME(" tr ")); ")
)
	   
;;;;;;;;;;;;;;;;
;; pattern tree_block matches a block
(defcmatcher tree_block 
  (:tree tr)
  (					;output
   :tree trvars  trsubblocks 	 
   )
  treeblock				;statesym
  (; test expander
   "((" tr ") && TREE_CODE(" tr ") == BLOCK)"
   )
  (; fill expander
   trvars "= BLOCK_VARS(" tr "); "
   trsubblocks "=BLOCK_SUBBLOCKS(" tr ");"  
   ))

;;;;;;;;;;;;;;;;
;;; pattern tree_parm_decl matches a formal parameter declaration
(defcmatcher tree_parm_decl 
  (:tree tr)
  (					;output
   :tree trargtype  
   :cstring name
   )
  treeparmdecl				;statesym
  (; test expander
   "((" tr ") && TREE_CODE(" tr ") == PARM_DECL)"
   )
  (; fill expander
   trargtype "= DECL_ARG_TYPE(" tr "); \n"
   name "= DECL_NAME(" tr ") ? IDENTIFIER_POINTER(DECL_NAME(" tr ")) : NULL;\n"
   ))


;;;;;;;;;;;;;;;;
;;; pattern tree_integer_type
(defcmatcher tree_integer_type 
  (:tree tr)
  (					;output
   :cstring name
   :long min max
   )
  treeinty				;statesym
  (; test expander
   "((" tr ") && TREE_CODE(" tr ") == INTEGER_TYPE)"
   )
  (; fill expander
   "tree " treeinty "_ty=TYPE_NAME(" tr ");\n"
   "tree " treeinty "_mint=TYPE_MIN_VALUE(" tr ");\n"
   "tree " treeinty "_maxt=TYPE_MAX_VALUE(" tr ");\n"
   "if (" treeinty "_ty && TREE_CODE(" treeinty "_ty) == IDENTIFIER_NODE)\n"
   name " = IDENTIFIER_POINTER("treeinty "_ty);\n"
   "if (" treeinty "_mint && TREE_CODE(" treeinty "_mint) == INTEGER_CST)\n"
   min " = tree_low_cst(" treeinty "_mint,0);"
   "if (" treeinty "_maxt && TREE_CODE(" treeinty "_maxt) == INTEGER_CST)\n"
   max " = tree_low_cst(" treeinty "_maxt,0);"
   ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
(defprimitive is_basicblock (v) :long
  "(basilys_magic_discr((basilys_ptr_t)(" v ")) == OBMAG_BASICBLOCK)")

(defprimitive make_basicblock (discr :basicblock bb) :value
  "(basilysgc_new_basicblock((basilysobject_ptr_t)(" discr "),(" bb ")))")


(defprimitive basicblock_content (v) :basicblock
  "(basilys_basicblock_content((basilys_ptr_t)(" v ")))")

(defprimitive basicblock_gimpleseq (v) :gimpleseq
  "(basilys_basicblock_gimpleseq((basilys_ptr_t)(" v ")))")
  
(defprimitive basicblock_phinodes (v) :gimpleseq
  "(basilys_basicblock_phinodes((basilys_ptr_t)(" v ")))")
  
(defprimitive ppstrbuf_gimple (sbuf :long indent :gimple g) :void
  "basilysgc_ppstrbuf_gimple((basilys_ptr_t)(" sbuf 
  "), (int) (" indent "), (" g "))")

(defprimitive ppstrbuf_gimple_seq (sbuf :long indent :gimpleseq gseq) :void
  "basilysgc_ppstrbuf_gimple_seq((basilys_ptr_t)(" sbuf 
  "), (int) (" indent "), (" gseq "))")

(defprimitive ppstrbuf_tree (sbuf :long indent :tree t) :void
  "basilysgc_ppstrbuf_tree((basilys_ptr_t)(" sbuf 
  "), (int) (" indent "), (" t "))")

(defprimitive ppstrbuf_basicblock (sbuf :long indent :basicblock bb) :void
  "basilysgc_ppstrbuf_basicblock((basilys_ptr_t)(" sbuf 
  "), (int) (" indent "), (" bb "))")


;;;;;;;;;;;;;;;;

(defprimitive is_mapbasicblock (map) :long
  "(basilys_magic_discr((basilys_ptr_t)(" map ")) == OBMAG_MAPBASICBLOCKS)")
(defprimitive mapbasicblock_size (map) :long
  "(basilys_size_mapbasicblocks((struct basilysmapbasicblocks_st*)(" map ")))")
;; primitive to get the attribute count of a mapbasicblock
(defprimitive mapbasicblock_count (map) :long
  "(basilys_count_mapbasicblocks((struct basilysmapbasicblocks_st*)(" map ")))")
;; get an entry in a mapbasicblock from a C basicblock
(defprimitive mapbasicblock_get (map :basicblock bb) :value
  "(basilys_get_mapbasicblocks((" map
  "), (" bb ")))")
;; primitive for making a new map of basicblocks
(defprimitive make_mapbasicblock (discr :long len) :value
  " (basilysgc_new_mapbasicblocks( (basilysobject_ptr_t) (" discr "), (" len ")))")
;; primitive for putting into a map of basicblocks
(defprimitive mapbasicblock_put (map :basicblock key :value val) :void
  " basilys_put_mapbasicblocks( (struct basilysmapbasicblocks_st *) (" map "), (" key "), (basilys_ptr_t) (" val "))")
;; primivite for removing from a map of basicblocks
(defprimitive mapbasicblock_remove (map :basicblock key) :void
  " basilysgc_remove_mapbasicblocks( (struct basilysmapbasicblocks_st*) (" map "), (" key "))")

;; primitive to get the nth basicblock of a mapbasicblock
(defprimitive mapbasicblock_nth_attr (map :long n) :basicblock
  "(basilys_nthattr_mapbasicblocks((struct basilysmapbasicblocks_st*)(" map "), (int)(" n ")))")
;; primitive to get the nth value of a mapobject
(defprimitive mapbasicblock_nth_val (map :long n) :value
  "(basilys_nthval_mapbasicblocks((struct basilysmapbasicblocks_st*)(" map "), (int)(" n ")))")
(defciterator foreach_mapbasicblock 
  (bbmap)				; startformals
  eachmapbb 				;state symbol
  (:basicblock bbatt :value bbval)	;local formals
  (					;; before expansion
   "/*eachbbmap*/ int " eachmapbb "_rk=0;\n"
   "for (" eachmapbb "_rk=0; " 
   eachmapbb "_rk<basilys_size_mapbasicblocks((struct basilysmapbasicblocks_st*)(" bbmap ")); " eachmapbb "_rk++) {\n"
   "basic_block " eachmapbb "_bb=basilys_nthattr_mapbasicblocks((struct basilysmapbasicblocks_st*)(" bbmap "), " eachmapbb "_rk);\n"
   "if (!" eachmapbb "_bb) continue;\n"
   bbatt " = " eachmapbb "_bb;\n"
   bbval " =basilys_nthval_mapbasicblocks((struct basilysmapbasicblocks_st*)(" bbmap "), " eachmapbb "_rk);\n"
   )
  ( ;;after expansion
   "} /*endeachbbmap*/"
   )
  )

;;;;;;;;;;;;;;;;

(defprimitive is_maptree (map) :long
  "(basilys_magic_discr((basilys_ptr_t)(" map ")) == OBMAG_MAPTREES)")
(defprimitive maptree_size (map) :long
  "(basilys_size_maptrees((struct basilysmaptrees_st*)(" map ")))")
;; primitive to get the attribute count of a maptree
(defprimitive maptree_count (map) :long
  "(basilys_count_maptrees((struct basilysmaptrees_st*)(" map ")))")
;; get an entry in a maptree from a C tree
(defprimitive maptree_get (map :tree bb) :value
  "(basilys_get_maptrees((" map
  "), (" bb ")))")
;; primitive for making a new map of trees
(defprimitive make_maptree (discr :long len) :value
  " (basilysgc_new_maptrees( (basilysobject_ptr_t) (" discr "), (" len ")))")
;; primitive for putting into a map of trees
(defprimitive maptree_put (map :tree key :value val) :void
  " basilys_put_maptrees( (struct basilysmaptrees_st *) (" map "), (" key "), (basilys_ptr_t) (" val "))")
;; primivite for removing from a map of trees
(defprimitive maptree_remove (map :tree key) :void
  " basilysgc_remove_maptrees( (struct basilysmaptrees_st*) (" map "), (" key "))")

;; primitive to get the nth tree of a maptree
(defprimitive maptree_nth_attr (map :long n) :tree
  "(basilys_nthattr_maptrees((struct basilysmaptrees_st*)(" map "), (int)(" n ")))")
;; primitive to get the nth value of a mapobject
(defprimitive maptree_nth_val (map :long n) :value
  "(basilys_nthval_maptrees((struct basilysmaptrees_st*)(" map "), (int)(" n ")))")
(defciterator foreach_maptree 
  (trmap)				; startformals
  eachmaptr 				;state symbol
  (:tree tratt :value trval)	;local formals
  (					;; before expansion
   "/*eachtrmap*/ int " eachmaptr "_rk=0;\n"
   "for (" eachmaptr "_rk=0; " 
   eachmaptr "_rk<basilys_size_maptrees((struct basilysmaptrees_st*)(" trmap ")); " eachmaptr "_rk++) {\n"
   "tree " eachmaptr "_tr=basilys_nthattr_maptrees((struct basilysmaptrees_st*)(" trmap "), " eachmaptr "_rk);\n"
   "if (!" eachmaptr "_tr) continue;\n"
   tratt " = " eachmaptr "_tr;\n"
   trval " =basilys_nthval_maptrees((struct basilysmaptrees_st*)(" trmap "), " eachmaptr "_rk);\n"
   )
  ( ;;after expansion
   "} /*endeachtrmap*/"
   )
  )


;;;; boxed gimple debug
(defun dbgout_boxgimple_method (self dbgi :long depth)
  (assert_msg "check dbgi" (is_a dbgi class_debuginfo))
  (let ( (dis (discrim self)) 
	 (sbuf  (unsafe_get_field :dbgi_sbuf dbgi)) ) 
    (add2sbuf_strconst sbuf " ?/")
    (if (is_a dis class_named) (add2sbuf_string sbuf (unsafe_get_field :named_name dis)))
    (add2sbuf_strconst sbuf "/{ ")
    (ppstrbuf_gimple sbuf depth (gimple_content self))
    (add2sbuf_strconst sbuf "}/ ")
    )
  )
(install_method discr_gimple dbg_output dbgout_boxgimple_method)

;;;; boxed gimple seq debug
(defun dbgout_boxgimpleseq_method (self dbgi :long depth)
  (assert_msg "check dbgi" (is_a dbgi class_debuginfo))
  (let ( (dis (discrim self)) 
	 (sbuf  (unsafe_get_field :dbgi_sbuf dbgi)) ) 
    (add2sbuf_strconst sbuf " ?/")
    (if (is_a dis class_named) (add2sbuf_string sbuf (unsafe_get_field :named_name dis)))
    (add2sbuf_strconst sbuf "/{ ")
    (ppstrbuf_gimple_seq sbuf depth (gimpleseq_content self))
    (add2sbuf_strconst sbuf "}/ ")
    )
  )
(install_method discr_gimpleseq dbg_output dbgout_boxgimpleseq_method)

;;;; boxed tree debug
(defun dbgout_boxtree_method (self dbgi :long depth)
  (assert_msg "check dbgi" (is_a dbgi class_debuginfo))
  (let ( (dis (discrim self)) 
	 (sbuf  (unsafe_get_field :dbgi_sbuf dbgi)) ) 
    (add2sbuf_strconst sbuf " ?/")
    (if (is_a dis class_named) (add2sbuf_string sbuf (unsafe_get_field :named_name dis)))
    (add2sbuf_strconst sbuf "/{ ")
    (ppstrbuf_tree sbuf depth (tree_content self))
    (add2sbuf_strconst sbuf "}/ ")
    )
  )
(install_method discr_tree dbg_output dbgout_boxtree_method)

;;;; boxed basicblock debug
(defun dbgout_boxbasicblock_method (self dbgi :long depth)
  (assert_msg "check dbgi" (is_a dbgi class_debuginfo))
  (let ( (dis (discrim self)) 
	 (sbuf  (unsafe_get_field :dbgi_sbuf dbgi)) ) 
    (add2sbuf_strconst sbuf " ?/")
    (if (is_a dis class_named) (add2sbuf_string sbuf (unsafe_get_field :named_name dis)))
    (add2sbuf_strconst sbuf "/{ ")
    (ppstrbuf_basicblock sbuf depth (basicblock_content self))
    (add2sbuf_strconst sbuf "}/ ")
    )
  )
(install_method discr_basicblock dbg_output dbgout_boxbasicblock_method)



;;;; basicblockmap debug
(defun dbgout_mapbasicblock_method (self dbgi :long depth)
  (assert_msg "check dbgi" (is_a dbgi class_debuginfo))
  (assert_msg "check self" (is_mapbasicblock self))
  (let ( (dis (discrim self)) 
	 (:long mapcount (mapbasicblock_count self))
	 (sbuf  (unsafe_get_field :dbgi_sbuf dbgi)) ) 
    (add2sbuf_strconst sbuf " !bbmap.")
    (if (is_a dis class_named) (add2sbuf_string sbuf (unsafe_get_field :named_name dis)))
    (add2sbuf_strconst sbuf "/")
    (add2sbuf_longdec sbuf mapcount)
    (add2sbuf_strconst sbuf "!{ ")
    (foreach_mapbasicblock
     (self)
     (:basicblock bbatt :value bbval)
     (add2sbuf_indentnl sbuf (+i depth 1))
     (add2sbuf_strconst sbuf "*")
     (ppstrbuf_basicblock sbuf (+i depth 1) bbatt)
     (add2sbuf_strconst sbuf " == ")
     (dbg_out bbval dbgi (+i depth 2))
     )
    (add2sbuf_strconst sbuf "}!")
    (add2sbuf_indentnl sbuf depth)
    ))
(install_method discr_mapbasicblocks dbg_output dbgout_mapbasicblock_method)


;;;; treemap debug
(defun dbgout_maptree_method (self dbgi :long depth)
  (assert_msg "check dbgi" (is_a dbgi class_debuginfo))
  (assert_msg "check self" (is_maptree self))
  (let ( (dis (discrim self)) 
	 (:long mapcount (maptree_count self))
	 (sbuf  (unsafe_get_field :dbgi_sbuf dbgi)) ) 
    (add2sbuf_strconst sbuf " !bbmap.")
    (if (is_a dis class_named) (add2sbuf_string sbuf (unsafe_get_field :named_name dis)))
    (add2sbuf_strconst sbuf "/")
    (add2sbuf_longdec sbuf mapcount)
    (add2sbuf_strconst sbuf "!{ ")
    (foreach_maptree
     (self)
     (:tree tratt :value trval)
     (add2sbuf_indentnl sbuf (+i depth 1))
     (add2sbuf_strconst sbuf "*")
     (ppstrbuf_tree sbuf (+i depth 1) tratt)
     (add2sbuf_strconst sbuf " == ")
     (dbg_out trval dbgi (+i depth 2))
     )
    (add2sbuf_strconst sbuf "}!")
    (add2sbuf_indentnl sbuf depth)
    ))
(install_method discr_maptrees dbg_output dbgout_maptree_method)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;; G C C      P A S S E S 
;; the named_name of passes is builtin in gcc/basilys.c [lowercase]


;;;;;;;;;;;;;;;;;; lowering pass
;; the CFG is available, but the tree is not in SSA form
(definstance basilys_lowering_gccpass 
  class_gcc_pass
  :named_name (make_stringconst discr_string "basilys-lowering")
  :gccpass_data ()
)
(install_gcc_pass basilys_lowering_gccpass)

;;;;;;;;;;;;;;;;;; ipa (interprocedural analysis) pass
;; the CFG is available & tree is in SSA form
(definstance basilys_ipa_gccpass 
  class_gcc_pass
  :named_name (make_stringconst discr_string "basilys-ipa")
  :gccpass_gate ()
  :gccpass_exec ()
  :gccpass_data ()
)
(install_gcc_pass basilys_ipa_gccpass)


;;;;;;;;;;;;;;;;;; early optimisation pass
;; code in SSA
(definstance basilys_earlyopt_gccpass
  class_gcc_pass
  :named_name (make_stringconst discr_string "basilys-earlyopt")
  :gccpass_data ()
)
(install_gcc_pass basilys_earlyopt_gccpass)

;;;;;;;;;;;;;;;;;; late optimisation pass
;; code in SSA, soon to be removed
(definstance basilys_lateopt_gccpass class_gcc_pass
  :named_name (make_stringconst discr_string "basilys-lateopt")
  :gccpass_data ()
)
(install_gcc_pass basilys_lateopt_gccpass)


;;;;;;;;;;;;;;;;;; late ssa pass
;; code in SSA, soon to be removed
(definstance basilys_latessa_gccpass class_gcc_pass
  :named_name (make_stringconst discr_string "basilys-latessa")
  :gccpass_data ()
)
(install_gcc_pass basilys_latessa_gccpass)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; iterators needed in our analysis

;;; an iterator is simply something which translates to a for loop in
;;; C. It usually binds some variables (local to the iterated body)
;;; to some C stuff.

;;; Be careful to not declare any iterator related stuff in
;;; warmelt*.bysl file, because we want to be able to bootstrap
;;; Basilys/MELT (ie to generate the warmelt*.c files) even when GCC
;;; internal representation changes a little.

;;;;;;;;;;;;;;;;
;;;; iterate on every cgraph_node which is a function with a body
(defciterator each_cgraph_fun_body 
  ()					; startformals
  eachcgrfun 				;state symbol
  (:tree funtree :gimpleseq funbody)	;local formals
  (					;; before expansion
   "struct cgraph_node *" eachcgrfun "_nd=0; "
   "for (" eachcgrfun "_nd = cgraph_nodes; "
   eachcgrfun "_nd != 0; "
   eachcgrfun "_nd = " eachcgrfun "_nd->next) {\n"
   "tree " eachcgrfun "_dcl = 0;\n"
   "gimple_seq " eachcgrfun "_bdy = 0;\n"
  ; "if (flag_basilys_debug) "
  ; "{ debugeprintf(\"" eachcgrfun " nd=%p\", (void*)"  eachcgrfun "_nd);"
  ; "debug_cgraph_node(" eachcgrfun "_nd);};\n"
   eachcgrfun "_dcl = " eachcgrfun "_nd->decl;\n"
   "if (!" eachcgrfun "_dcl) continue;\n"
   "if (TREE_CODE(" eachcgrfun "_dcl) != FUNCTION_DECL) continue;\n"
   eachcgrfun "_bdy = gimple_body(" eachcgrfun "_dcl);\n"
   "if (!" eachcgrfun "_bdy) continue;\n"
   funtree " = " eachcgrfun "_dcl;\n"
   funbody " = " eachcgrfun "_bdy;\n"
   )
  ( ;;after expansion
   "}"
   )
  )


;;; iterate on every cgraph_node which is a function with a CFG and an
;;; entryblock
(defciterator each_cgraph_fun_entryblock
  ()					;startformals
  eachcgrblo				;state symbol
  (:tree funtree :basicblock funbb)	;local formals
  (					;before expansion
   "struct cgraph_node *" eachcgrblo "_nd=0; "
   "for (" eachcgrblo "_nd = cgraph_nodes; "
   eachcgrblo "_nd != 0; "
   eachcgrblo "_nd = " eachcgrblo "_nd->next) {\n"
   "tree " eachcgrblo "_dcl = 0;\n"
   "basic_block " eachcgrblo "_bb = 0;\n"
   "struct function *" eachcgrblo "_fun = 0;\n"
 ;  "if (flag_basilys_debug) "
 ;  "{ debugeprintf(\"" eachcgrblo " nd=%p\", (void*)"  eachcgrblo "_nd);"
 ;  "debug_cgraph_node(" eachcgrblo "_nd);};\n"
   eachcgrblo "_dcl = " eachcgrblo "_nd->decl;\n"
   "if (!" eachcgrblo "_dcl) continue;\n"
   "if (TREE_CODE(" eachcgrblo "_dcl) != FUNCTION_DECL) continue;\n"
   eachcgrblo "_fun = DECL_STRUCT_FUNCTION("eachcgrblo "_dcl);\n"
   "if (!"eachcgrblo "_fun) continue;\n"
   eachcgrblo "_bb = ENTRY_BLOCK_PTR_FOR_FUNCTION(" eachcgrblo "_fun);\n"
   "if (!" eachcgrblo "_bb) continue;\n"
   funtree " = " eachcgrblo "_dcl;\n"
   funbb " = " eachcgrblo "_bb;\n"
   )
  (					;after expansion
   "}"
   )
)


;;; iterate on evey basicblock of the current cfun
(defciterator each_bb_cfun
  ()					;startformals
  eachbbcfun				;state symbol
  (					;local formals
   :basicblock cfunbb 
   :tree cfundecl
   )	
  (					;before expansion
   "/*start " eachbbcfun "*/\n"
   "basic_block " eachbbcfun  "_bb=NULL;\n"
   ; "debugeprintf(\" each_bb_cfun " eachbbcfun " cfun=%p\", cfun);\n"
   "if (cfun) {\n"
   " " cfundecl " = cfun->decl;\n"
   " FOR_EACH_BB_FN("eachbbcfun "_bb, cfun) {"
   "  if (flag_basilys_debug) { debugeprintf(\"each_bb_cfun " 
   eachbbcfun  "_bb =%p\", (void*)" eachbbcfun "_bb);\n"
   "    debug_bb(" eachbbcfun "_bb);};\n"
   "  if (!" eachbbcfun "_bb) continue;\n"
   "  " cfunbb " = " eachbbcfun "_bb;\n"
   )
  (					;after expansion
   ; "debugeprintf(\" each_bb_cfun " eachbbcfun " done cfun=%p\", cfun);\n"
   "}}/*end " eachbbcfun "*/\n"
   )
  )


(defprimitive debugtree (:cstring msg :tree tr) :void
  " do{debugeprintfnonl(\"debugtree %s @%p /%s. \", " msg ", (void*)" tr ", "
  "(" tr ")?tree_code_name[TREE_CODE(" tr ")]:\"*niltree*\");\n"
  "if (flag_basilys_debug) debug_tree(" tr ");}while(0) "
)

(defprimitive debugtreecodenum  (:cstring msg :long opcod) :void
  "debugeprintf(\"debugtreecodenum %s #%ld %s\", " msg ", " opcod ", tree_code_name[" opcod "]);")

(defprimitive debuggimple(:cstring msg :gimple g) :void
  " do{debugeprintfnonl(\"debuggimple %s @%p /%s. \", " msg ", (void*)" g 
  ", ("g ")?gimple_code_name[gimple_code(" g ")]: \"*nil*\");"
  "if (" g " && gimple_location(" g ")) "
  "  debugeprintf_raw(\"{%s:%d} \", LOCATION_FILE(gimple_location(" g ")), LOCATION_LINE(gimple_location(" g ")));"
  "if (flag_basilys_debug) debug_gimple_stmt(" g ");}while(0) "
)

(defprimitive debuggimpleseq(:cstring msg :gimpleseq g) :void
  " do{debugeprintf(\"debuggimpleseq %s @%p\", " msg ", (void*)" g ");"
  "if (flag_basilys_debug) debug_gimple_seq(" g ");}while(0) "
)

(defprimitive debugbasicblock(:cstring msg :basicblock bb) :void
  " do{debugeprintf(\"debugbasicblock %s @%p\", " msg ", (void*)" bb ");"
  "if (flag_basilys_debug) debug_bb(" bb ");}while(0) "
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;; gimpleseq iteration
;;;; iterate on a gimpleseq
(defciterator each_in_gimpleseq
  (:gimpleseq gseq)			;start formals
  eachgimplseq
  (:gimple g)				;local formals
  ( ;;; before expansion
   "gimple_stmt_iterator gsi_" eachgimplseq ";\n"
   "if (" gseq ") for (gsi_" eachgimplseq " = gsi_start (" gseq
        "); !gsi_end_p (gsi_" eachgimplseq ");"
   " gsi_next (&gsi_" eachgimplseq ")) {\n"
    g " = gsi_stmt (gsi_" eachgimplseq ");"
   )
  ( ;;; after expansion
   "}"
   )
)

;;;; reverseiterate on a gimpleseq
(defciterator reveach_in_gimpleseq
  (:gimpleseq gseq)			;start formals
  eachgimplseq
  (:gimple g)				;local formals
  ( ;;; before expansion
   "gimple_stmt_iterator gsi_" eachgimplseq ";\n"
   "if (" gseq ") for (gsi_" eachgimplseq " = gsi_last (" gseq "); !gsi_end_p (gsi_" eachgimplseq ");"
   " gsi_prev (&gsi_" eachgimplseq ")) {\n"
    g " = gsi_stmt (gsi_" eachgimplseq ");"
   )
  ( ;;; after expansion
   "}"
   )
)

;; apply a function to each boxed gimple in a gimple seq
(defun do_each_gimpleseq (f :gimpleseq gseq)
  (each_in_gimpleseq 
   (gseq) (:gimple g)
   (let ( (gplval (make_gimple discr_gimple g)) )
     (f gplval)))
)


;; apply a function to each boxed gimple in a gimple seq
(defun do_reveach_gimpleseq (f :gimpleseq gseq)
  (reveach_in_gimpleseq 
   (gseq) (:gimple g)
   (let ( (gplval (make_gimple discr_gimple g)) )
     (f gplval)))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;; basicblock iteration

(defciterator eachgimple_in_basicblock
  (:basicblock bb)			;start formals
  eachgimpbb
  (:gimple g)				;local formals
  ( ;;; before expansion
   "/* " eachgimpbb "*/ gimple_stmt_iterator gsi_" eachgimpbb ";\n"
   "if (" bb ") for (gsi_" eachgimpbb " = gsi_start_bb (" bb
        "); !gsi_end_p (gsi_" eachgimpbb ");"
   " gsi_next (&gsi_" eachgimpbb ")) {\n"
    g " = gsi_stmt (gsi_" eachgimpbb ");"
   )
  ( ;;; after expansion
   "} /* end " eachgimpbb "*/"
   )
)

(defun do_eachgimple_in_basicblock (f :basicblock bb)
  (eachgimple_in_basicblock 
   (bb) (:gimple g)
   (let ( (gplval (make_gimple discr_gimple g)) )
     (f gplval)))
   )

;;;;;;;;;;;;;;;;;;;;;;;;;;;; gimpleseq iteration
;;;; iterate on a function arguments
(defciterator each_arg_in_fundecl
  ( :tree fundeclt )			;start formals
  eachargfundecl
  ( :tree argdclt )				;local formals
  ( ;;; before expansion
   "/*eacharginfunctiondecl*/"
   "tree " eachargfundecl "_tr=NULL;\n"
   "if ((" fundeclt ") && TREE_CODE(" fundeclt ") == FUNCTION_DECL)\n"
   "for (" eachargfundecl "_tr = DECL_ARGUMENTS(" fundeclt "); "
           eachargfundecl "_tr != NULL;"
           eachargfundecl "_tr = TREE_CHAIN(" eachargfundecl "_tr)) {\n"
	   argdclt " = " eachargfundecl "_tr;" 
   )
  ( ;;; after expansion
   "}/*end eacharginfunctiondecl*/ "
   )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; small analysis

(defclass class_smallcfun
  :super class_named
  :fields (scfun_decl
	   scfun_entbb
	   ))

(defclass class_smallbb
  :super class_proped
  :fields (sbb_bbcont
	   ))

(defclass class_smallanalysis 
  :super class_analysis_state
  :fields (sman_cfuns			;list of class_smallcfun-s
	   sman_cfundict		;dict of class_smallcfun-s
	   sman_bbtable			;hashtable bb -> class_smallbb
	   ))

(defclass class_smallabstractenv
  :super class_proped
  :fields (abenv_maptree		;a maptree C ident -> abstract values
	   abenv_parenv			;the parent abstract env
))

(defun put_abstrenv (abenv :tree tr :value val)
  (assert_msg "check abenv" (is_a abenv class_smallabstractenv))
  (assert_msg "check tr" tr)
  (maptree_put (get_field :abenv_maptree abenv) tr val)
)

(defun get_abstrenv (abenv :tree tr)
  (assert_msg "check abenv" (is_a abenv class_smallabstractenv))
  (maptree_get (get_field :abenv_maptree abenv) tr)
)

(defun fresh_abstrenv (abpar)
  (assert_msg "check abpar" (is_a abpar class_smallabstractenv))
  (let ( (newabenv (instance class_smallabstractenv
			     :abenv_maptree (make_maptree discr_maptrees 10)
			     :abenv_parenv abpar)) )
    (return newabenv)
))


(definstance initial_smallabstractenv class_smallabstractenv
  :abenv_maptree (make_maptree discr_maptrees 20))

(definstance smallana_cont class_container)


(defun smallana_cfun_entbb (sman :tree decltree :basicblock bbent)
  (debug_msg sman "smallana_cfun_entbb sman")
  (debugtree "smallana_cfun_entbb start decltree" decltree)
  (match 
   decltree
   ;; the joker below is acutally nil
   ( ?(tree_function_decl ?funam ?(tree_block ?treevars ?_))
      (debugtree "smallana_cfun_entbb treevars of function" treevars)
      ;;;;;
      (each_arg_in_fundecl
       (decltree)
       (:tree argdtree)
       (debugtree "smallana_cfun_entbb argdtree" argdtree)
       (match 
	argdtree
	( ?(tree_parm_decl ?(as ?argdtype ?(tree_integer_type ?typname ?imin ?imax)) ?argname)
	   (debugtree "smallana_cfun_entbb integer argdtype" argdtype)
	   (debugcstring "smallana_cfun_entbb integer argname" argname)
	   (debugcstring "smallana_cfun_entbb integer typname" typname)
	   (messagenum_dbg  "smallana_cfun_entbb integer imin" imin)
	   (messagenum_dbg  "smallana_cfun_entbb integer imax" imax)
	   )
	( ?(tree_parm_decl ?argdtype ?argname)
	   (debugtree "smallana_cfun_entbb argdtype" argdtype)
	   (debugcstring "smallana_cfun_entbb argname" argname)
	   )
	( ?_ 
	  (assert_msg "unexpected argdtree" ())
	  )
	)
       (debugtree "smallana_cfun_entbb argdecltree" argdtree)
       )
      ;;;;
      (let ( (fname (make_stringconst discr_string funam)) 
	    (scf (instance class_smallcfun
			    :named_name fname
			    :scfun_decl (make_tree discr_tree decltree)
			    :scfun_entbb (make_basicblock discr_basicblock bbent)))
	     )
	(debug_msg fname "smallana_cfun_entbb fname")
	(list_append (get_field :sman_cfuns sman) scf)
	(mapstring_putstr (get_field :sman_cfundict sman) fname scf)
	))
   ( ?(tree_variable_decl ?_)
      (debugtree  "smallana_cfun_entbb decl of variable" decltree)
      (inform_at_tree decltree "smallana: global variable not analyzed")
      )
   ( ?_
     (debugtree "smallana_cfun_entbb other decl" decltree)
     (inform_at_tree decltree "smallana: other declaration not analyzed")
     (assert_msg "smallana_cfun_entbb @@UNIMPLEMENTED DECL" ())
     () )
   )
  (debug_msg sman "smallana_cfun_entbb sman")
  )


(defun smallana_gimple (sman :gimple g)
  (debuggimple "smallana_gimple gimple" g)
  (match 
   g
   ( ?(gimple_assign_single ?lhs ?rhs)
      (debugtree "smallana_gimple gimple_assign_single lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_single rhs" rhs)
      )
   ( ?(gimple_assign_cast ?lhs ?rhs)
      (debugtree "smallana_gimple gimple_assign_cast lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_cast rhs" rhs)
      )
   ( ?(gimple_assign_copy ?lhs ?rhs)
      (debugtree "smallana_gimple gimple_assign_copy lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_copy rhs" rhs)
      )
   ( ?(gimple_assign_ssa_name_copy ?lhs ?rhs)
      (debugtree "smallana_gimple gimple_assign_ssa_name_copy lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_ssa_name_copy rhs" rhs)
      )
   ( ?(gimple_assign_unary_nop ?lhs ?rhs)
      (debugtree "smallana_gimple gimple_assign_unary_nop lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_unary_nop rhs" rhs)
      )
   ( ?(gimple_assign_plus ?lhs ?rhs1 ?rhs2)
      (debugtree "smallana_gimple gimple_assign_plus lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_plus rhs1" rhs1)
      (debugtree "smallana_gimple gimple_assign_plus rhs2" rhs2)
      )
   ( ?(gimple_assign_pointerplus ?lhs ?rhs1 ?rhs2)
      (debugtree "smallana_gimple gimple_assign_pointerplus lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_pointerplus rhs1" rhs1)
      (debugtree "smallana_gimple gimple_assign_pointerplus rhs2" rhs2)
      )
   ( ?(gimple_assign_mult ?lhs ?rhs1 ?rhs2)
      (debugtree "smallana_gimple gimple_assign_mult lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_mult rhs1" rhs1)
      (debugtree "smallana_gimple gimple_assign_mult rhs2" rhs2)
      )
   ( ?(gimple_assign_binaryop ?lhs ?rhs1 ?rhs2 ?opcod)
      (debugtree "smallana_gimple gimple_assign_binaryop lhs" lhs)
      (debugtree "smallana_gimple gimple_assign_binaryop rhs1" rhs1)
      (debugtree "smallana_gimple gimple_assign_binaryop rhs2" rhs2)
      (debugtreecodenum  "smallana_gimple gimple_assign_binaryop opcod" opcod)
      (assert_msg "smallana_gimple gimple_assign_binaryop unhandled" ())
      )
   ( ?(gimple_cond_lessequal ?lhs ?rhs ?truelab ?falselab)
      (debugtree "smallana_gimple gimple_cond_lessequal lhs" lhs)
      (debugtree "smallana_gimple gimple_cond_lessequal rhs" rhs)
      (debugtree "smallana_gimple gimple_cond_lessequal truelab" truelab)
      (debugtree "smallana_gimple gimple_cond_lessequal falselab" falselab)
      )
   ( ?(gimple_cond_notequal ?lhs ?rhs ?truelab ?falselab)
      (debugtree "smallana_gimple gimple_cond_notequal lhs" lhs)
      (debugtree "smallana_gimple gimple_cond_notequal rhs" rhs)
      (debugtree "smallana_gimple gimple_cond_notequal truelab" truelab)
      (debugtree "smallana_gimple gimple_cond_notequal falselab" falselab)
      )
   ( ?(gimple_cond_greater ?lhs ?rhs ?truelab ?falselab)
      (debugtree "smallana_gimple gimple_cond_greater lhs" lhs)
      (debugtree "smallana_gimple gimple_cond_greater rhs" rhs)
      (debugtree "smallana_gimple gimple_cond_greater truelab" truelab)
      (debugtree "smallana_gimple gimple_cond_greater falselab" falselab)
      )
   ( ?(gimple_call ?lhs ?fndecl)
      (debugtree "smallana_gimple gimple_call lhs" lhs)
      (debugtree "smallana_gimple gimple_call fndecl" fndecl)
      )
   ( ?(gimple_return ?retval)
      (debugtree "smallana_gimple gimple_return retval" retval)
      )
   ( ?_
     (debuggimple "smallana_gimple other!gimple" g)
     (assert_msg "smallana_gimple @@ UNIMPLEMENTED GIMPLE" ())
     )
   )
  )

(defun smallana_bb (sman :basicblock bb)
  (debug_msg sman "smallana_bb start sman")
  (assert_msg "check sman" (is_a sman class_smallanalysis))
  (debugbasicblock "smallana_bb bb" bb)
  (let ( (bbtab (get_field :sman_bbtable sman)) 
	 )
    (assert_msg "check bbtab" (is_mapbasicblock bbtab))
    (let ( (sbb (mapbasicblock_get bbtab bb)) )
      (if sbb (return))
      (setq sbb (instance class_smallbb
			  :sbb_bbcont (make_basicblock discr_basicblock bb)))
      (mapbasicblock_put bbtab bb sbb)
      (eachgimple_in_basicblock 
       (bb)
       (:gimple g)
       (smallana_gimple sman g)
       )
      (debug_msg sman "smallana_bb end sman")
      )))


(defun smallana_cfun_bb (sman :tree cfdecl :basicblock fbb)
  (debug_msg sman "smallana_bb_cfun start sman")
  (debugtree "smallana_bb_cfun cfdecl" cfdecl)
  (assert_msg "check sman" (is_a sman class_smallanalysis))
  (match cfdecl
	 ( ?(as ?decltree ?(tree_function_decl ?funam ?(tree_block ?treevars ?_)))
	    (debugtree "smallana_bb_cfun decltree" decltree)
	    (debugtree "smallana_bb_cfun treevars of function" treevars)
	    (debugcstring "smallana_cfun_entrybb funam" funam)
	    ))
  (smallana_bb sman fbb)
  (debug_msg sman "smallana_bb_cfun end sman")
  )

(defun smallana_interpret (sman)
  (debug_msg sman "smallana_interpret sman")
  (assert_msg "check sman" (is_a sman class_smallanalysis))
  (let ( (mainf (mapstring_rawget (get_field :sman_cfundict sman) "main")) )
    (debug_msg mainf "smallana_interpret mainf")
    (assert_msg "check mainf" (is_a mainf class_smallcfun))
    )
)

;;; our small analysis gate for latessa
;; for some reason, the smallana is triggered twice, and the first run
;; is enough...
(defun smallana_latessagate (latessapass)
  (debug_msg smallana_cont "smallana_latessagate smallana_cont at start")
  (let ( (oldsman (get_field  :container_value smallana_cont)) )
    (if oldsman
	(progn
	  (debug_msg oldsman "smallana_latessagate already got oldsman")
	(return ()))
  (return smallana_cont)
)))


;;; apparently only the entrybb loop matter in the latessa pass...
(defun smallana_latessaexec (latessapass)
  (debug_msg latessapass "smallana_latessaexec start")
  (let ( (cfuns (make_list discr_list))
	 (cfundict (make_mapstring discr_mapstrings 20))
	 (sman (instance class_smallanalysis
			 :sman_cfuns cfuns
			 :sman_cfundict cfundict
			 :sman_bbtable (make_mapbasicblock discr_mapbasicblocks 20)
			 )) 
	 )
    (debug_msg sman "smallana_latessaexec sman at start")
    ;; don't bother do_each_cfun_body here.. it is not done...
    (each_cgraph_fun_entryblock
     ()
     (:tree decl :basicblock bbent)
     (debugtree "smallana exec eachcgraph decl" decl)
     (smallana_cfun_entbb sman decl bbent)
     )
    ;;
    (debug_msg sman "smallana_latessaexec sman after eachentrybb")
    ;;
    (each_bb_cfun
     ()
     (:basicblock cfbb :tree cfdecl)
     (smallana_cfun_bb sman cfdecl cfbb)
     )
    ;;
    (debug_msg sman "smallana_latessaexec sman after eachbbcfun")
    ;;
    (smallana_interpret sman)
    ;;
    (put_fields  smallana_cont :container_value sman)
    (debug_msg smallana_cont "smallana_latessaexec final smallana_cont")
    ))

;;; our small analysis command -fbasilys=smallana
(defun smallana_command (dispatcher arg secarg moduldata)
  ;; fill the latessa pass
  (put_fields basilys_latessa_gccpass
  :gccpass_gate smallana_latessagate
  :gccpass_exec smallana_latessaexec)
  (debug_msg basilys_latessa_gccpass "smallana sets basilys_latessa_gccpass")
  (return dispatcher)			;return non-nil to continue compilation
  )

(initial_command_install smallana_command "smallana")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(export_values
 basilys_earlyopt_gccpass
 basilys_ipa_gccpass
 basilys_lateopt_gccpass
 basilys_latessa_gccpass
 basilys_lowering_gccpass
 each_cgraph_fun_body
 each_cgraph_fun_entryblock
 each_in_gimpleseq
 fetch_gdbmstate
 fetch_gdbmstate_constr
 install_gcc_pass
 put_gdbmstate
 put_gdbmstate_constr
 reveach_in_gimpleseq
)

(export_class
 class_analysis_state
 class_smallcfun
 class_smallanalysis
)
;; eof ana-base.bysl