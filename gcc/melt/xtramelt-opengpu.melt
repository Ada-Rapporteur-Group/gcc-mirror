;; -*- Lisp -*-
;; file xtramelt-opengpu.melt
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(comment "***
    Copyright 2010 Free Software Foundation, Inc.
    Contributed by Basile Starynkevitch <basile@starynkevitch.net>
    [funded within OpenGPU french project: http://opengpu.net/ ]

    This file is part of GCC.

    GCC is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3, or (at your option)
    any later version.

    GCC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GCC; see the file COPYING3.  If not see
    <http://www.gnu.org/licenses/>.
***")


(defun opengpudetect_gate (pass)
  (debug_msg pass "opengpudetect_gate start")
  (debug_msg pass "opengpudetect_gate end")
  (return :true)
)

(defun opengpudetect_exec (pass)
  (debug_msg pass "opengpudetect_exec start")
  (debug_msg (get_field :sysdata_dumpfile initial_system_data)
	     "opengpudetect_exec ?dumpfile?")
  (debug_msg (get_field :sysdata_stderr initial_system_data)
	     "opengpudetect_exec stderr")
  (let ( (:long passcounter 0)
	 )
    (code_chunk 
     incrpasscount #{ /* $INCRPASSCOUNT */
     static long $INCRPASSCOUNT#_count;
     $INCRPASSCOUNT#_count++;
     $PASSCOUNTER = $INCRPASSCOUNT#_count;
     }#)
  (code_chunk 
   dbgcfun #{ /* $dbgcfun :: */
   debugeprintf("opengpudetect_exec start cfun=%p cfg=%p passcounter #%ld", 
		(void*)cfun, cfun?cfun->cfg:NULL, $PASSCOUNTER) ; 
   gcc_assert (cfun == NULL);
   }#) 
  (debug_msg pass "opengpudetect_exec before each_cgraph_fun_entryblock")
  (each_cgraph_fun_entryblock
   ()
   (:tree fundcl :basic_block funbb)
   (debugtree "opengpudetect_exec fundcl" fundcl)
   (debugbasicblock "opengpudetect_exec funbb" funbb)
   )
  (debug_msg pass "opengpudetect_exec after each_cgraph_fun_entryblock")
  ;;
  (debug_msg pass "opengpudetect_exec end")
  (return :true)
))


;; the opengpu passes translate some Gimple into OpenCL.
(defun install_opengpu_passes ()
  (let ( (opengpudetect_pass
	  (instance class_gcc_simple_ipa_pass
		    :named_name '"meltopengpu_detect"
		    :gccpass_gate opengpudetect_gate
		    :gccpass_exec opengpudetect_exec
		    :gccpass_data (make_maptree discr_map_trees 100)
		    :gccpass_properties_required ()
		    :gccpass_todo_flags_finish '"dump_func"
		    ))
	 )
;;; register our pass after the "tree_profile_ipa" pass from
;;; gcc/tree-profile.c
    (install_melt_gcc_pass opengpudetect_pass "after" "tree_profile_ipa" 0)
    ))

(defun opengpu_docmd (cmd moduldata)
  (let ( (:long optimlevel 0)
	 )
    (code_chunk getoptimlevel
	   #{ /* $GETOPTIMLEVEL */
	   $OPTIMLEVEL = (long) optimize ;
	   }#)
    (if (<i optimlevel 2)
	(warningmsg_plain 
	 "opengpu MELT mode requires -O2 optimization at least")
      (progn
	(debug_msg (get_field :sysdata_dumpfile initial_system_data)
		   "opengpu_docmd ?dumpfile?")
	(debug_msg (get_field :sysdata_stderr initial_system_data)
		   "opengpu_docmd ?stderr?")
	(install_opengpu_passes)
	(return :true)))
    ))

(definstance opengpu_mode
  class_melt_mode
  :named_name '"opengpu"
  :meltmode_help '"transforming some numerical loops [with -O2 at least]
into OpenCL code running on GPU"
  :meltmode_fun opengpu_docmd
)

(install_melt_mode opengpu_mode)
;; eof $Id$
