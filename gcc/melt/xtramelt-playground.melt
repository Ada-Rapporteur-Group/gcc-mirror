;; -*- Lisp -*-
;; file xtramelt-playground.melt
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(comment "***
    Copyright 2013 Free Software Foundation, Inc.
    Contributed by Basile Starynkevitch <basile@starynkevitch.net>

    This file is part of GCC.

    GCC is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3, or (at your option)
    any later version.

    GCC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GCC; see the file COPYING3.  If not see
    <http://www.gnu.org/licenses/>.
***")

;; this file should not contain useful things on MELT plugin
;; releases.  It is a playground for testing purposes.


;;;;;;; variadic diagnostics
(defvar diagv_gimple)
(defvar diagv_gimple_seq)
(defvar diagv_tree)
(defvar diagv_basic_block)
(defvar diagv_edge)
(defun play_error (loc :cstring fmt :rest) 
  :doc #{Variadic function to emit an error message. The $FMT format
  string may contain @code{$$1} ... @code{$$9} to refer to the first,
  ... nineth argument (after $FMT).}#
  (debug "play_error start loc=" loc " fmt=" fmt)
  (let ( (vect (make_multiple discr_multiple 9))
	 (:long nbargs 0)
	 (diagstate (diagnostic_args_macro nbargs vect))
	 )
    (debug "play_error diagstate=" diagstate)
    (let ( (diagmsg (diagnostic_expand_message diagstate fmt))
	   )
      (debug "play_error diagmsg=" diagmsg)
      (assert_msg "check diagmsg" (is_string diagmsg) diagmsg)
      (code_chunk error_chk
		  #{ /* start play_error $ERROR_CHK */
		  melt_error_str (($LOC), melt_string_str ($DIAGMSG), NULL);
		  /* end play_error $ERROR_CHK */ }#)
    )))					;end PLAY_ERROR


(defun play_foo (x) 
  (let ( (:long cnt 0)
	 )
    (code_chunk cntchk #{ /*play_foo $CNTCHK */ static long thecnt; thecnt++; 
		$CNT = thecnt; }#
		)
    (when (is_integerbox x)
	(let ( (xi (get_int x))
	       )
	  (code_chunk intchk #{ /* play_foo $INTCHK */ 
		      printf("**playfoo cnt#%ld integer xi=%ld\n", $CNT, $XI);
		      }#)
	  (return (tuple '"integerx" (box (+i xi 2)))))
	)
    (code_chunk otherchk #{ /* play_foo $OTHERCHK */
		printf("**playfoo cnt#%ld other\n", $CNT);
		}#)
    (return (tuple '"otherx" x))))
(export_values play_foo play_error)
		
;; eof xtramelt-playground.melt
