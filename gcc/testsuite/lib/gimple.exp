# Copyright (C) 2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# This file was written by Rob Savoye (rob@cygnus.com)
# Many modifications by Jeffrey Wheat (cassidy@cygnus.com)
# With modifications by Mike Stump <mrs@cygnus.com>.

#
# gimple support library routines
#
load_lib prune.exp
load_lib gcc-defs.exp
load_lib timeout.exp
load_lib target-libpath.exp

#
# GIMPLEC_UNDER_TEST is the compiler under test.
#


set gimple_compile_options ""

#
# gimple_version -- extract and print the version number of the compiler
#

proc gimple_version { } {
    global GIMPLEC_UNDER_TEST

    gimple_init

    # ignore any arguments after the command
    set compiler [lindex $GIMPLEC_UNDER_TEST 0]
    
    # verify that the compiler exists
    if { [is_remote host] || [which $compiler] != 0 } then {
	set tmp [remote_exec host "$compiler -v"]
	set status [lindex $tmp 0]
	set output [lindex $tmp 1]
	regexp " version \[^\n\r\]*" $output version
	if { $status == 0 && [info exists version] } then {
	    if [is_remote host] {
		clone_output "$compiler $version\n"
	    } else {
		clone_output "[which $compiler] $version\n"
	    }
	} else {
	    clone_output "Couldn't determine version of [which $compiler]\n"
	}
    } else {
	# compiler does not exist (this should have already been detected)
	warning "$compiler does not exist"
    }
}

#
# gimple_include_flags -- provide new version of gimple_include_flags
# (originally from libgloss.exp) which knows about the gcc tree structure
#
proc gimple_include_flags { paths } {
    global srcdir
    global TESTING_IN_BUILD_TREE

    set flags ""

    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {
      return "${flags}"
    }

    set gccpath ${paths}

    return "$flags"
}

#
# gimple_link_flags -- provide new version of gimple_link_flags
# (originally from libgloss.exp) which knows about the gcc tree structure
#

proc gimple_link_flags { paths } {
    global srcdir
    global ld_library_path
    global GIMPLEC_UNDER_TEST
    global shlib_ext

    set gccpath ${paths}
    set libio_dir ""
    set flags ""
    set ld_library_path "."

    set shlib_ext [get_shlib_extension]
    verbose "shared lib extension: $shlib_ext"

    if { $gccpath != "" } {
      if [file exists "${gccpath}/libgimple/libgimple.a"] {
          append flags "-L${gccpath}/libgimple "
          append ld_library_path ":${gccpath}/libgimple"
      }
      if [file exists "${gccpath}/libiberty/libiberty.a"] {
          append flags "-L${gccpath}/libiberty "
      }
      append ld_library_path [gcc-set-multilib-library-path $GIMPLEC_UNDER_TEST]
    } else {
      global tool_root_dir
      set libiberty [lookfor_file ${tool_root_dir} libiberty]
      if { $libiberty != "" } {
          append flags "-L${libiberty} "
      }
      set librx [lookfor_file ${tool_root_dir} librx]
    }

    set_ld_library_path_env_vars

    return "$flags"
}

#
# gimple_init -- called at the start of each subdir of tests
#

proc gimple_init { args } {
    global subdir
    global gimple_initialized
    global base_dir
    global tmpdir
    global libdir
    global gluefile wrap_flags
    global objdir srcdir
    global ALWAYS_GIMPLEFLAGS
    global GIMPLEFLAGS
    global TOOL_EXECUTABLE TOOL_OPTIONS
    global GIMPLEC_UNDER_TEST
    global TESTING_IN_BUILD_TREE
    global gcc_warning_prefix
    global gcc_error_prefix
    global TEST_ALWAYS_FLAGS

    # We set LC_ALL and LANG to C so that we get the same error messages as expected.
    setenv LC_ALL C
    setenv LANG C

    # Many hosts now default to a non-ASCII C locale, however, so
    # they can set a charset encoding here if they need.
    if { [ishost "*-*-cygwin*"] } {
      setenv LC_ALL C.ASCII
      setenv LANG C.ASCII
    }

    if ![info exists GIMPLEC_UNDER_TEST] then {
	if [info exists TOOL_EXECUTABLE] {
	    set GIMPLEC_UNDER_TEST $TOOL_EXECUTABLE
	} else {
	    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {
		set GIMPLEC_UNDER_TEST [transform gimplec]
	    } else {
		set GIMPLEC_UNDER_TEST [findfile $base_dir/../../xgcc "$base_dir/../../xgcc -B$base_dir/../../" [findfile $base_dir/xgcc "$base_dir/gimple -B$base_dir/" [transform gimplec]]]
	    }
	}
    }

    if ![is_remote host] {
	if { [which $GIMPLEC_UNDER_TEST] == 0 } then {
	    perror "GIMPLEC_UNDER_TEST ($GIMPLEC_UNDER_TEST) does not exist"
	    exit 1
	}
    }
    if ![info exists tmpdir] {
	set tmpdir "/tmp"
    }

    if [info exists gluefile] {
	unset gluefile
    }

    gimple_maybe_build_wrapper "${tmpdir}/gimple-testglue.o" "-fexceptions"

    if {![info exists GIMPLEFLAGS]} {
	set GIMPLEFLAGS ""
    }

    set ALWAYS_GIMPLEFLAGS ""

    # TEST_ALWAYS_FLAGS are flags that should be passed to every
    # compilation command.  They are passed first to allow individual
    # tests to override them.
    if [info exists TEST_ALWAYS_FLAGS] {
	lappend ALWAYS_GIMPLEFLAGS "additional_flags=$TEST_ALWAYS_FLAGS"
    }

    if ![is_remote host] {
	if [info exists TOOL_OPTIONS] {
	    lappend ALWAYS_GIMPLEFLAGS "additional_flags=[gimple_include_flags [get_multilibs ${TOOL_OPTIONS}] ]"
	    lappend ALWAYS_GIMPLEFLAGS "ldflags=[gimple_link_flags [get_multilibs ${TOOL_OPTIONS}] ]"
	} else {
	    lappend ALWAYS_GIMPLEFLAGS "additional_flags=[gimple_include_flags [get_multilibs] ]"
	    lappend ALWAYS_GIMPLEFLAGS "ldflags=[gimple_link_flags [get_multilibs] ]"
	}
    }

    if [info exists TOOL_OPTIONS] {
	lappend ALWAYS_GIMPLEFLAGS "additional_flags=$TOOL_OPTIONS"
    }

    # Make sure that lines are not wrapped.  That can confuse the
    # error-message parsing machinery.
    lappend ALWAYS_GIMPLEFLAGS "additional_flags=-fmessage-length=0"

    set gcc_warning_prefix "warning:"
    set gcc_error_prefix "error:"

    if { [istarget *-*-darwin*] } {
	lappend ALWAYS_GIMPLEFLAGS "ldflags=-multiply_defined suppress"
       }

    verbose -log "ALWAYS_GIMPLEFLAGS set to $ALWAYS_GIMPLEFLAGS"

    verbose "gimple is initialized" 3
}

#
# gimple_target_compile -- compile a source file
#

proc gimple_target_compile { source dest type options } {
    global tmpdir
    global gimple_compile_options
    global gluefile wrap_flags
    global ALWAYS_GIMPLEFLAGS
    global GIMPLEC_UNDER_TEST

    if { [target_info needs_status_wrapper] != "" && [info exists gluefile] } {
	lappend options "libs=${gluefile}"
	lappend options "ldflags=${wrap_flags}"
    }

    lappend options "additional_flags=[libio_include_flags]"
    lappend options "compiler=$GIMPLEC_UNDER_TEST"
    lappend options "timeout=[timeout_value]"

    set options [concat $gimple_compile_options $options]

    set options [concat "$ALWAYS_GIMPLEFLAGS" $options]

    if { [regexp "(^| )-frepo( |$)" $options] && \
	 [regexp "\.o(|bj)$" $dest] } then {
	regsub "\.o(|bj)$" $dest ".rpo" rponame
	exec rm -f $rponame
    }

    set options [dg-additional-files-options $options $source]

    set result [target_compile $source $dest $type $options]

    return $result
}

#
# ${tool}_option_help
#
# Changed "additional" to "extra" because runtest.exp treats --a* as --all.
#
# This shouldn't be necessary at all; it should be entirely redundant with
# --tool_opts, except that --tool_opts currently breaks multilib: see
# http://lists.gnu.org/archive/html/dejagnu/2002-10/msg00007.html

proc ${tool}_option_help { } {
    send_user " --extra_opts,OPTIONS\t\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\n"
}

#
# ${tool}_option_proc
#

proc ${tool}_option_proc { option } {
    if [regexp "^--extra_opts," $option] {
	global gimple_compile_options
	regsub "^--extra_opts," $option "" option
	foreach x [split $option ","] {
	    lappend gimple_compile_options "additional_flags=$x"
	}
	verbose -log "gimple_compile_options set to $gimple_compile_options"
	return 1
    } else {
	return 0
    }
}
