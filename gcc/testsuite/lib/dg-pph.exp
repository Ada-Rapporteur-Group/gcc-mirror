# Copyright (C) 2011 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Contributed by Diego Novillo <dnovillo@google.com>
# Adapted to new command-driven scheme by Lawrence Crowl <crowl@google.com>

load_lib copy-file.exp

# Generate a PPH image from a header file.
proc dg-pph-hdr { subdir test options mapflag suffix } {

    global runtests dg-do-what-default

    # If we're only testing specific files and this isn't one of them, skip it.
    if { ![runtest_file_p $runtests $test] } {
	return
    }

    set nshort "$subdir/[file tail $test]"
    set bname "[file rootname [file tail $nshort]]"
    verbose -log "\nTesting $nshort, $options"

    set dg-do-what-default preparse
    dg-test -keep-output $test "-fpph-gen $options $mapflag -I." ""

    if { [file_on_host exists "$bname.s"] } {
	file_on_host delete "$bname.s"
    }
}

# Run a negative PPH test.  These tests are expected to produce an error
# as they represent files that are not compatible with PPH.
proc dg-pph-neg { subdir test options mapflag suffix } {

    global runtests dg-do-what-default

    # If we're only testing specific files and this isn't one of them, skip it.
    if { ![runtest_file_p $runtests $test] } {
	return
    }

    set nshort "$subdir/[file tail $test]"
    set bname "[file rootname [file tail $nshort]]"
    verbose -log "\nTesting $nshort, $options"

    set dg-do-what-default compile
    dg-test -keep-output $test "$options $mapflag -I. -fno-dwarf2-cfi-asm" ""

    if { [file_on_host exists "$bname.s"] } {
	file_on_host delete "$bname.s"
    }
}

# Run a positive PPH test (a test expected to work with PPH).  Tests not
# marked 'dg-do run' or 'dg-do link' are compiled twice.  The first time
# with PPH disabled, the second time with PPH enabled.  The assembly
# output from both compiles is then compared.  The test succeeds if both
# assembly outputs are identical.
proc dg-pph-pos { subdir test options mapflag suffix } {

    global runtests dg-do-what-default

    # If we're only testing specific files and this isn't one of them, skip it.
    if { ![runtest_file_p $runtests $test] } {
	return
    }

    set dg-do-what-default compile
    set nshort "$subdir/[file tail $test]"
    set bname "[file rootname [file tail $nshort]]"
    verbose -log "\nTesting $nshort, $options"

    # Determine whether this is an assembly comparison test
    set is_exec [llength [grep $test "dg-do run"]]
    set is_link [llength [grep $test "dg-do link"]]
    if { !$is_exec && !$is_link } {
        set is_asm 1
    } else {
        set is_asm 0
    }

    if { $is_asm } {
	# Compile the file the first time for a base case.
	global target_triplet

	# First, gather additional options specified by the test.
	set all_dg_options [dg-get-options $test]
	set other_options ""
	foreach dg_option $all_dg_options {
	    set cmd [lindex $dg_option 0]
	    if { [string match "dg-options" $cmd] } {
		set other_options "$other_options [lindex $dg_option 2]"
	    }
	}

	# Now, compile the file but prune the result to avoid considering
	# it part of the testsuite.  We just want to compile it to provide
	# a base assembly output to compare against.
	set comp_output [g++-dg-test $test compile "$options $other_options"]
	set comp_output [g++-dg-prune $target_triplet $comp_output]

	# Wanted assembly, so quit if it did not compile successfully.
	if { ![file_on_host exists "$bname.s"] } {
	    fail "$nshort $options (regular assembly missing)"
	    return
	}

	# Rename the .s file into .s-pph to compare it after the second build.
	remote_upload host "$bname.s" "$bname.s-pph"
	remote_download host "$bname.s-pph"
	file_on_host delete "$bname.s"
    }

    verbose -log ""

    # Compile a second time using the PPH files.
    dg-test -keep-output $test "$options $mapflag" ""

    if { !$is_asm } {
	# No assembly means we cannot compare them,
	# and so we are done testing.
	return
    }

    # Quit if it did not compile successfully.
    if { ![file_on_host exists "$bname.s"] } {
	# Expect assembly to be missing when the compile is an
	# expected fail.
	if { ![llength [grep $test "dg-xfail-if.*-fpph-map"]] } {
	    fail "$nshort $options (pph assembly missing)"
	}
	return
    }

    # Rename the .s file into .s+pph to compare it.
    remote_upload host "$bname.s" "$bname.s+pph"
    remote_download host "$bname.s+pph"
    file_on_host delete "$bname.s"

    verbose -log ""

    # Compare the two assembly files.
    # In most tests, they should be identical.
    # Tests involving overload injection and such will have different assembly.
    set adiff [catch {exec diff "$bname.s-pph" "$bname.s+pph"} diff_result]

    # The sources mark when they expect the comparison to differ.
    # When marked with xdiff, the difference is a problem.
    # When marked with xwant, the difference is what we want.
    set xdiff_entry [grep $test "pph asm xdiff( )*\[0-9\]*"]
    set xwant_entry [grep $test "pph asm xwant( )*\[0-9\]*"]
    set xdiff [llength $xdiff_entry]
    set xwant [llength $xwant_entry]
    if { $adiff == 0 } {
	if { $xdiff } {
	    xpass "$nshort $options (assembly equality)"
	} elseif { $xwant } {
	    fail "$nshort $options (assembly difference)"
	} else {
	    pass "$nshort $options (assembly equality)"
	}
	file_on_host delete "$bname.s-pph"
	file_on_host delete "$bname.s+pph"
    } elseif { $adiff == 1 } {
        verbose -log "Diff obtained:\n$diff_result"

	#only checksum on the actual differences, ignore line numbers
	set checksumed_diff [exec grep -E "^(<|>).*" << $diff_result]
	verbose -log "Diff checksumed:\n$checksumed_diff"
	set actualSum [lindex [split [exec sum << $checksumed_diff] " "] 0]
	if { $xdiff } {
	    set expectedSum [lindex [split $xdiff_entry " \}"] 3]
	    if { $expectedSum == $actualSum } {
	        xfail "$nshort $options (assembly equality)"
	    } else {
		set sumMessage "sums $expectedSum=>$actualSum"
	        fail "$nshort $options (assembly equality, $sumMessage)"
	    }
	} elseif { $xwant } {
	    set expectedSum [lindex [split $xwant_entry " \}"] 3]
	    if { $expectedSum == $actualSum } {
	        pass "$nshort $options (assembly difference)"
	    } else {
		set sumMessage "sums $expectedSum=>$actualSum"
	        fail "$nshort $options (assembly equality, $sumMessage)"
	    }
	} else {
	    fail "$nshort $options (assembly equality, sum=$actualSum)"
	}
    } else {
	fail "$nshort $options comparison failure"
    }
}
