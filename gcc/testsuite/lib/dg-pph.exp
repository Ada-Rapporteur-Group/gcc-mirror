# Copyright (C) 2011 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Contributed by Diego Novillo <dnovillo@google.com>
# Adapted to new command-driven scheme by Lawrence Crowl <crowl@google.com>

load_lib copy-file.exp

proc dg-pph-hdr { subdir test options mapflag suffix } {

    global runtests dg-do-what-default

    # If we're only testing specific files and this isn't one of them, skip it.
    if { ![runtest_file_p $runtests $test] } {
	return
    }

    set nshort "$subdir/[file tail $test]"
    set bname "[file rootname [file tail $nshort]]"
    verbose -log "\nTesting $nshort, $options"

    set dg-do-what-default preparse
    dg-test -keep-output $test "-fpph-gen $options $mapflag -I." ""

    if { [file_on_host exists "$bname.s"] } {
	file_on_host delete "$bname.s"
    }
}

proc dg-pph-neg { subdir test options mapflag suffix } {

    global runtests dg-do-what-default

    # If we're only testing specific files and this isn't one of them, skip it.
    if { ![runtest_file_p $runtests $test] } {
	return
    }

    set nshort "$subdir/[file tail $test]"
    set bname "[file rootname [file tail $nshort]]"
    verbose -log "\nTesting $nshort, $options"

    set dg-do-what-default compile
    dg-test -keep-output $test "-fno-dwarf2-cfi-asm $options $mapflag -I." ""

    if { [file_on_host exists "$bname.s"] } {
	file_on_host delete "$bname.s"
    }
}

proc dg-pph-pos { subdir test options mapflag suffix } {

    global runtests dg-do-what-default

    # If we're only testing specific files and this isn't one of them, skip it.
    if { ![runtest_file_p $runtests $test] } {
	return
    }

    set nshort "$subdir/[file tail $test]"
    set bname "[file rootname [file tail $nshort]]"
    verbose -log "\nTesting $nshort, $options"

    # Compile the file the first time for a base case.
    set dg-do-what-default compile
    dg-test -keep-output $test "-fno-dwarf2-cfi-asm $options -I." ""

    # Determine whether this is an assembly comparison test
    set is_exec [llength [grep $test "dg-do run"]]
    set is_link [llength [grep $test "dg-do link"]]
    if { !$is_exec && !$is_link } {
        set is_asm 1
    } else {
        set is_asm 0
    }

    if { $is_asm } {
	# Wanted assembly, so quit if it did not compile successfully.
	if { ![file_on_host exists "$bname.s"] } {
	    fail "$nshort $options (regular assembly missing)"
	    return
	}
	# Rename the .s file into .s-pph to compare it after the second build.
	remote_upload host "$bname.s" "$bname.s-pph"
	remote_download host "$bname.s-pph"
	file_on_host delete "$bname.s"
    }

    verbose -log ""

    # Compile a second time using the pph files.
    dg-test -keep-output $test "-fno-dwarf2-cfi-asm $options $mapflag -I." ""

    if { !$is_asm } {
	# No assembly means we cannot compare them,
	# and so we are done testing.
	return
    }

    # Quit if it did not compile successfully.
    if { ![file_on_host exists "$bname.s"] } {
	# Expect assembly to be missing when the compile is an
	# expected fail.
	if { ![llength [grep $test "dg-xfail-if.*-fpph-map"]] } {
	    fail "$nshort $options (pph assembly missing)"
	}
	return
    }

    # Rename the .s file into .s+pph to compare it.
    remote_upload host "$bname.s" "$bname.s+pph"
    remote_download host "$bname.s+pph"
    file_on_host delete "$bname.s"

    verbose -log ""

    # Compare the two assembly files.  They should be identical.
    set adiff [catch {exec diff "$bname.s-pph" "$bname.s+pph"} diff_result]
    # The sources mark when they expect the comparison to differ.
    set xdiff_entry [grep $test "pph asm xdiff( )*\[0-9\]*"]
    set xdiff [llength $xdiff_entry]
    if { $adiff == 0 } {
	if { $xdiff } {
	    xpass "$nshort $options (assembly comparison)"
	} else {
	    pass "$nshort $options (assembly comparison)"
	}
	file_on_host delete "$bname.s-pph"
	file_on_host delete "$bname.s+pph"
    } elseif { $adiff == 1 } {
        verbose -log "Diff obtained:\n$diff_result"

	#only checksum on the actual differences, ignore line numbers
	set checksumed_diff [exec grep -E "^(<|>).*" << $diff_result]
	verbose -log "Diff checksumed:\n$checksumed_diff"
	set actualSum [lindex [split [exec sum << $checksumed_diff] " "] 0]
	if { $xdiff } {
	    set expectedSum [lindex [split $xdiff_entry " \}"] 3]
	    if { $expectedSum == $actualSum } {
	        xfail "$nshort $options (assembly comparison)"
	    } else {
		set sumMessage "sums $expectedSum=>$actualSum"
	        fail "$nshort $options (assembly comparison, $sumMessage)"
	    }
	} else {
	    fail "$nshort $options (assembly comparison, sum=$actualSum)"
	}
    } else {
	fail "$nshort $options comparison failure"
    }
}
