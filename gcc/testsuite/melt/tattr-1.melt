;; file tattr-1.melt -*- lisp -*-
;; this sample code is in the public domain
;; see also file tattrcode-1.c
#| run in buildir/gcc
 ln -sv $GCCMELT_SOURCE/gcc/testsuite/melt/tattr-1.melt
 ln -sv $GCCMELT_SOURCE/gcc/testsuite/melt/tattrcode-1.c

 ./cc1 -fmelt-mode=runfile @meltbuild-common.args -Iinclude/ \
    -fmelt-init=@melt-default-modules.quicklybuilt -fmelt-arg=tattr-1.melt \
    tattrcode-1.c

or in a MELT module

gcc -fplugin=melt -fplugin-arg-melt-mode=runfile @meltbuild-common.args \
    -fplugin-arg-melt-init=@melt-default-modules.quicklybuilt -fplugin-arg-melt-arg=tattr-1.melt \
     -c -O tattrcode-1.c -o /dev/null
|#
(module_is_gpl_compatible "public domain")
(debug "tattr-1" " start ~*" "~*" "~*")
(defun tattr_handler (attr flaglist :tree tr_node tr_name tr_args)
  (debug "tattr_handler" " start attr=" attr
	 "\n.. flaglist=" flaglist
	 "\n.. tr_node=" tr_node
	 "\n.. tr_name=" tr_name
	 "\n.. tr_args=" tr_args)
  (debug "tattr_handler" " tree_chain_to_tuple:"
	 (tree_chain_to_tuple discr_multiple tr_args))
  (shortbacktrace_dbg "tattr_handler" 15)
  (return)
)

(let ( (at (instance class_gcc_attribute
		     :named_name '"testmelt"
		     :gccattr_data (tuple 'some-data '22)
		     :gccattr_handler tattr_handler
		     ))
       )
  (debug "tattr-1" " registering at=" at)
  (register_gcc_attribute at :min_length 1 :max_length 4 :function_type_required :true)
  (debug "tattr-1" " registered at=" at)
)

;;; eof tattr-1.melt
