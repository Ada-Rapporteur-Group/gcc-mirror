; -*- lisp -*-
;; file tletrec3.melt

#| run in buildir/gcc
 ln -sv $GCCMELT_SOURCE/gcc/testsuite/melt/tletrec3.melt

 ./cc1 -fmelt-mode=runfile   @meltbuild-common.args     \
    -fmelt-arg=tletrec3.melt \
    -fmelt-debugging=all meltbuild-empty-file.c

or in a MELT module

gcc -fplugin=melt -fplugin-arg-melt-mode=runfile @meltbuild-common.args \
    -fplugin-arg-melt-init=@melt-default-modules.quicklybuilt -fplugin-arg-melt-arg=tletmacro-1.melt \
     -c -x c /dev/null -o /dev/null
|#

(defclass class_abc
  :super class_root
  :fields (aa bb cc))

(defclass class_abcde
  :super class_abc
  :fields (dd ee))


(defprimitive checknonull (:cstring msg :value va) :void 
#{ int lin=__LINE__; 
   if (!$va) fatal_error(" [%s:%d] checknonull failed: %s",
			  lbasename(__FILE__),lin, $msg); }#)


(defun testlist (x y z)
  (letrec ( (li (list x y z)) 
	    )
	  li))

(debug "testlist:" (testlist 'xx 'yy 'zz) )


(defun testtuple (x y z)
  (letrec ( (tu (tuple x y z (make_box discr_box tu))) 
	    )
	  tu))

(debug "testtuple:" (testtuple 'xx 'yy 'zz))


(defun testinstance1 (x y z)
  (letrec 
   ( (ob1 (instance class_abcde 
		   :aa x :bb ob1 :cc y :dd z
		   :ee (make_box discr_box x))) )
   (checknonull "check aa in ob1" (unsafe_get_field :aa ob1))
   ob1))

(debug  "testinstance1:" (testinstance1 'xx 'yy 'zz))


(defun testletrec3 (x y)
  (letrec ( (tu (tuple x y li 
		       (make_integerbox discr_integer 123)))
	    (li (list x y 
		      (make_box discr_box tu)))
	    (ob (instance class_abcde
			  :aa tu 
			  :bb 'zzzz
			  :cc ob
			  :dd (instance class_reference :reference_value x)
			  :ee obcont))
	    (obcont (instance class_reference :reference_value ob))
	    )
	  (debug "testletrec3 obcont:" obcont)
	  (checknonull "check aa in ob" (unsafe_get_field :aa ob))
	  (checknonull "check dd in ob" (unsafe_get_field :dd ob))
	  ob
	  ))

(debug  "testletrec3" (testletrec3 'xxx 'yyy))

;; eof tletrec3.melt
