;; file tjson-0.melt -*- lisp -*-
;; this sample code is in the public domain
#| run in buildir/gcc
 ln -s $GCCMELT_SOURCE/gcc/testsuite/melt/tjson-0.melt

 ./cc1 -fmelt-mode=runfile @meltbuild-common.args -Iinclude/ \
    -fmelt-init=@warmelt.quicklybuilt -fmelt-arg=tjson-0.melt \
     meltbuild-empty-file.c

or in a MELT module

gcc -fplugin=melt -fplugin-arg-melt-mode=runfile @meltbuild-common.args \
    -fplugin-arg-melt-init=@melt-default-modules.quicklybuilt -fplugin-arg-melt-arg=tjson-0.melt \
     -c -O empty.c -o /dev/null
|#
(module_is_gpl_compatible "public domain")
(let (
      (jo1 (make_jsonobject discr_jsonobject 'a 1 'b 2 'c ()))
     )
  (debug "tjson0" " jo1=" jo1)
  )

(let ( (jo2 (make_jsonobject discr_jsonobject 'a 'b))
       )
  (debug "tjson0" " jo2=" jo2)
  )

(let ( (jo3 (make_jsonobject discr_jsonobject (tuple 'aa 'bb) (tuple 'xx 'yy)))
       )
  (debug "tjson0" " jo3=" jo3)
  )

;;;; same a jsonobject_get_named from warmelt-base.melt but adding debug
;;;;
(defun jsob_get_named (:value vjob atname)
  (debug "jsob_get_named" " vjob=" vjob " atname=" atname)
  (if (not (is_jsonobject vjob)) (return ()))
  (let ( (vname (cond 
		 ((is_string atname) 
		  atname)
		 ((is_a atname class_named) 
		  (unsafe_get_field :named_name atname))
		 (:else (return ()))))
	 (:long sz (jsonobject_size vjob))
	 (:long lo 0)
	 (:long hi (-i sz 1))
	 )
    (debug "jsob_get_named" " vname=" vname "; sz=" sz " lo=" lo " hi=" hi)    
    (if (not (is_string vname)) 
	(return ()))
    (if (==i sz 0) 
	(return ()))
    (forever 
     getloop
     (debug "jsob_get_named" " getloop lo=" lo " hi=" hi)
     (if (>i (+i lo 3) hi) 
	 (exit getloop))
     (let ( (:long mi (/iraw (+i lo hi) 2))
	    (midname (jsonobject_nth_name vjob mi))
	    )
       (debug "jsob_get_named" " getloop mi=" mi " midname=" midname)
       (if (json_name_less vname midname)
	   (setq hi mi)
	 (setq lo mi))))
    (debug "jsob_get_named" " after getloop lo=" lo " hi=" hi)
    (foreach_long_upto 
     (lo hi)
     (:long ix)
     (debug "jsob_get_named" " foreach ix=" ix)
     (let ( (curname (jsonobject_nth_name vjob ix))
	    )
       (debug "jsob_get_named" " foreach curname=" curname)
       (if (json_name_equal curname vname)
	   (let ( (curval (jsonobject_nth_value vjob ix)) )
	     (debug "jsob_get_named" " gives curval=" curval)
	     (return curval)))
       )
     )
    )
  )


(let ( (jo4 (make_jsonobject discr_jsonobject (list 'aa 'bb 'cc) (list 'x 'y '3)))
       )
  (debug "tjson0" " jo4=" jo4)
  (let ( (gaa (jsob_get_named jo4 'aa))
	 (gcc (jsob_get_named jo4 'cc))
	 )
    (debug  "tjson0" " gaa=" gaa " gcc=" gcc)	 
    (debug  "tjson0" " get'aa=" (jsonobject_get_named jo4 'aa)
	    " get'cc=" (jsonobject_get_named jo4 'cc))
  ))

(let ( (jo5 (make_jsonobject discr_jsonobject
			     'id "C1P4444R2a83T2222"
			     'jsonrpc "2.0"
			     'result 3))
       )
  (debug "tjson0" " jo5=" jo5)
  (let ( (gid (jsob_get_named jo5 'id))
	 (gresult (jsob_get_named jo5 'result))
	 )
    (debug  "tjson0" " gid=" gid " gresult=" gresult)	 
    (debug  "tjson0" " get'id=" (jsonobject_get_named jo5 'id)
	    " get'resumt=" (jsonobject_get_named jo5 'result))
  ))

(debug "tjson0" " 'id=" 'id " canonical id=" (json_canonical_name '"id"))
(debug "tjson0" " 'result=" 'result " canonical result=" (json_canonical_name '"result"))
;; eof tjson-0.melt
