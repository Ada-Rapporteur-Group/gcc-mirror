2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * dojump.c (compare_from_rtx): Delete.
        * expmed.c (emit_store_flag): Only try cstore_optab.  Canonicalize
        any MODE_CC mode to the cstorecc4 pattern.  Use prepare_operand, fail
	if the comparison does not satisfy the predicate; test predicates for
	operands 2 and 3 of a cstore pattern.  Don't try cstore optab
	further if one existing pattern fails.
        * expr.h (compare_from_rtx): Delete.
	(prepare_operand): Declare it.
        * optabs.c (bcc_gen_fctn, setcc_gen_code, trap_rtx,
        emit_cmp_insn): Delete.
        (can_compare_p): Delete cmp_optab case.
	(prepare_float_lib_cmp): Return an rtx and a machine mode.
        Accept other parameters by value.
        (prepare_operand): Make non-static.
        (prepare_cmp_insn): Return an rtx and a machine mode.  Accept
        other parameters by value.  Try to widen operands here based on
        an optab_methods argument and looking at cbranch_optab.
        (emit_cmp_and_jump_insn_1): Accept test and mode, remove widening loop.
	Use cbranch_optab directly.
        (emit_cmp_and_jump_insns): Fix comment.  Adjust call to prepare_cmp_insn
	and emit_cmp_and_jump_insn_1, remove obsolete assertion.
        (emit_conditional_move, emit_conditional_add): Inline what's needed
        of compare_from_rtx, using new prepare_cmp_insn for the rest.
	(gen_cond_trap): Use prepare_cmp_insn.
        (init_optabs): Init cmp_optab with UNKNOWN, cbranch_optab
        with COMPARE.  Move cmov_optab and cstore_optab above
        with cbranch_optab, move cmp_optab down with ucmp_optab,
        remove tst_otpab.  Do not initialize trap_rtx.
        (gen_cond_trap): Do it here.  Use ctrap_optab.  Test predicate
	for trap code.
        * optabs.h (OTI_cmp): Mark as used only for libcalls.
        (OTI_ctrap, ctrap_optab): New.
        (tst_optab): Delete.
        (bcc_gen_fctn, setcc_gen_code, emit_cmp_insn): Delete.
        * ifcvt.c (find_if_header): Replace HAVE_conditional_trap
        with lookup of ctrap_optab.
        * genopinit.c (cmp_optab, tst_optab, bcc_gen_fctn,
        setcc_gen_code): Delete.
        (ctrap_optab): New.

        * combine.c (combine_simplify_rtx, simplify_set): Do not
        special case comparing against zero for cc0 machines.

        * doc/md.texi (bCC, sCC, tstMM, cmpMM): Delete.
        (cstoreMM4): Document.
	(conditional_trap): Document ctrapMM4 instead.
        (sync_compare_and_swapMM): Refer to cbranchcc4.
	(Dependent Patterns): Eliminate obsolete information referring to
	the old jump optimization phase.
        (Canonicalization): Include cbranchcc4 case, omit canonicalization
	of compares with 0 on cc0 machines.
	(Jump Patterns): Refer to MODE_CC jump patterns preferably,
	avoiding references to cc0.  Remove text about storing operands
	in cmpMM.
	* doc/tm.texi (Condition Codes): Include blurb on different
	condition code representations, separate into subsections for
	CC0, MODE_CC and conditional execution.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * recog.c (ordered_comparison_operator): New.
        * gensupport.c (std_preds): Add it.

2008-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * final.c (final_scan_insn): Compare cc_status values
        against LHS of a (compare FOO (const_int 0)) cc0 source.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * gcc/optabs.c (can_compare_p): Test the predicate of a
        cbranch and cstore pattern.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * genoutput.c (validate_optab_operands): New.
        (gen_insn, gen_expand): Call it.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * genflags.c (gen_insn): Detect misused iterators.
        (main): Pass line_no to gen_insn, exit with status 1 on error.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * genextract.c (line_no): Make global.
        (VEC_safe_set_locstr): Change assertion to error message.
        (main): Exit with status 1 on error.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * config/i386/i386.md (cmpcc): New.
        * config/i386/sync.md (sync_compare_and_swap*): Set FLAGS_REG.
        (sync_compare_and_swap_cc*): Delete.

        * config/s390/s390.c (s390_emit_compare_and_swap): Adjust
        for changes in the machine description.
        * config/s390/s390.md (cmpcc): New.
        (sync_compare_and_swapqi, sync_compare_and_swaphi): Clobber
        CC_REGNUM, do not pretend it's set.
        (sync_compare_and_swap_cc*): Delete.
        * config/s390/predicates.md (cc_reg_operand): New.

        * expr.c (sync_compare_and_swap_cc): Delete.
        * optabs.h (sync_compare_and_swap_cc): Delete.
        * optabs.c (pprepare_cmp_insn): Ignore which specific CCmode
        is being used with can_compare_p.
        (emit_cmp_and_jump_insn_1): Likewise when looking in the optab.
        (find_cc_set): New.
        (expand_bool_compare_and_swap): Do not use sync_compare_and_swap_cc,
        look for a MODE_CC set instead.  Use emit_store_flag.
        (expand_compare_and_swap_loop): Likewise, with some additional
        complication to avoid a force_reg when useless.  Use
        emit_cmp_and_jump_insns.
        * genopinit.c (optabs): Delete sync_compare_and_swap_cc.
        * doc/md.texi (sync_compare_and_swap_cc): Merge with
        sync_compare_and_swap documentation.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * expr.c (convert_move): Use emit_store_flag instead of
        "emulating" it.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * config/s390/s390.c (s390_compare_emitted): Remove.
        (s390_emit_compare): Handle MODE_CC s390_compare_op0 like
        s390_compare_emitted used to be handled.  Assert that modes match.
        (s390_emit_compare_and_swap): Use s390_emit_compare.
        * config/s390/s390.h (s390_compare_emitted): Remove.
        * config/s390/s390.md (seq) Look for MODE_CC s390_compare_op0
        instead of s390_compare_emitted.
        (stack_protect_test, sync_compare_and_swap_cc): Set s390_compare_op0
        instead of s390_compare_emitted.

2009-04-06  Paolo Bonzini  <bonzini@gnu.org>

        * config/i386/i386.c (ix86_compare_emitted): Remove.
        (ix86_expand_compare, ix86_expand_branch): Handle MODE_CC
        ix86_compare_op0 like ix86_compare_emitted used to be handled.
        * config/i386/i386.h (ix86_compare_emitted): Remove.
        * config/i386/i386.md (stack_protect_test): Set ix86_compare_op0
        instead of ix86_compare_emitted.
        * config/i386/sync.md (sync_compare_and_swap_cc): Likewise.
