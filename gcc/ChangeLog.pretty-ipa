2009-03-29  Jan Hubicka  <jh@suse.cz>

	* tree-cfgcleanup.c (result_ok_for_phi_merging): New.
	(merge_phi_nodes): Handle abnormal PHIs.

2009-03-29  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline and revert:
	* tree-cfg.c (tree_empty_eh_handler_p): New.
	(cleanup_empty_eh): New.
	(cleanup_tree_cfg_1): Perform EH cleanups and re-do
	unreachable blocks/dominance/ssa update if needed.

2009-03-29  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (estimate_num_insns): FILTER_EXPR/EXC_PTR_EXPR
	are free.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* ipa-inline.c: Include except.h
	(estimate_function_body_sizes): Ignore MUST_NOT_THROW blocks
	* except.c (must_not_throw_labels): New function.
	* except.h (must_not_throw_labels): Declare.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (clone_fn_id_num, clone_function_name): Bring here from
	tree-inline.c
	(cgraph_create_virtual_clone): Fix creating of new name.
	* tree-inline.c: Do not include gt-tree-inline.h
	(clone_fn_id_num, clone_function_name): Move to
	cgraph.c
	* tree-ssa-structalias.c (handle_const_call): Silence may be used
	uninitialized warning.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* dwarf2out.c (dwarf2out_begin_prologue): Use crtl->nothrow
	* tree-eh.c (stmt_could_throw_p): Remove check for WEAK decls.
	* function.h (rtl_data): Add nothrow flag.
	* except.c (set_nothrow_function_flags): Use crtl->nothrow;
	set DECL_NOTHROW for AVAILABLE functions.

2009-03-28  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (dump_cgraph_node): Add replace output flag by process.
	* cgraph.h (cgraph_node): Likewise.
	(function_called_by_processed_nodes_p): Declare.
	(cgraph_process_new_functions): Set process flag.
	(cgraph_reset_node): Use process flag.
	(cgraph_mark_functions_to_output): Likewise.
	(cgraph_expand_function): Likewise.
	(cgraph_expand_all_functions): Likewise.
	(cgraph_output_in_order): Likewise.
	(function_called_by_processed_nodes_p): Likewise.
	* ipa-pure-const.c (check_call): Fix handling of operands.
	(analyze_function): Dump debug output for skipped bodies.
	(local_pure_const): Use function_called_by_processed_nodes_p.
	* dwarf2out.c (reference_to_unused): Use output.
	* passes.c (do_per_function_toporder): Likewise.

2009-03-27  Jan Hubicka  <jh@suse.cz>

	* except.c (choose_personality_routine): Set terminate_node to abort
	for java exceptions.

2009-03-26  Jan Hubicka  <jh@suse.cz>

	* except.c (duplicate_eh_regions): Toplevel regionn can be removed.
	(remove_eh_region): New function
	(can_throw_internal_1, can_throw_external_1): Toplevel region can be removed.
	* except.h (remove_eh_region): New.
	* tree-cfg.c (tree_empty_eh_handler_p): New.
	(cleanup_empty_eh): New.
	(cleanup_tree_cfg_1): Perform EH cleanups and re-do
	unreachable blocks/dominance/ssa update if needed.

2009-03-26  Jan Hubicka  <jh@suse.cz>

	* tree-eh.c (inlinable_call_p): New function.
	(make_eh_edges): Use it.
	(verify_eh_edges): Use it.
	(stmt_can_throw_external, stmt_can_throw_internal): Use it.
	* except.c (reachable_next_level): Add inlinable_function argument
	(sjlj_find_directly_reachable_regions): Update.
	(add_reachable_handler): Do not set saw_any_handlers.
	(reachable_next_level): Handle MUST_NOT_THROW more curefully.
	(foreach_reachable_handler, can_throw_internal_1, can_throw_external_1):
	Add new inlinable call parameter.
	(can_throw_internal, can_throw_external): Update.
	* except.h (can_throw_internal_1, can_throw_external_1,
	foreach_reachable_handler): Update declaration.

2009-03-26  Martin Jambor  <mjambor@suse.cz>

	* ipa-sra.c (dump_access): Also dump to_be_replaced flag.
	(disqualify_candidate): New function.
	(create_access): Use disqualify_candidate to disqualify candidates.
	(disqualify_all): Use disqualify_candidate to disqualify candidates.
	(disqualify_direct_ptr_params): Use disqualify_candidate to disqualify
	candidates.
	(scan_phi_nodes): Use disqualify_candidate to disqualify candidates.
	(analyze_variable_accesses): Use disqualify_candidate to disqualify
	candidates.

	* ipa-sra.c (struct access): New flag grp_unscalarizable_region.
	(dump_access): Dump also grp_unscalarizable_region flag.
	(create_access): If max_size != size in intra-SRA, do not
	disqualify the candidate but create a grp_unscalarizable_region
	access instead.
	(sort_and_splice_var_accesses): Propagate
	grp_unscalarizable_region flag to the group representative.
	(build_access_tree_1): Disallow replacements in a subtree if
	grp_unscalarizable_region is set.

2009-03-25  Jan Hubicka  <jh@suse.cz>

	* dwarf2out.c (dwarf_stack_op_name): Add DW_OP_bit_piece.
	(size_of_loc_descr): Add DW_OP_bit_piece.
	(output_loc_descriptor): Add DW_OP_bit_piece.
	(loc_descriptor_from_tree_1): Rename to ...
	(loc_list_from_tree): ... this one; rewrite to
	work on location lists; add handling of some extra
	special cases of ADDR_EXPR; add debug output; handle
	CONSTRUCTOR; handle variables with variable lists.
	(add_loc_descr_op_piece): Add DW_OP_bit_piece.
	(add_loc_descr_op_bit_piece): New.
	(tls_mem_loc_descriptor): Use loc_descriptor_from_tree.
	(mem_loc_descriptor): Add handling of VAR_LOCATION
	(hidden_reference_p): New.
	(dw_loc_list): Break out from add_location_or_const_value_attribute.
	(struct piece): New structure.
	(single_element_loc_list, single_element_loc_list_p,
	add_loc_descr_to_each, add_loc_list, compare_pieces,
	loc_descriptor_from_constructor): New functions.
	(loc_descriptor_from_tree): Rewrite using loc_list_from_tree.
	(add_AT_location_description): Support location lists.
	(add_location_or_const_value_attribute): Simplify
	using loc_list_from_tree.
	(add_value): Likewise.
	(add_bound_info): Use location lists.
	(gen_array_type_die): Likewise.
	(gen_formal_parameter_die): Look for VALUE_EXPR if present.
	(gen_variable_die): Likewise; Do fortran common sections on location
	lists.
	(gen_subprogram_die): Use location lists.
	* function.c (instantiate_decls_1): Instantiate nonlocalized vars.

2009-03-25  Jan Hubicka  <jh@suse.cz>

	* except.c (duplicate_eh_regions_0): Walk AKA bitmap
	(duplicate_eh_regions_1): Duplicate AKA bitmap.
	(duplicate_eh_regions): Verify EH tree; cleanup region array growing;
	handle AKA bitmaps.
	(dump_eh_tree): Dump all fields nicely.
	(verify_eh_tree): Fix bugs in walking.

2009-03-25  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (remap_gimple_stmt): Do not emit noop move
	when remaping gimple stmt.
	(lookup_return_stmt): New function.
	(declare_return_variable):  Declare nonlocalized var for return value;
	dump reason on why subtitution failed; attempt to subtitute copy of
	RETVAL too.

2009-03-25  Martin Jambor  <mjambor@suse.cz>

	* ipa-sra.c (splice_param_accesses): Replaced parameter parm_modified
	with parameter ro_grp.
	(splice_all_param_accesses): Return UNMODIF_BY_REF_ACCESSES
	whenever (at least once) returned ro_grp is true.

2009-03-23  Martin Jambor  <mjambor@suse.cz>

	* ipa-sra.c: Corrected initial file comment, removed some extra
	newlines.
	(enum sra_mode): Corrected the comment.
	(struct access): Corrected comments.
	(type_internals_preclude_sra_p): Corrected the function comment.
	(get_ssa_base_param): Corrected the function comment.
	(unmodified_by_ref_scalar_representative): Corrected the function
	comment.
	(build_access_tree_1): Corrected the function comment.
	(build_access_tree): Corrected the function comment.
	(analyze_variable_accesses): Corrected the function comment.
	(analyze_all_variable_accesses): Corrected the function comment.
	(init_subtree_with_zero): Corrected the function comment.
	(sra_fix_incompatible_types_for_expr): Added a function comment.
	(handle_unscalarized_data_in_subtree): Added a function comment.
	(sra_intra_modify_constructor_assign): Corrected a comment.
	(fix_modified_assign_compatibility): Corrected the function comment.

2009-03-19  Jan Hubicka  <jh@suse.cz>

	* opts.c (decode_options): Enable ipa-sra at -O2.

2009-03-19  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline.

2009-03-15  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_make_node_local): Weak functions needs localizing
	too.
	* ipa-sra.c (ipa_early_sra): Do not disqualify weak fce.

2009-03-15  Jan Hubicka  <jh@suse.cz>

	* omp-low.c (scan_omp_1_op): Do not duplicate nonlocal vars.
	* dwarf2out.c (loc_descriptor_from_tree_1): Handle CONST_DECL,
	COMPLEX_CST and do not abort on address of REAL_CST.
	* tree-inline.c (remap_decls): Do not push decls to nonlocalized
	list when it is NULL.

2009-03-19  Martin Jambor  <mjambor@suse.cz>

	* ipa-sra.c (sra_aggregate_type_p): Removed.
	(type_internals_preclude_sra_p): Use AGGREGATE_TYPE_P instead of
	sra_aggregate_type_p.
	(find_param_candidates): Allow all aggregates to be candidates for
	IPA-SRA.  Use AGGREGATE_TYPE_P instead of sra_aggregate_type_p.
	(find_var_candidates): Use AGGREGATE_TYPE_P instead of
	sra_aggregate_type_p.

2009-03-18  Martin Jambor  <mjambor@suse.cz>

	* ipa-sra.c (build_access_tree_1): Propagate grp_write flag
	downwards in the access tree.

	* ipa-sra.c (make_fancy_name_1): Bail out if array_ref index is not an
	integer constant.

2009-03-17  Martin Jambor  <mjambor@suse.cz>

	* ipa-sra.c (compare_access_positions): Use comparisons instead of
	subtractions.

2009-03-16  Martin Jambor  <mjambor@suse.cz>

	* ipa-prop.c (get_ssa_def_if_simple): New function.
	(determine_cst_member_ptr): Added ability to traverse one more assign.
	* tree-complex.c (extract_component): Added VIEW_CONVERT_EXPR label.
	* opts.c (decode_options): Set flag_early_ipa_sra at -O3.
	* timevar.def (TV_IPA_SRA): New timevar.
	* passes.c (init_optimization_passes): Switched to new intraprocedural
	SRAs and added early IPA SRA.
	* common.opt (fearly-ipa-sra): New option.
	* ipa-sra.c:  New file.
	
2009-03-14  Jan Hubicka  <jh@suse.cz>

	* tree.h (nonlocalized_var): New struct and vector type.
	(BLOCK_NUM_NONLOCALIZED_VARS, BLOCK_NONLOCALIZED_VAR): Update.
	(BLOCK_NONLOCALIZED_VAR_VALUE): New.
	(struct tree_block): Update.
	* final.c (pass_final): Add dump file.
	* dwarf2out.c: Include gimple.h
	(add_const_value_attribute): Remove.
	(loc_descriptor_from_tree_1): Work harder on expanding ADDR_EXPR
	and also using constant pool to look up addresses of constant
	expressions.
	(add_const_value_attribute): Return true on sucess.
	(add_location_or_const_value_attribute): Return true on sucess.
	(tree_add_const_value_attribute_1): Break out from ...
	(tree_add_const_value_attribute): ... here; Likewise.
	(add_value): New.
	(descr_info_loc): Handle all kinds of INDIRECT_REFs.
	(gen_formal_parameter_die, gen_variable_die): Add value parameter.
	(gen_formal_types_die): Update.
	(gen_subprogram_die): Update.
	(gen_member_die): Update.
	(process_scope_var): Add value parameter.
	(decls_for_scope): Update.
	(gen_decl_die): Add value parameter.
	(dwarf2out_decl): Update.
	(mem_loc_descriptor): Handle CONCAT.
	* tree-ssa-live.c (lookup_dead_vars): New.
	(remove_unused_scope_block_p): Prune replacements using dead variables.
	(dump_scope_block): Dump replacement.
	* tree-inline.c (remapped_type, can_be_nonlocal): Move up.
	(remap_decl): Refuse to copy nonlocal var.
	(simplify_value): New functions.
	(declare_nonlocalized_var): New functions.
	(remap_decls): Update replacements.
	(lookup_dead_vars): New function.
	(remap_block): Update replacements.
	(argument_set_in_function_p): Handle non-SSA mode.
	(setup_one_parameter): Add parameter to nonlozalized list if needed;
	handle dead arguments; handle full substitution of SSA arguments.
	(no_sets_of_var_fn): New function.
	(initialize_inlined_parameters): Update.
	(copy_arguments_for_versioning): Handle substitution via nonlocalized_vars
	(tree_function_versioning): Update.

2009-03-11  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (argument_set_in_function_p): Always return true
	for when not in SSA.

2009-03-11  Jan Hubicka  <jh@suse.cz>

	Merge from mainline.

2009-03-09  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (non_ssa_argument_ok_to_subtitute): Reorganize for
	better readability; add debug output; handle volatile flags; handle
	more special cases.
	(setup_one_parameter): Add debug output.

2009-03-09  Jan Hubicka  <jh@suse.cz>

	* ipa.c (cgraph_remove_unreachable_nodes):  Do not remove edges of
	functions that are clonned.

2009-03-09  Jan Hubicka  <jh@suse.cz>

	* tree-inline.c (non_ssa_argument_ok_to_subtitute): Update comment,
	ignore gimple register parameters even if they don't have default def
	(i.e. unused parameters), skip NOP_EXPR, use get_base_address;
	accept const functions too; SSA_NAMEs are safe.
	(setup_one_parameter): Shortcut unused params.

2009-03-09  Jan Hubicka  <jh@suse.cz>

	* cgraphunit.c (cgraph_materialize_all_clones): Fix thinko in handling
	of clones.

	* tree-inline.c (self_inlining_addr_expr): Remove.
	(argument_set_in_function_p, non_ssa_argument_ok_to_subtitute): New
	functions.
	(setup_one_parameter): Use argument_set_in_function_p; remove FN argument.
	(initialize_inlined_parameters): Update call of setup_one_parameter.
	(tree_function_versioning): Likewise.

2009-02-21  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline up to last merge point of alias-improvements
	branch.

2009-02-16  Jan Hubicka  <jh@suse.cz>

	* cgraph.c: Do not include varray.h
	(cgraph_set_call_stmt_including_clones,
	cgraph_create_edge_including_clones): New functions.
	(cgraph_remove_node): Update clone tree correctly.
	(cgraph_clone_node): Update clone datastructure.
	(cgraph_create_virtual_clone): New functio.
	* cgraph.h (struct ipa_replace_map): Move here from ipa-prop.h
	(ipa_replace_map_p): New type and vector.
	(cgraph_set_call_stmt_including_clones,
	cgraph_create_edge_including_clones, cgraph_create_virtual_clone):
	Declare.
	(cgraph_function_versioning): Use vector instead of varray.
	(tree_function_versioning): Declare here.
	(cgraph_materialize_all_clones): New function.
	* ipa-cp (ipcp_update_cloned_node): Remove
	(ipcp_create_replace_map): Allocate replace_map in GGC.
	(ipcp_update_callgraph): Only create virtual nodes.
	(ipcp_update_bb_counts, ipcp_update_edges_counts): Remove.
	(ipcp_update_profiling): Only update cgraph.
	(ipcp_insert_stage): Use GGC for skip_args bitmap; use vector for
	replace_map.
	* cgraphunit.c (clone_of_p): New function.
	(verify_cgraph_node): Handle cones correctly.
	(cgraph_optimize): Do cgraph_materialize_all_clones.
	(cgraph_materialize_clone, cgraph_materialize_all_clones): Update.
	* ipa-inline.c (cgraph_default_inline_p): Use analyzed flag instead of looking
	into the body.
	* ipa.c: Include gimple.h
	(cgraph_remove_unreachable_nodes): Functions that need to be instantiated
	to clones are needed.
	* ipa-prop.h (ipa_replace_map): Move to cgraph.h
	* tree-inline.c: Do not include varray.h
	(copy_bb): Properly update edges; take care of creating new edges
	for new call statements.
	(expand_call_inline): Edge should always exist.
	(tree_function_versioning): Use vector.
	* tree-inline.h: Remove varray.h
	(tree_function_versioning): Remove.
	* passes.c (do_per_function): Only do functions with bodies.

2009-02-16  Martin Jambor  <mjambor@suse.cz>

	* omp-low.c (expand_omp_taskreg): Always set current_function_decl.

2009-01-17  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_remove_node): Handle clones tree.
	(cgraph_clone_node): Create clone tree.
	(cgraph_function_body_availability): Fixup comment.
	* cgraph.h (cgraph_node): Add clone tree.
	* cgraphunit.c (verify_cgraph_node): Verify clone tree.
	(cgraph_preserve_function_body_p): Use clone tree.
	(save_inline_function_body): Redirect clone tree to new copy.
	* ipa.c (cgraph_remove_unreachable_nodes): Check clone childs.
	* tree-inline.c (copy_bb): Likewise.
	* ipa-struct-reorg.c (do_reorg_1): Likewise.

2009-01-17  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_node_can_be_local_p, cgraph_make_node_local): New
	function.
	* cgraph.h (cgraph_node_can_be_local_p, cgraph_make_node_local):
	Declare.

2009-01-16  Jan Hubicka  <jh@suse.cz>

	* Merge from mainline.

2009-01-07  Martin Jambor  <mjambor@suse.cz>

        * tree-inline.c (optimize_inline_calls): Do not call
        cgraph_node_remove_callees.
        * cgraphbuild.c (remove_cgraph_callee_edges): New function.
        (pass_remove_cgraph_callee_edges): New variable.

        * passes.c (init_optimization_passes): Add
        pass_remove_cgraph_callee_edges after early inlining and before all
        late intraprocedural passes.

2009-01-05  Martin Jambor  <mjambor@suse.cz>

	* tree-dfa.c (get_ref_base_and_extent): Added a FIXME comment.

2008-12-25  Martin Jambor  <mjambor@suse.cz>

	* ipa-prop.h (jump_func_type): Rename IPA_UNKNOWN, IPA_CONST,
	IPA_CONST_MEMBER_PTR, and IPA_PASS_THROUGH to IPA_JF_UNKNOWN,
	IPA_JF_CONST, IPA_JF_CONST_MEMBER_PTR, and IPA_JF_PASS_THROUGH
	respectively.
	* tree-dfa.c (get_ref_base_and_extent): Return -1 maxsize if
	seen_variable_array_ref while also traversing a union.

2008-12-09  Jan Hubicka  <jh@suse.cz>

	Merge from mainline.

2008-12-06  Jan Hubicka  <jh@suse.cz>

	* cp/decl2.c (build_java_method_aliases): Ignore everything that is
	not externally visible.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	Bring from lto-branch:
	2008-09-03  Doug Kwan  <dougkwan@google.com>

	* cgraphbuild.c (initialize_inline_failed): Use cgraph_inline_failed_t
	enums instead of reason strings.
	* cgraph.c (cgraph_create_edge): Same.
	(cgraph_inline_failed_string): New function.
	* cgraph.h (cgraph_inline_failed_t): New enum type.
	(cgraph_inline_failed_string): New prototype.
	(struct cgraph_edge): Change type of INLINED_FAILED from constant
	char pointer to cgraph_inline_failed_t.
	(cgraph_inline_p): Adjust prototype to use cgraph_inline_failed_t.
	(cgraph_default_inline_p): Ditto.
	* gcc/cgraphunit.c (cgraph_inline_p): Change type of parameter REASON
	to cgraph_inline_failed_t pointer.
	* cif-code.def: New file.
	* ipa-inline.c (cgraph_mark_inline_edge): Use an enum instead of a
	reason string.
	(cgraph_check_inline_limits): Change type of REASON to pointer to
	cgraph_inline_failed_t.  Replace reason strings with enums.
	(cgraph_default_inline_p): Ditto.
	(cgraph_recursive_inlining_p): Ditto.
	(update_caller_keys): Change type of FAILED_REASON to
	cgraph_inline_failed_t.
	(cgraph_set_inline_failed): Change type of REASON to pointer to
	cgraph_inline_failed_t.  Call cgraph_inline_failed_string to
	convert enums to strings for text output.
	(cgraph_decide_inlining_of_small_function): Change FAILED_REASON
	to be of type cgraph_inline_failed_t.  Replace reason strings with
	enums.  Call cgraph_inline_failed_string to covert enums
	to strings for text output.
	(cgraph_decide_inlining): Replace reason strings with enums.
	(cgraph_decide_inlining_incrementally): Change type of FAILED_REASON
	to cgraph_inline_failed_t type.  Call cgraph_inline_failed_string
	for text output.
	* tree-inline.c (expand_call_inline): Change type of REASON
	to cgraph_inline_failed_t.  Replace reason strings with enums.
	Call cgraph_inline_failed_string for text output.
	* Makefile.in (CGRAPH_H): Add cif-code.def to dependencies.
	(cgraph.o): Ditto.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_node, cgraph_remove_node, dump_cgraph_node,
	cgraph_clone_node): Remove master clone handling.
	(cgraph_is_master_clone, cgraph_master_clone): Remove.
	* cgraph.h (master_clone): Remove.
	(cgraph_is_master_clone, cgraph_master_clone): Remove.
	* ipa-type-escape.c (type_escape_execute): Remove use of master clone.
	( tree-ssa-structalias.c (ipa_pta_execute): LIkewise.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	* cgraph.c (cgraph_function_body_availability): Inline functions are
	always available.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	* doc/invoke.texi (inline-call-cost): Remove.
	(early-inlining-insns): Update.
	* cgraphbuild.c (compute_call_stmt_bb_frequency): Add function argument;
	behave sanely without profile info computed.
	(build_cgraph_edges, rebuild_cgraph_edges): Update.
	* cgraph.c (dump_cgraph_node): Update dumps.
	* cgraph.h (cgraph_local_info): Remove self_insns;
	add self_size, size_inlining_benefit, self_time, time_inlining_benefit.
	(cgraph_global_info): Add time, size field; remove insns field.
	(compute_call_stmt_bb_frequency): Update prototype.
	* ipa-cp.c (ipcp_cloning_candidate_p): Use size instead of insns.
	(ipcp_estimate_growth): Likewise.
	(ipcp_estimate_cloning_cost): Likewise.
	(ipcp_insert_stage): Likewise.
	* ipa-inline.c (MAX_TIME): Add.
	(overall_insns): Remove.
	(overall_size): New static var.
	(cgraph_estimate_time_after_inlining): New function.
	(cgraph_estimate_size_after_inlining): Rewrite to size metrics.
	(cgraph_clone_inlined_nodes): Use size instead of insns.
	(cgraph_mark_inline_edge): Update size and time instead of insns.
	(cgraph_estimate_growth): Use size instead of isnsn.
	(cgraph_check_inline_limits): Use size instead of insns.
	(cgraph_edge_badness): Compute badness based on self time and size.
	(cgraph_decide_recursive_inlining): Use time and size.
	(cgraph_decide_inlining_of_small_function): Bookkeep time and size.
	(cgraph_decide_inlining): Likewise.
	(cgraph_decide_inlining_incrementally): Likewise; handle
	PARAM_EARLY_INLINING_INSNS.
	(likely_eliminated_by_inlining_p): New predicate.
	(estimate_function_body_sizes): New function.
	(compute_inline_parameters): Update.
	(pass_inline_param): Add it a name parameter.
	(cgraph_maybe_hot_edge_p): Return false when optimizing size.
	* ipa-prop.c (ipa_note_param_call): Use compute_call_stmt_bb_frequency.
	* tree-inline.c (eni_inlining_weights): Remove.
	(estimate_num_insns): Recognize loads and stores; be more sane on switch
	statement times; builtin_expect is always free; estimate return value cost.
	(init_inline_once): Kill inlining weights.
	* tree-inline.h (eni_inlining_weights): Remove.
	(eni_weights): Add time_based flag.
	* parms.def (PARAM_INLINE_CALL_COST): Remove.
	(PARAM_EARLY_INLINING_INSNS): Add.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	* tree-pass.h (pass_fixup_cfg, pass_local_pure_const): Declare.
	* ipa-pure-const.c (funct_state_d): Add can throw field; make
	state_set_in_source enum
	(check_decl): Ignore memory tags; do not set fake looping flags;
	dump diagnostics.
	(check_operand, check_tree, check_rhs_var, check_lhs_var,
	get_asm_expr_operands, scan_function_op, scan_function_stmt): Remove.
	(check_call, analyze_function): Rewrite.
	(check_stmt): New.
	(add_new_function): Update call of analyze_function.
	(generate_summary): Add call of analyze_function.
	(propagate): Propagate can_throw; handle state_set_in_source correctly.
	(local_pure_const): New function.
	(pass_local_pure_const): New pass.
	* ipa-inline.c (inline_transform): Set after_inlining.
	* tree-eh.c (stmt_can_throw_external): New.
	* tree-optimize.c (execute_fixup_cfg): Do not set after_inlining;
	work with aliasing built.
	* tree-flow.h (stmt_can_throw_external): New.
	* passes.c (init_optimization_passes): Schedule fixup_cfg pass early;
	and local pure/const pass in early and late optimization queue.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	* ipa-pure-const.c (check_decl): Do not handle used attribute
	on local objects specially; readonly reads are safe.
	(look_for_address_of): Remove.
	(check_rhs_var, check_lhs_var): Remove tree_could_trap check.

2008-11-12  Jan Hubicka  <jh@suse.cz>

	Created the branch.
