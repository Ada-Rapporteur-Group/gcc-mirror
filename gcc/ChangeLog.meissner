2018-04-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-protos.h (output_large_address_load_store):
	Add declaration.
	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Add
	support for SFmode/DFmode to use large addresses.
	(print_toc_upper): Delete %m, %M support from print_operand, and
	associated functions.
	(print_operand_large_address_upper) Likewise.
	(print_toc_lower) Likewise.
	(print_operand_large_address_lower) Likewise.
	(print_operand) Likewise.
	(split_large_address_internal): Split large address splitting into
	two functions.
	(split_large_address): Likewise.
	(output_large_address_load_store): New function to output the two
	instructions that make up a large address load/store.
	* config/rs6000/rs6000.md (LADDR): Add support for SFmode/DFmode
	to use large addresses.
	(LADDR_FLOAD): Fix typo.
	(large_mov<mode>_load): Change all large address load/stores to
	use output_large_address_load_store instead of using %m/%M.
	(large_mov<mode>_store): Likewise.
	(extendsfdf2): Add support for SFmode/DFmode to use large
	addresses.
	(large_extendsfdf): Likewise.
	(extendsfdf2_fpr): Likewise.

2018-04-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (large_address_valid): Make sure TOC
	reference is appropriately aligned.

2018-04-27  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (large_address_valid): Treat all TOC
	references as large.

2018-04-26  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 259686.
	* REVISION: Update subversion id.

2018-04-26  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 259686.
	* REVISION: Update subversion id.

2018-04-26  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (fusion_gpr_load_p): Undo last change.

2018-04-23  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (fusion_gpr_load_p): Don't match if large
	addressing is enabled for the mode being loaded.

2018-04-23  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/constraints.md (wG constraint): Delete TOC fusion
	support (in favor of -mlarge-address).
	* config/rs6000/predicates.md (toc_fusion_or_p9_reg_operand):
	Rename toc_fusion_or_p9_reg_operand to p9_fusion_reg_operand.
	(p9_fusion_reg_operand): Likewise.
	(toc_fusion_mem_raw): Delete, remove TOC fusion support.
	(toc_fusion_mem_wrapped): Likewise.
	* config/rs6000/rs6000-cpus.def (POWERPC_MASKS): Likewise.
	* config/rs6000/rs6000.opt (-mtoc-fusion): Likewise.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Likewise.
	(rs6000_debug_reg_global): Likewise.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	(rs6000_option_override_internal): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_opt_masks): Likewise.

	* config/rs6000/rs6000.h (TARGET_TOC_FUSION_INT): Likewise.
	(TARGET_TOC_FUSION_FP): Likewise.
	* config/rs6000/rs6000.md (toc fusion splitters): Likewise.
	(toc_fusionload_<mode>): Likewise.
	(toc_fusionload_di): Likewise.
	(fusion_gpr_load_<mode>): Rename toc_fusion_or_p9_reg_operand to
	p9_fusion_reg_operand.
	(fusion peephole2): Likewise.
	* doc/md.texi (PowerPC constraints): Delete wG documentation.

2018-04-20  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (large_address_valid): Validate large
	address with rs6000_legitimate_offset_address_p.

2018-04-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Enable
	large address load functions.
	(move_valid_p): Int large address loads no longer use the default
	mov insn.
	(mem_operand_gpr): Don't allow large addresses.
	(mem_operand_ds_form): Likewise.
	(rs6000_emit_move): Don't split large address moves here, instead
	do it via the first split pass.
	(emit_large_address_load): Don't allocate scratch register here.
	Don't emit an address note.
	(emit_large_address_store): Likewise.
	* config/rs6000/rs6000.md (LADDR*): Rework the large address
	support to operate via define_splits rather than creating the load
	or store during rs6000_emit_move.  Specialize patterns into short
	ints, DImode, and SF/FP modes.
	(float<uns>di<mode>2_mem): Call gen_large_movdi_load_fp instead of
	gen_large_movdi_load.
	(movdi_internal64): Undo changes that handled large address loads.

2018-04-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (movdi_internal64): Reorder loads, so
	the normal load comes before the large memory load.

2018-04-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates (any_mem_operand): Rename from
	large_or_normal_mem_operand.
	* config/rs6000/rs6000.c (rs6000_emit_move): Only create large
	address load/store insns if power9 fusion.  Explicitly allocate
	the scratch register.
	(large_address_valid): Rework validating TOC addresses.
	* config/rs6000/rs6000.md (UNSPEC_LADDR_LOAD): Use two different
	unspecs for load/store.
	(UNSPEC_LADDR_STORE): Likewise.
	(UNSPEC_LADDRESS): Likewise.
	(FP_CVT_P): New code attribute to say whether we have signed or
	unsigned fp conversion.
	(LADDR): Delete, not used after rework.
	(LADDR_I): Likewise.
	(LADDR_{G,F,V}REG): Likewise.
	(LADDR_{G,F,V}MEM): Likewise.
	(LADDR_{G,F,V}LOAD): Add QI, HI, SI versions.
	(LADDR_{G,F,V}STORE): Likewise.
	(large_mov<mode>_load, QHSI iterator): Add QI, HI, SI versions
	that only load/store GPRs.  At present, this is not yet called.
	(large_mov<mode>_store, QHSI iterator): Likewise.
	(large_movdi_load): Make DImode load either GPRs or vector
	registers.  Remove splitting if not power9 fusion.
	(large_movdi_store): Likewise.
	(large_mov<mode>_load, SFDF iterator): Add SF, DF versions that
	only load/store vector registers.  At present, this is not
	called.
	(large_mov<mode>_store, SFDF iterator): Likewise.
	(movDI splitter for large addresses): Delete splitter.
	(floatunsdidf2): Combine floatunsdidf2 expander and insn.
	(floatunsdidf2_fcfidu): Likewise.
	(floatdidf2_mem): Combine all DI->SF/DF, signed/unsigned
	conversions from memory into one insn.  Add support for large
	addresses.
	(float<uns>di<mode>2_mem): Likewise.
	(floatunsdidf2_mem): Likewise.
	(floatdisf2_mem): Likewise.
	(floatunsdisf2_mem): Likewise.

2018-04-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_secondary_reload): Use the
	rs6000_secondary_reload_gpr function to reload large addresses.
	(rs6000_secondary_reload_gpr): Likewise.
	* config/rs6000/rs6000.md (floatdidf2_mem): Protect DImode to
	floating point conversion functions from memory against large
	addresses.  Also add ISA 3.0 d-form memory support.
	(floatunsdidf2_mem): Likewise.
	(floatdisf2_mem): Likewise.
	(floatunsdisf2_mem): Likewise.

2018-04-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wC): New constraints for large
	address and explicitly not large address.
	(wN): Likewise.
	* config/rs6000/predicates.md (s32bit_cint_operand): New predicate
	for signed 32-bit integer constant.
	(large_mem_operand): New predicate for memory with a large
	address.
	(large_or_normal_mem_operand): New predicate for memory with
	normal or large adresses.
	* config/rs6000/rs6000.opt (-mlarge-address): New switch, enable
	large address support.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Add fields for
	functions to do large address loads and stores.  Add boolean to
	say whether a mode supports large addresses.
	(rs6000_debug_print_mode): Print large address support if
	-mdebug=reg.
	(rs6000_init_hard_regno_mode_ok): Enable large address support for
	DImode.
	(rs6000_option_override_internal): The -mlarge-address option is
	only valid on 64-bit medium code model.
	(move_valid_p): New function to validate whether a move insn is
	valid.
	(rs6000_legitimate_address_p): Allow large addresses before
	register allocation.
	(rs6000_emit_move): If the mode supports large addresses, call the
	appropriate function to do large addresses that add a base
	register temporary to load the upper bits.
	(rs6000_secondary_reload_memory): Add support for large
	addresses.
	(rs6000_secondary_reload_inner): Likewise.
	(int_is_32bit): New function to say if an integer constant is
	32-bits.
	(split_large_integer): New function that given a large address,
	split off the upper bits, and return a D/DS/DQ-form offset to use
	for the lower bits.
	(print_toc_upper): New functions to print the upper and lower
	parts of a large address.
	(print_operand_large_address_upper): Likewise.
	(print_toc_lower): Likewise.
	(print_operand_large_address_lower): Likewise.
	(print_operand): Add %m<n> and %M<n> to print the lower and upper
	parts of a large address.
	(rs6000_opt_masks): Add -mlarge-address.
	(emit_large_address_load): Emit a large address load or store.
	(emit_large_address_store): Likewise.
	(large_address_valid): Return true if an address is a large
	address.
	(split_large_address): Split a large address, emitting the upper
	part, and returning the lower part to use in the new memory
	operand.
	* config/rs6000/rs6000.md (UNSPEC_LADDRESS): New unspec.
	(LADDR*): New mode iterators and attributes to support large
	addresses.
	(large_mov<mode>_load): New insns to load from or store to a large
	address.
	(large_mov<mode>_store): Likewise.
	(large address splitter): Add splitter in case a large address
	store is generated to use large_mov<mode>_store.
	(movdi_internal32): Use move_valid_p to validate the move.
	(movdi_internal64): Use move_valid_p to validate the move.  Add
	support for loads using power8 fusion, which require the load be
	done to a base register.  Use wN to make sure large address stores
	are not handled here.
	(high_plus_int): New insn, recognize using HIGH to set the high
	bits of an address with a large integer constant.

2018-04-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md: Undo all changes, start back with
	the ext-addr rev2 patches 1-12 versions.
	* config/rs6000/predicates.md: Likewise.
	* config/rs6000/rs6000-protos.h: Likewise.
	* config/rs6000/rs6000.c: Likewise.
	* config/rs6000/rs6000.md: Likewise.
	* config/rs6000/rs6000.opt: Likewise.

2018-04-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 259400.
	* REVISION: Update subversion id.

2018-04-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 259400.
	* REVISION: Update subversion id.

2018-04-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (toc_mem_operand): Delete.
	* config/rs6000/rs6000-protos.h (emit_large_address_load): New
	declaration.
	(emit_large_address_store): Likewise.
	(split_toc_memory): Delete.
	* config/rs6000/rs6000.c (rs6000_emit_move): Call
	emit_large_address_{load,store} to rewrite large addresses.
	(print_toc_upper): Move print_operand %M, %m code to separate
	functions.  Add support for TOC addresses.  Drop support for
	constant int memory addresses.
	(print_operand_large_address_upper): Likewise.
	(print_toc_lower ): Likewise.
	(print_operand_large_address_lower): Likewise.
	(print_operand): Likewise.
	(split_toc_memory): Make static, call it from the large address
	load/store  functions.
	(emit_large_address_load): New functions to emit the appropriate
	pattern for loads and stores with large addresses.
	(emit_large_address_store): Likewise.
	(large_address_valid): Don't allow constant int addresses.  Do
	allow TOC references.
	(split_large_address): Likewise.
	* config/rs6000/rs6000.md (large address splitters): Rework TOC
	breakout splitters to do both large address and toc breakout
	splitters.

2018-04-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (toc_mem_operand): New predicate.
	* config/rs6000/rs6000-protos.h (split_toc_memory): New
	declaration.
	* config/rs6000/rs6000.c (create_TOC_reference): Remove
	-mtoc-breakout code test.
	(split_toc_memory): New function to split a TOC reference for
	-mtoc-breakout.
	* config/rs6000/rs6000.md (store TOC splitter): New splitters for
	-mtoc-breakout that uses the section anchor as a base register for
	all accesses.
	(load TOC splitter): Likewise.
	(store TOC peephole2): New peephole2 that undoes the TOC splitting
	if there is only one reference to the TOC.
	(load TOC peephole2): Likewise.

2018-03-30  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (create_TOC_reference): Add
	-mtoc-breakout temporary test.
	* config/rs6000/rs6000.opt (-mtoc-breakout): Likewise.

2018-03-29  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_emit_move): Move large address
	test after we've eliminated memory to memory moves.
	(split_large_address): Add a gcc_unreachable call.

2018-03-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wC): New constraint for large
	addresses.
	(wN): Likewise.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Add fields for
	the insn to create the large address load/store wrapper.
	(rs6000_debug_print_mode): Print whether we have large address
	load/store wrappers.
	(rs6000_init_hard_regno_mode_ok): Set the large address load/store
	wrappers for DImode.
	(move_valid_p): Don't allow large addresses in normal moves.
	(rs6000_legitimate_address_p): Recognize large addresses before
	register allocation.
	(rs6000_emit_move): Convert large addresses into a separate insn
	that can possibly add a scratch register.
	(print_operand): Add %M<n> and %m<n> for printing the upper and
	lower parts of large addresses.
	* config/rs6000/rs6000.md (UNSPEC_LARGE_ADDRESS): New unspec.
	(LARGE*): New mode iterators and attributes to support large
	addresses.
	(large_mov<mode>_load): Large address load insns.
	(large_mov<mode>_store): Large address store insns.
	(movdi_internal32): Add support for large addresses.
	(movdi_internal64): Likewise.

2018-03-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (large_mem_operand): New predicate
	to recognize large addresses.
	* config/rs6000/rs6000-protos.h (move_valid_p): Add declaration.
	(large_address_valid): Likewise.
	(split_large_address): Likewise.
	* config/rs6000/rs6000.opt (-mlarge-address): New switch.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Add boolean to
	say large addresses are supported.
	(rs6000_debug_print_mode): Print if a mode supports large
	addresses.
	(rs6000_init_hard_regno_mode_ok): Mark that DImode supports large
	addresses.
	(move_valid_p): Return if normal move insns are valid.
	(int_is_32bit): Return true if an integer constant is 32-bits.
	(split_large_integer): Split 32-bit constants into two parts that
	can be set with ADDIS and ADDI.
	(rs6000_opt_masks): Add -mlarge-address.
	(large_address_valid): New function, return if large addresses are
	valid.
	(split_large_address): New function, split a large address into
	smaller pieces.
	* config/rs6000/rs6000.md (movdi_internal32): Call move_valid_p to
	validate the move.
	(movdi_internal64): Likewise.

2018-03-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md: Delete changes, other than the
	changes in ext-addr.
	* config/rs6000/predicates.md: Likewise.
	* config/rs6000/rs6000-protos.h: Likewise.
	* config/rs6000/rs6000.c: Likewise.
	* config/rs6000/rs6000.md: Likewise.
	* config/rs6000/rs6000.opt: Likewise.

2018-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wN): New constraint not to allow
	large memory addresses.
	* config/rs6000/predicates.md (memory_operand_not_large): New
	predicate not to allow large memory addresses.
	(reg_or_mem_operand): Call it.
	(fusion_offsettable_mem_operand): Likewise.
	(large_mem_operand): Change large_address_operand to
	large_address_operand.
	* config/rs6000/rs6000-protos.h (large_address_valid): Likewise.
	(rs6000_init_hard_regno_mode_ok): Add SF/DF support to large
	addresses.
	(move_valid_p): Change large_address_operand to
	large_address_operand.
	(rs6000_legitimate_address_p): Likewise.
	(large_address_valid): Likewise.
	(mem_operand_gpr): Don't allow large addresses.
	(mem_operand_ds_form): Likewise.
	(print_operand): Print %m<n> value as negative if needed.
	* config/rs6000/rs6000.md (LARGE*): Add mode iterators and mode
	attributes to support large addresses.
	(large address splitters): Move large address support before the
	moves.  Add SF/DF to large address support.
	(large_mov<mode>_load): New patterns to do large address loads.
	(large_mov<mode>_store): New patterns to do large address stores.
	(ptrm mode attribute): Change m constraint to wN.
	(zero_extendsi<mode>2): Likewise.
	(extendsfdf2_fpr): Likewise.
	(floatdidf2_mem): Likewise.
	(floatunsdidf2_mem): Likewise.
	(floatdisf2_mem): Likewise.
	(floatunsdisf2_mem): Likewise.
	(movsi_internal1): Likewise.
	(movsi_internal1_single): Likewise.
	(movsi_from_sf): Likewise.
	(movdi_from_sf_zero_ext): Likewise.
	(movsi_from_df): Likewise.
	(mov<mode>_internal, QHI iterator): Likewise.
	(movcc_internal1): Likewise.
	(movsf_hardfloat): Likewise.
	(movsd_hardfloat): Likewise.
	(mov<mode>_softfloat): Likewise.
	(movsf_from_si): Likewise.
	(mov<mode>_hardfloat32, FMOVE64 iterator): Likewise.
	(mov<mode>_hardfloat64, FMOVE64 iterator): Likewise.
	(mov<mode>_64bit_dm): Likewise.
	(movtd_64bit_nodm): Likewise.
	(mov<mode>_32bit): Likewise.
	(extenddf<mode>2_fprs): Likewise.
	(movdi_internal32): Likewise.
	(movdi_internal64): Likewise.
	(stack_protect_testsi): Likewise.
	(<bd>_<mode>): Likewise.
	(<bd>tf_<mode>): Likewise.
	(unpack<mode>_dm): Likewise.
	(bswap<mode>2_extenddi): Call memory_operand_not_large instead of
	memory_operand.
	(bswaphi2_extendsi): Likewise.
	(bswap<mode>2_load): Likewise.
	(bswap<mode>2_store): Likewise.
	(bswapdi2_load): Likewise.
	(bswapdi2_store): Likewise.
	(ashdi3_extswsli_dot): Likewise.
	(ashdi3_extswsli_dot2): Likewise.
	(signbit<mode>2_dm_mem): Likewise.
	(fix<uns>_trunc<SFDF:mode><QHSI:mode>2_mem): Likewise.
	(floatdidf2_mem): Likewise.
	(UNSPEC_MOVSI_GOT splitter): Likewise.
	(save_stack_nonlocal): Likewise.
	(restore_stack_nonlocal): Likewise.
	(call_indirect_aix<mode>): Likewise.
	(call_indirect_aix<mode>_nospec): Likewise.
	(call_value_indirect_aix<mode>): Likewise.
	(call_value_indirect_aix<mode>_nospec): Likewise.
	(probe_stack_<mode>): Likewise.
	(stack_protect_set): Likewise.
	(stack_protect_setsi): Likewise.
	(stack_protect_setdi): Likewise.
	(stack_protect_test): Likewise.
	(stack_protect_testsi): Likewise.
	(stack_protect_testdi): Likewise.
	(crsave): Likewise.
	(stmw_operation): Likewise.
	(any_parallel_operand): Likewise.
	(save_gpregs_<mode>_r12): Likewise.
	(save_gpregs_<mode>_r1): Likewise.
	(save_fpregs_<mode>_r11): Likewise.
	(save_fpregs_<mode>_r12): Likewise.
	(save_fpregs_<mode>_r1): Likewise.
	(lmw): Likewise.
	(restore_gpregs_<mode>_r11): Likewise.
	(restore_gpregs_<mode>_r12): Likewise.
	(restore_gpregs_<mode>_r1): Likewise.
	(return_and_restore_gpregs_<mode>_r11): Likewise.
	(return_and_restore_gpregs_<mode>_r12): Likewise.
	(return_and_restore_gpregs_<mode>_r1): Likewise.
	(return_and_restore_fpregs_<mode>_r11): Likewise.
	(return_and_restore_fpregs_<mode>_r12): Likewise.
	(return_and_restore_fpregs_<mode>_r1): Likewise.
	(return_and_restore_fpregs_aix_<mode>_r11): Likewise.
	(return_and_restore_fpregs_aix_<mode>_r1): Likewise.
	(fix<uns>_trunc<IEEE128:mode><QHSI:mode>2_mem): Likewise.

2018-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wC): New constraint for large
	addresses.
	* config/rs6000/predicates.md (large_mem_operand): New predicate
	for large addresses.
	* config/rs6000/rs6000.opt (-mlarge-address): New switch to enable
	for large addresses.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Add large
	address flag.
	(int_is_32bit): New helper function to say whether an integer is
	32-bits.
	(split_large_integer): New function, split a 32-bit integer into
	ADDIS and ADDI/memory parts.
	(rs6000_debug_print_mode): Print if the mode accepts large
	addresses.
	(rs6000_init_hard_regno_mode_ok): Mark that DImode supports large
	addresses.
	(move_valid_p): New function to validate move insns.  Don't allow
	naked large addresses after register allocation.
	(rs6000_legitimate_address_p): Allow large addresses.
	(print_operand): Use %M<n> and %m<n> for printing large
	addresses.
	(rs6000_opt_masks): Add -mlarge-address.
	(large_addr_operand): Return true if the operand is a large
	address.
	* config/rs6000/rs6000.md (UNSPEC_LARGE_ADDRESS): New unspec.
	(movdi_internal32): Use move_valid_p.
	(movdi_internal64): Likewise.
	(movdi splitters): Add initial support for large addresses.
	(large_movdi_load): New insn for large address load.
	(large_movdi_store): New insn for large address store.

2018-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Eliminate
	unused insn code fields that were originally meant for adding
	fusion operations.
	(rs6000_debug_print_mode): Likewise.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	* config/rs6000/rs6000.md (fusion_gpr_load_<mode>): Turn off insn
	geneator for the fusion functions that are not referenced by name.
	(fusion_gpr_<P:mode>_<GPR_FUSION:mode>_store): Likewise.
	(fusion_gpr_<P:mode>_<GPR_FUSION:mode>_load): Likewise.
	(fusion_vsx_<P:mode>_<FPR_FUSION:mode>_load): Likewise.
	(fusion_vsx_<P:mode>_<FPR_FUSION:mode>_store): Likewise.

<ext-addr.rev2-patch11b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (addr_mask_type): Grow mask to 16 bits.
	(RELOAD_REG_DS_OFFSET): New mask for DS-form addresses.
	(mode_supports_ds_form): New helper function to return if a reload
	register class uses DS-form addresses.
	(rs6000_debug_addr_mask): Print if we have DS-form addresses.
	(rs6000_setup_reg_addr_masks): Note which reload register classes
	use DS-form addresses.

<ext-addr.rev2-patch10b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Move
	toc fusion support after the Linux port has set the default code
	model.  Do not enable it by default.  If either -mtoc-fusion or
	-mpower8-fusion-sign is used with -mno-power8-fusion, clear the
	toc fusion/sign bits.

<ext-addr.rev2-patch09b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_softfloat, FMOVE32):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch08b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_softfloat64, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch07b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_hardfloat64, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch06b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_softfloat32, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch05b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_hardfloat32, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch04b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_pre_incdec_p): Add
	additional argument to specify the reload register class to use,
	defaulting to RELOAD_REG_ANY.
	(mode_supports_pre_modify_p): Likewise.
	(mode_supports_dq_form): Likewise.

<ext-addr.rev2-patch03b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_d_form): Rename
	mode_supports_vmx_dform to mode_supports_d_form.  Add an optional
	argument to say which reload register class to use.  Change all
	callers to pass in the RELOAD_REG_VMX class explicitly.
	(rs6000_secondary_reload): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_secondary_reload_class): Likewise.

<ext-addr.rev2-patch02b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_vmx_dform): Move these
	functions to be next to the other mode_supports functions.
	(mode_supports_dq_form): Likewise.

<ext-addr.rev2-patch01b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_dq_form): Rename
	mode_supports_vsx_dform_quad to mode_supports_dq_form.
	(mode_supports_vsx_dform_quad): Likewise.
	(quad_address_p): Likewise.
	(reg_offset_addressing_ok_p): Likewise.
	(offsettable_ok_by_alignment): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(legitimate_lo_sum_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_secondary_reload_inner): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_output_move_128bit): Likewise.

2018-03-22   Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch subversion id 258717

