2014-02-04  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 207480.
	* REVISION: Update subversion id.

2014-01-31  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* doc/extend.texi (Floating Types): Add documentation for
	__float128 and __ibm128 on PowerPC systems.

	* doc/invoke.texi (-mlong-double-64): Document the long double
	size switches.
	(-mlong-double-128): Likewise.
	(-mlong-double-ieee128): Document the new switches to control
	whether long double is IEEE 128-bit or IBM double double.

	* config/rs6000/rs6000-common.c (rs6000_handle_option): Drop
	-mlong-double-<size> support.

	* config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS): Move
	-mlong-double-<size> to target option bits.
	* config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.
	* config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.
	* config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.

	* config/rs6000/predicates.md (easy_fp_constant): Handle IEEE
	128-bit constants.

	* config/rs6000/rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Delete the
	-mieee128-vector option.  Change -mlong-double-<size> and
	-mabi=ieeelongdouble/-mabi=ibmlongdouble options to be target
	option bits.
	(POWERPC_MASKS): Likewise.
	(power7 cpu): Likewise.

	* config/rs6000/rs6000.opt (-mabi=ieeelongdouble): Change option
	to -mlong-double-ieee128.  Delete warning on its use.
	(-mabi=ibmlongdouble): Change option to -mlong-double-ibm128.
	(-mlong-double-): Delete -mlong-double-<size>, and replace it with
	-mlong-double-64, -mlong-double-128, -mlong-double-ieee128,
	-mlong-double-ibm128 options to control the size and format of the
	long double type.
	(-mlong-double-64): Likewise.
	(-mlong-double-128): Likewise.
	(-mlong-double-ieee128): Likewise.
	(-mlong-double-ibm128): Likewise.

	* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define
	__LONG_DOUBLE_IEEE128__ and __LONG_DOUBLE_IBM128__ depending on
	the long double format.  Delete support for the temporary
	-mieee128-vector switch.

	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Change how
	long double size is printed.
	(rs6000_init_hard_regno_mode_ok): Delete temporary
	-mieee128-vector switch.  Replace -mlong-double-<size> and
	-mabi=<fmt>longdouble with -mlong-double-64, -mlong-double-128,
	-mlong-double-ieee128, and -mlong-double-ibm128.  Only allow
	selecting IEEE 128 support if VSX is avaiable.
	(rs6000_option_override_internal): Likewise.
	(rs6000_return_in_memory): Drop temporary -mieee128-vector, use
	-mvsx instead.
	(rs6000_function_arg_boundary): Rework IEEE 128-bit support.
	(rs6000_init_builtins): Only enable __float128 and __ibm128 if VSX
	is available.
	(init_float128_ibm): Update comment.
	(init_float128_ieee): If VSX, use the normal __<op>tf<n> names
	instead of __ieee128....  If not VSX, retain the existing
	convention of using names of the form _q_<op>.
	(rs6000_opt_masks): Update the long double options.

	* config/rs6000/rs6000.h (FLOAT128_VECTOR_P): Drop support for the
	temporary -mieee128-vector switch, just test -mvsx.
	(FLOAT128_PAIRED_P): Likewise.
	(TARGET_LONG_DOUBLE_128): Delete, target macro is now defined in
	rs6000.opt.
	(TARGET_IEEEQUAD): Likewise.

2014-01-29  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (int_reg_operand_not_pseudo): New
	predicate to return true if op is a hard GPR register.

	* config/rs6000/rs6000.opt (-mabi=ieeelongdouble): Remove warning
	if the option was used.
	(-mabi=ibmlongdouble): Likewise.

	* config/rs6000/rs6000.c (scalar_float_not_vector_p): New helper
	function to differentiate scalar floating point that is passed in
	the traditional floating point registers from IEEE 128-bit
	floating point passed in vector registers.
	(rs6000_hard_regno_mode_ok): Make sure TF/XFmode uses the correct
	number of registers.
	(USE_FP_FOR_ARG_P): Do not use scalar float registers for IEEE
	128-bit floating point passed in vector registers.
	(rs6000_aggregate_candidate): Do not count IEEE 128-bit that is
	passed as a vector as a special aggregate.
	(rs6000_discover_homogeneous_aggregate): Likewise.
	(init_cumulative_args): Record whether this call is a library
	call.  Distinguish between scalar floating point values passed in
	traditional FP registers from those passed in vector registers.
	(rs6000_function_arg_advance_1): Likewise.
	(rs6000_function_arg): Likewise.
	(rs6000_arg_partial_bytes): Likewise.
	(rs6000_function_value): Likewise.
	(rs6000_libcall_value): Likewise.

	* config/rs6000/rs6000.h (CUMULATIVE_ARGS): Add field to denote if
	this is a library function.

	* config/rs6000/vsx.md (VSX_L): Add XFmode, TFmode if those types
	are passed in vector registers.
	(VSX_M): Likewise.
	(VSX_M2): Likewise.

	* config/rs6000/altivec.md (VM): Add XFmode, TFmode if those types
	are passed in vector registers.
	(VM2): Likewise.

	* config/rs6000/rs6000.md (mov<mode>_internal, 128-bit FP): Handle
	spliting IEEE 128-bit floating point if it is in GPRs.

2014-01-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 207203.
	* REVISION: Update subversion id.

2014-01-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 206895.
	* REVISION: Update subversion id.

2014-01-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 206671.
	* REVISION: Update subversion id.

2014-01-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_M): Do not include XFmode.

	* config/rs6000/rs6000.c (rs6000_hard_regno_nregs_internal): Use
	FLOAT128_PAIRED_P, FLOAT128_IBM_P, FLOAT128_IEEE_P,
	FLOAT128_VECTOR_P to classify 128-bit floating point.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_return_in_memory): Likewise.
	(rs6000_function_arg_boundary): Likewise.
	(rs6000_function_arg_advance_1): Likewise.
	(rs6000_function_arg): Likewise.
	(rs6000_pass_by_reference): Likewise.
	(rs6000_init_builtins): Always add support __float128 and
	__ibm128, even if not -mvsx.
	(init_float128_ibm): New functions to set up all of the optab
	libfunc interfaces for IBM 128-bit and IEEE 128-bit floating
	point.
	(init_float128_ieee): Likewise.
	(rs6000_init_libfuncs): Call init_float128_ibm, init_float128_ieee
	to properly setup XFmode, TFmode, and JFmode.
	(rs6000_cannot_change_mode_class): Use FLOAT128_PAIRED_P,
	FLOAT128_IBM_P, FLOAT128_IEEE_P, FLOAT128_VECTOR_P to classify
	128-bit floating point.
	(print_operand): Likewise.
	(rs6000_generate_compare): Likewise.
	(rs6000_split_multireg_move): Likewise.
	(spe_func_has_64bit_regs_p): Likewise.
	(rs6000_register_move_cost): Likewise.
	(rs6000_function_value): Likewise.
	(rs6000_libcall_value): Likewise.

	* config/rs6000/vsx.md (VSX_L): Add XFmode and TFmode if those
	types occupy a single VSX register.

	* config/rs6000/rs6000.h (IEEE128_MODE_P): Delete, rename macros
	to be more consistent.
	(IBM128_MODE_P): Likewise.
	(FLOAT128_IEEE_P): New macros to classify 128-bit floating point.
	(FLOAT128_IBM_P): Likewise.
	(FLOAT128_VECTOR_P): Likewise.
	(FLOAT128_PAIRED_P): Likewise.
	(SLOW_UNALIGNED_ACCESS): Use new FLOAT128 macros for 128-bit
	floating point.
	(HARD_REGNO_CALLER_SAVE_MODE): Likewise.
	(HARD_REGNO_CALL_PART_CLOBBERED): Likewise.
	(ALTIVEC_VECTOR_MODE): Likewise.

	* config/rs6000/rs6000.md (FMOVE128): Remove conditions from the
	macro attribute, and add XFmode, JFmode.
	(FMOVE128_GPR): Add XFmode, TFmode.
	(mov<mode>, 128-bit floating point): Add test for whether this is
	a paired floating point move.

2014-01-10  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000-modes.def (JFmode): Add mode to represent
	IBM 128-bit floating point.

	* config/rs6000/rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Set
	-mieee128-vector.
	(ISA_2_7_MASKS_SERVER): Likewise.
	(power7 cpu): Likewise.

	* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): If
	-mieee128-vector, define ___IEEE128_VECTOR__.

	* config/rs6000/rs6000.opt (-mieee128-vector): New debug switch to
	control whether IEEE 128-bit floating point type can go in a
	single vector register.

	* config/rs6000/rs6000.c (rs6000_hard_regno_nregs_internal): IBM
	128-bit floating point only uses 64-bit registers.
	(rs6000_debug_reg_global): Debug JFmode.
	(rs6000_init_hard_regno_mode_ok): Add explicit support for both
	IEEE 128-bit floating point and IBM 128-bit floating point.  Add
	support for -mieee128-vector to pass/return IEEE 128-bit floating
	point as a vector.
	(invalid_e500_subreg): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(rs6000_emit_move): Likewise.
	(rs6000_return_in_memory): Likewise.
	(rs6000_function_arg_boundary): Likewise.
	(rs6000_function_arg_advance_1): Likewise.
	(rs6000_function_arg): Likewise.
	(rs6000_pass_by_reference): Likewise.
	(rs6000_init_builtins): Likewise.
	(rs6000_cannot_change_mode_class): Likewise.
	(print_operand): Likewise.
	(rs6000_generate_compare): Likewise.
	(rs6000_split_multireg_move): Likewise.
	(spe_func_has_64bit_regs_p): Likewise.
	(rs6000_output_function_epilogue): Likewise.
	(output_toc): Likewise.
	(rs6000_register_move_cost): Likewise.
	(rs6000_function_value): Likewise.
	(rs6000_libcall_value): Likewise.
	(rs6000_opt_masks): Add debugging for -mieee128-vector.

	* config/rs6000/rs6000.h (IEEE128_MODE_P): New macros to determine
	if a mode is an IEEE 128-bit floating point or IBM 128-bit
	floating point mode.
	(IBM128_MODE_P): Likewise.
	(SLOW_UNALIGNED_ACCESS): Use IEEE128_MODE_P and IBM128_MODE_P as
	appropriate instead of testing against TFmode.
	(HARD_REGNO_CALLER_SAVE_MODE): Likewise.
	(HARD_REGNO_CALL_PART_CLOBBERED): Likewise.
	(ALTIVEC_VECTOR_MODE): Treat IEEE 128-bit floating point as a
	vector mode if -mieee128-vector.
	(enum rs6000_builtin_type_index): Add IBM 128-bit floating point
	type.
	(ibm128_float_type_node): Likewise.

2014-01-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 206496.
	* REVISION: Update subversion id.

2014-01-06  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 206375.
	* REVISION: Update subversin id.

2014-01-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_L): Add XFmode (ieee 128-bit
	floating point).
	(VEC_M): Likewise.
	(VEC_R): Likewise.

	* config/rs6000/predicates.md (easy_fp_support): Add support for
	XFmode.

	* config/rs6000/rs6000-modes.def (XFmode): Add new floating point
	type that is IEEE 128-bit floating point.  Make this mode a
	fractional mode so it is not selected by normal mode lookup
	rules.

	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Add XFmode to
	modes to print out with debugging.
	(rs6000_init_hard_regno_mode_ok): Setup XFmode if VSX is
	available.
	(reg_offset_addressing_ok_p): Treat XFmode as a vector type that
	only uses reg+reg addressing, and is passed/returned like a vector
	type.
	(rs6000_legitimate_offset_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_emit_move): Likewise.
	(rs6000_function_arg_boundary): Likewise.
	(rs6000_init_builtins): Add support for new __float128 keyword.
	Setup XFmode.
	(rs6000_output_function_epilogue): Add XFmode support.

	* config/rs6000/vsx.md (VSX_L): Add XFmode to VSX mode iterators.
	(VSX_M): Likewise.
	(VSX_M2): Likewise.

	* config/rs6000/rs6000.h (VSX_VECTOR_MODE): Treat XFmode (ieee
	128-bit floating point) as a VSX mode.
	(enum rs6000_builtin_type_index): Add type for IEEE 128-bit
	floating point.
	(ieee128_float_type_node): Likewise.

	* config/rs6000/altivec.md (VM): Add XFmode to VMX mode
	iterators.
	(VM2): Likewise.

2014-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 206281.
	* REVISION: Update subversion id.

2013-12-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 206028.
	* REVISION: Update subversion id.

2013-12-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 205830.
	* REVISION: Update subversion id.

2013-11-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch from subversion id 205398.
	* REVISION: New file to track subversion id.

