work047.patch012:
2021-04-13  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/altivec.md (UNSPEC_XXSPLTIW): Delete.
	(xxspltiw_v4si): Move to vsx.md and rewrite.
	(xxspltiw_v4sf): Move to vsx.md and rewrite.
	(xxspltiw_v4sf_inst): Delete.
	* config/rs6000/predicates.md (xxspltiw_operand): New predicate.
	(easy_vector_constant): If we can use XXSPLTIW, the vector
	constant is easy.
	* config/rs6000/rs6000-cpus.def (ISA_3_1_MASKS_SERVER): Add
	-mxxspltiw support.
	(POWERPC_MASKS): Add -mxxspltiw support.
	* config/rs6000/rs6000.c (rs6000_option_override_internal): Add
	-mxxspltiw support.
	(xxspltib_constant_p): If we can generate XXSPLTIW, don't generate
	a XXSPLTIB and an extend instruction.
	(output_vec_const_move): Add support for XXSPLTIW vector
	constants.
	(rs6000_opt_masks): Add -mxxspltiw.
	* config/rs6000/rs6000.opt (-mxxspltiw): New debug switch.
	* config/rs6000/vsx.md (xxspltiw_v8hi): New insn.
	(xxspltiw_v4si): Move from altivec.md and reimplement to use
	VEC_DUPLICATE.
	(xxspltiw_v4sf): Move from altivec.md and reimplement to use
	VEC_DUPLICATE.
	(XXSPLTIW): New mode iterator.
	(XXSPLTIW splitter): New insn splitter for XXSPLTIW.

work047.patch011:
2021-04-13  Michael Meissner  <meissner@linux.ibm.com>

	* config.gcc (powerpc*-*-*, rs6000-*-*): Do not set
	LINK_OS_EXTRA_SPEC664 for the Advance Toolchain.  Continue to set
	LINK_OS_EXTRA_SPEC32.

work047.patch009:
2021-04-13  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-protos.h (rs6000_const_f32_to_i32): Change
	return type to long.
	* config/rs6000/rs6000.c (rs6000_const_f32_to_i32): Change return
	type to long.

work047.patch007:
2021-04-13  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-builtin.def (BU_IBM128_2): Rename
	RS6000_BTM_IBM128 from RS6000_BTM_FLOAT128.
	* config/rs6000/rs6000-call.c (rs6000_invalid_builtin): Update
	error message for __ibm128 built-in functions.
	(rs6000_init_builtins): Create the __ibm128 keyword on older
	systems where long double uses the IBM extended double format,
	even if they don't support IEEE 128-bit floating point.
	* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Rename
	RS6000_BTM_IBM128 from RS6000_BTM_FLOAT128.
	(rs6000_builtin_mask_names): Rename RS6000_BTM_IBM128 from
	RS6000_BTM_FLOAT128.
	* config/rs6000/rs6000.h (TARGET_IBM128): New macro.
	(RS6000_BTM_IBM128): Rename from RS6000_BTM_FLOAT128.
	(RS6000_BTM_COMMON): Rename RS6000_BTM_IBM128 from
	RS6000_BTM_FLOAT128.

work047.patch006:
2021-04-13  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): If long
	double is IEEE-128 map the nanq built-in functions to the long
	double function, not the f128 function.

work047.patch002:
2021-04-13 Michael Meissner  <meissner@linux.ibm.com>

        * config/rs6000/rs6000.c (have_compare_and_set_mask): Add IEEE
        128-bit floating point types.
        * config/rs6000/rs6000.md (FPMASK): New iterator.
        (FPMASK2): New iterator.
        (Fv mode attribute): Add KFmode and TFmode.
        (mov<FPMASK:mode><FPMASK2:mode>cc_fpmask): Replace
        mov<SFDF:mode><SFDF2:mode>cc_p9.  Add IEEE 128-bit fp support.
        (mov<FPMASK:mode><FPMASK2:mode>cc_invert_fpmask): Replace
        mov<SFDF:mode><SFDF2:mode>cc_invert_p9.  Add IEEE 128-bit fp
        support.
        (fpmask<mode>): Add IEEE 128-bit fp support.  Enable generator to
        build te RTL.
        (xxsel<mode>): Add IEEE 128-bit fp support.  Enable generator to
        build te RTL.

work047.patch001:
2021-04-13  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (rs6000_emit_minmax): Add support for ISA
	3.1 IEEE 128-bit floating point xsmaxcqp and xsmincqp instructions.
	* config/rs6000/rs60000.h (FLOAT128_MIN_MAX_FPMASK_P): New macro.
	* config/rs6000/rs6000.md (s<minmax><mode>3): Add support for the
	ISA 3.1 IEEE 128-bit minimum and maximum instructions.

2021-04-13   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

