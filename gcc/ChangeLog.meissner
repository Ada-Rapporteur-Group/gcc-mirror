2014-10-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md
	(reload_<RELOAD:mode>_<P:mptrsize>_load): Fix typo.

	* config/rs6000/rs6000.c (rs6000_secondary_reload_class): Tweak
	Ulrich's code somewhat.

2014-10-23  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	* config/rs6000/rs6000.c (rs6000_secondary_reload_class): Prefer
	moving to/from GPR registers from Altivec/VSX registers via a FPR
	register.

2014-10-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (easy_fp_constant): Delete redundant
	tests for 0.0.  Delete code that forced constants to memory if
	-ffast-math and -mupper-regs-{df,sf}.

	* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define
	__UPPER_REGS_DF__ and __UPPER_REGS_SF__ if the appropriate option
	were used.

	* config/rs6000/rs6000.c (rs6000_legitimize_reload_address): Undo
	code to turn off reg+offset addressing for scalars that can go in
	Altivec registers.
	(rs6000_secondary_memory_needed_rtx): Call correct function for
	validating reg+reg addresses.

2014-10-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (easy_fp_constant): Don't treat
	constants as easy if -ffast-math and -mupper-regs-{df,sf}.

	* config/rs6000/rs6000.c (rs6000_legitimize_reload_address): If
	scalars are allowed in Altivec registers, and the value must be
	passed in both GPRs and FPRs, create an invalid address that will
	be flaged to be reloaded as reg+reg to deal with cprop_hardregno
	eliminating moves from an Altivec register to a FPR register, and
	doing the store from the Altivec register instead of a FPR
	register.
	(rs6000_secondary_memory_needed_rtx): Likewise.

	* config/rs6000/rs6000.md (UNSPEC_RELOAD): New UNSPEC constant.

2014-10-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_R): Move reload support to
	rs6000.md.
	(reload_<VEC_R:mode>_<P:mptrsize>_store): Likewise.
	(reload_<VEC_R:mode>_<P:mptrsize>_load): Likewise.
	(vec_reload_and_plus_<mptrsize>): Likewise.

	* config/rs6000/rs6000.md (RELOAD): Move secondary reload of
	vector types from vector.md to rs6000.md.  Add in support for
	scalar floating point.  Rename mode iterator VEC_R -> RELOAD.
	Rewrite reload define_expands to be define_insn_and_split.  Wrap
	the reloaded load/store with an UNSPEC_RELOAD.
	(reload_<RELOAD:mode>_<P:mptrsize>_store): Likewise.
	(reload_<RELOAD:mode>_<P:mptrsize>_load): Likewise.
	(vec_reload_and_plus_<mptrsize>): Likewise.

2014-10-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (valid_move_insn_p): Rework so that it
	works better during reload.
	(rs6000_secondary_reload): Allow subreg's of memory before reload
	finishes.
	(rs6000_secondary_reload_inner): Use create_TOC_reference to load
	up addresses.
	(rs6000_secondary_reload_fail): Add ATTRIBUTE_NORETURN.

	* config/rs6000/rs6000.md (UNSPEC_TOC_NOSPLIT): Delete, no longer
	used.
	(toc_nosplit<mode>): Likewise.
	(mov<mode>_hardfloat64, FMOVE64 case): Add spaces so dest/src
	constraints line up.

2014-10-13  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 216165.
	* REVISION: Update subversion id.

2014-10-10  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_debug_addr_mask): New function to
	break out printing the valid modes for an address mask.
	(rs6000_debug_print_mode): Call rs6000_debug_addr_mask.
	(valid_move_insn_p): If the move was not valid, and -mdebug=addr
	was on, trace the attempted move.
	(rs6000_secondary_reload_memory): Improve tracing if
	-mdebug=addr.  Print other failure returns.  Print the valid
	address modes.
	(rs6000_preferred_reload_class): Prefer FLOAT_REGS for all 4/8
	byte objects.
	(rs6000_secondary_reload_class): Comment out asking for a
	FLOAT_REGS temporary for now.

	* config/rs6000/rs6000.md (mov<mode>_hardfloat, FLOAT32 case): Add
	spaces so dest/src constraints line up.

2014-10-07  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (RELOAD_REG_AND_M16): New address mask
	for Altivec style loads.
	(rs6000_debug_print_mode): Add support for RELOAD_REG_AND_M16.
	(rs6000_setup_reg_addr_masks): Set RELOAD_REG_AND_M16 for Altivec
	registers and memory operations.
	(rs6000_init_hard_regno_mode_ok): Always set the reload functions
	for DF/DD/SF/SD modes.  Don't test for 64/32-bit within a section
	that has already been tested for 64/32-bit.
	(rs6000_option_override_internal): Require -mvsx if
	-mupper-regs-df, and -mpower8-vector if -mupper-regs-sf.
	(rs6000_legitimize_reload_address): For SF/DF modes allowed in
	Altivec registers, turn off using offset addressings in the middle
	of reload.
	(rs6000_secondary_reload_toc_costs): New helper function for
	calculating how expensive a TOC load is.
	(rs6000_secondary_reload_memory): New secondary reload helper
	function to determine what kind of reloading we need to do for
	loads/stores of types with reload helper functions.
	(rs6000_secondary_reload): Rework code so that we have an explicit
	done flags, instead of using many cascaded ifs.  Move reload of
	vector/floating point memory operations to the function
	rs6000_secondary_reload_memory.  Update debug tracing.
	(rs6000_secondary_reload_inner): Rework code to use address masks
	to determine what type of addressing is allowed.
	(rs6000_preferred_reload_class): Rework code, move constant
	processing higher.  If -mupper-regs-{df,sf}, always prefer
	FLOAT_REGS.
	(rs6000_secondary_reload_class): If -mupper-regs-{df,sf} and
	reloading an Altivec register or a constant, ask to use a
	FLOAT_REGS temporary.  Move FLOAT_REGS handling after VSX_REGS.

	* config/rs6000/rs6000.md (UNSPEC_TOC_NOSPLIT): New support called
	from rs6000_secondary_reload_inner to create a single INSN for a
	TOC reference that is later split into HIGH/LO_SUM.

2014-09-29  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 215685.
	* REVISION: Update subversion id.

2014-09-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* lra-constraints.c (lra_constraints): Use fatal_insn to show the
	insn being reloaded.

	* config/rs6000/predicates.md (memory_fp_constant): New insn to
	insure floating point constants are pushed to the constant pool
	before register allocation.

	* config/rs6000/rs6000-protos.h (valid_move_insn_p): New
	declaration.

	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Do not
	set rs6000_vector_mem even if double values are allowed in Altivec
	registers.  Set vector unit to VSX for floats if floats are
	allowed in Altivec registers.
	(valid_move_insn_p): Validate loads and stores to make sure that
	Altivec d-form instructions are not generated.

	* config/rs6000/rs6000.md (mov<mode>_hardfloat, SD/SFmodes): Call
	valid_move_insn_p to make sure the move is valid.
	(mov<mode>_softfloat, SD/SFmodes): Likewise.
	(mov<mode>_hardfloat32, DD/DFmodes): Likewise.
	(mov<mode>_softfloat32, DD/DFmodes): Likewise.
	(mov<mode>_hardfloat64, DD/DFmodes): Likewise.
	(SF/DF define_split): New define split to ensure that FP constants
	are pushed to the constant pull before register allocation.
	Previously, using -ffast-math would prevent moving the constant
	to memory earlier.
	(SF/DF move peephole2): Call valid_move_insn_p to ensure when
	collapsing FP moves, that an impossible move is not generated.

2014-09-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 215485.
	* REVISION: Update subversion id.

2014-09-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (f32_vsx): New mode attributes to
	refine the constraints used on 32/64-bit floating point moves.
	(f32_av): Likewise.
	(f64_vsx): Likewise.
	(f64_dm): Likewise.
	(f64_av): Likewise.
	(BOOL_REGS_OUTPUT): Use wt constraint for TImode instead of wa.
	(BOOL_REGS_OP1): Likewise.
	(BOOL_REGS_OP2): Likewise.
	(BOOL_REGS_UNARY): Likewise.
	(mov<mode>_hardfloat, SFmode/SDmode): Tighten down constraints for
	32/64-bit floating point moves.  Do not use wa, instead use ww/ws
	for moves involving VSX registers.  Do not use constraints that
	target VSX registers for decimal types.
	(mov<mode>_hardfloat32, DFmode/DDmode): Likewise.
	(mov<mode>_hardfloat64, DFmode/DDmode): Likewise.

2014-09-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 215333.
	* REVISION: Update subversion id.

2014-09-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (fusion_gpr_mem_load): Move testing
	for base_reg_operand to be common between LO_SUM and PLUS.
	(fusion_gpr_mem_combo): New predicate to match a fused address
	that combines the addis and memory offset address.

	* config/rs6000/rs6000-protos.h (fusion_gpr_load_p): Change
	calling signature.
	(emit_fusion_gpr_load): Likewise.

	* config/rs6000/rs6000.c (fusion_gpr_load_p): Change calling
	signature to pass each argument separately, rather than
	using an operands array.  Rewrite the insns found by peephole2 to
	be a single insn, rather than hoping the insns will still be
	together when the peephole pass is done.  Drop being called via a
	normal peephole.
	(emit_fusion_gpr_load): Change calling signature to be called from
	the fusion_gpr_load_<mode> insns with a combined memory address
	instead of the peephole pass passing the addis and offset
	separately.

	* config/rs6000/rs6000.md (UNSPEC_FUSION_GPR): New unspec for GPR
	fusion.
	(power8 fusion peephole): Drop support for doing power8 via a
	normal peephole that was created by the peephole2 pass.
	(power8 fusion peephole2): Create a new insn with the fused
	address, so that the fused operation is kept together after
	register allocation is done.
	(fusion_gpr_load_<mode>): Likewise.

2014-09-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch from subversion id 215302.
	* REVISION: New file, track subversion id.

