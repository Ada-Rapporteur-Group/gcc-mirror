2014-06-30  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 212156.
	* REVISION: Update subversion id.

2014-06-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Check
	for TARGET_FLOAT128 before setting up KFmode.
	(init_float128_ieee): Set up functions for unordered and general
	compare.
	(rs6000_generate_compare): Add support for IEEE 128-bit floating
	point.

	* config/rs6000/vsx.md (negkf2): Add support for IEEE 128-bit
	floating point negate.
	(negkf2_internal): Likewise.
	(abskf2): Add support for IEEE 128-bit absolute value.
	(nabskf2): Add support for negative of IEEE 128-bit absolute
	value.

	* config/rs6000/altivec.md (altivec_high_bit): New insn to create
	a vector with the highest bit set.

	* config/rs6000/rs6000.md (FP iterator): Add IEEE 128-bit floating
	point so comparisons are handled.

2014-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_M): Add KFmode to vector types.
	(VEC_N): Likewise.
	(mov<mode>): For KFmode constants, call easy_fp_constant instead
	of easy_vector_constant.

	* config/rs6000/predicates.md (easy_vector_constant): If KFmode,
	call easy_fp_constant instead of other handling.

	* config/rs6000/rs6000.c (rs6000_emit_move): Improve handling of
	KFmode constant moves.
	(init_float128_ieee): Use correct spelling of float unsigned
	conversion functions.  Don't add TImode conversion functions on
	32-bit.

	* config/rs6000/rs6000.md (FMOVE128): Move KFmode moves to
	vector.md.
	(FMOVE128_VSX): New iterator for VSX scalar types.
	(unpack<mode>): Add support for pack, unpack functions for KFmode.
	(pack<mode>): Likewise.
	(unpackv1ti): Delete, merge with KFmode unpack/pack.
	(packv1ti): Likewise.

2014-06-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* machmode.h (GET_MODE_WIDER_MODE_SPECIAL): New macro to get the
	wider modes that are normally skipped by default.

	* rtlanal.c (init_num_sign_bit_copies_in_rep): In going from
	narrow to wider modes, check whether we receive VOIDmode, since
	special floating point types are not listed in the normal widening
	tables.  When doing initializations, go through all modes in a
	class, even special modes, that are normally skipped by default
	widening.
	* cse.c (cse_insn): Likewise.
	* expr.c (init_expr_target): Likewise.
	(compress_float_constant): Likewise.
	* dse.c (find_shift_sequence): Likewise.
	* emit-rtl.c (init_derived_machine_modes): Likewise.
	(init_emit_once): Likewise.
	(simplify_comparison): Likewise.

	* genmodes.c (struct mode_data): Change special field to mean the
	mode is not normally in the widening tables.  Produce a table that
	includes the special modes for widening.  Add precision argument
	back to SPECIAL_FLOAT_MODE.
	(SPECIAL_FLOAT_MODE): Likewise.
	(cmp_modes): Likewise.
	(emit_mode_wider): Likewise.

	* config/rs6000/rs6000-modes.def (KFmode): Go back to using
	SPECIAL_FLOAT_MODE.

	* config/rs6000/rs6000.c (TARGET_C_MODE_FOR_SUFFIX): Add support
	for using 'q' as the suffix for __float128 (same as x86_64).
	(rs6000_c_mode_for_suffix): Likewise.
	(rs6000_output_move_128bit): Use fatal_insn for the failure to
	print what the bad move is.
	(rs6000_scalar_mode_supported_p): Add KFmode support.

2014-06-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 211742.
	* REVISION: Update subversion id.

2014-06-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vsx.md (VSX_LE): Properly swap IEEE 128-bit on
	little endian.

	* config/rs6000/rs6000.c (rs6000_option_override_internal):
	Eliminate check for -mfloat128 requiring 128-bit long double.

	* config/rs6000/rs6000-modes.def (KFmode): Go back to using
	FRACTIONAL_FLOAT_MODE instead of SPECIAL_FLOAT mode, due to
	widening problems with Fortran.

2014-06-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 211594.
	* REVISION: Update subversion id.

2014-06-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* machmode.def (SPECIAL_FLOAT_MODE): Document.

	* genmodes.c (struct mode_data): Add special field.
	(blank_mode): Initialize special.
	(complete_mode): Complex and vector types inherit the special mode
	class.
	(FLOAT_MODE): Add special field for floating point to sort special
	nodes higher than normal nodes for the same size.  The intention
	is to allow __float128 on PowerPC (KFmode) to be higher than long
	double (TFmode), so that automatic widening uses the long double
	type.
	(FRACTIONAL_FLOAT_MODE): Likewise.
	(SPECIAL_FLOAT_MODE): Likewise.
	(FLOAT_MODE_INTERNAL): Likewise.
	(make_float_mode): Likewise.
	(cmp_modes): Likewise.

	* config/rs6000/rs6000-modes.def (KFmode): Declare KFmode to be
	special.  Don't use FRACTIONAL_FLOAT_MODE.

2014-06-10  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (easy_fp_constant): Eliminate
	JFmode, including builtin functions, __ibm128 type, and save area
	to hold JFmode type.
	* config/rs6000/rs6000-modes.md (JFmode): Likewise.
	* config/rs6000/rs6000-builtin.def (pack_ibm128): Likewise.
	(unpack_ibm128): Likewise.
	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Likewise.
	(invalid_e500_subreg): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_emit_move): Likewise.
	(rs6000_gimplify_va_arg): Likewise.
	(rs6000_init_builtins): Likewise.
	(rs6000_init_libfuncs): Likewise.
	(rs6000_cannot_change_mode_class): Likewise.
	(rs6000_generate_compare): Likewise.
	(rs6000_output_function_epilogue): Likewise.
	(output_toc): Likewise.
	(rs6000_mangle_type): Likewise.
	* config/rs6000/rs6000.h (FLOAT128_IBM_P): Likewise.
	(RS6000_BTI_ibm128_float): Likewise.
	(ibm128_float_type_node): Likewise.
	* config/rs6000/rs6000.md (FMOVE128): Likewise.
	(FP128_64): Likewise.
	(unpacktf_0): Likewise.
	(unpacktf_1): Likewise.
	(TF_JF): Delete.
	(unpack<mode>_0): Likewise.
	(unpack<mode>_1): Likewise.

2014-06-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_L): Change XFmode to KFmode.  Make
	-mfloat128 be -mvsx only.  Change the names of the emulator
	functions.
	(VEC_R): Likewise.
	* config/rs6000/predicates.md (easy_fp_constant): Likewise.
	* config/rs6000/rs6000-modes.def (KFmode): Likewise.
	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Likewise.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	(rs6000_option_override_internal): Likewise.
	(invalid_e500_subreg): Likewise.
	(reg_offset_addressing_ok_p): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_emit_move): Likewise.
	(rs6000_gimplify_va_arg): Likewise.
	(init_float128_ieee): Likewise.
	(rs6000_init_libfuncs): Likewise.
	(rs6000_cannot_change_mode_class): Likewise.
	(rs6000_generate_compare): Likewise.
	(rs6000_output_function_epilogue): Likewise.
	(output_toc): Likewise.
	* config/rs6000/vsx.md (VSX_L): Likewise.
	(VSX_M): Likewise.
	(VSX_M2): Likewise.
	* config/rs6000/rs6000.h (FLOAT128_IEEE_P): Likewise.
	* config/rs6000/altivec.md (VM): Likewise.
	(VM2): Likewise.
	* config/rs6000/rs6000.md (FMOVE128): Likewise.
	(FMOVE128_GPR): Likewise.
	(FP128_64): Likewise.

2014-06-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	(gcc-power8.patch104 from 2014-04-29)

	* config/rs6000/predicates.md (int_reg_operand_not_pseudo): New
	predicate that matches hard GPR registers, but not pseudos.
	(easy_fp_constant): Add support for new floating point modes
	XFmode and JFmode.

	* config/rs6000/rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Set
	-mfloat128 on by default.
	(POWERPC_MASKS): Add -mfloat128.
	(power7 cpu): Enable -mfloat128.

	* config/rs6000/rs6000.opt (-mfloat128): New option to control
	whether the __float128 (IEEE 128-bit floating point) and __ibm128
	(traditional IBM double double format for long double) types are
	enabled.

	* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): If
	-mfloat128, define __FLOAT128__.

	* config/rs6000/rs6000-builtin.def (PACK_JF): Define pack/unpack
	builtin functions for __ibm128.
	(UNPACK_F): Likewise.

	* config/rs6000/rs6000.c (scalar_float_not_vector_p): New helper
	function for scalar floats that are used in traditional floating
	point registers, and not in a vector register.
	(rs6000_hard_regno_nregs_internal): Add support for __float128 on
	VSX systems to know that the value uses the full vector register
	rather than being a pair of scalar registers.
	(rs6000_hard_regno_mode_ok): Likewise.
	(rs6000_debug_reg_global): Add debugging for __float128 and
	__ibm128.
	(rs6000_init_hard_regno_mode_ok): Add support for __float128 and
	__ibm128.
	(rs6000_option_override_internal): Don't allow -mfloat128 and
	-mlong-double-64.
	(invalid_e500_subreg): Add support for __float128 and __ibm128
	floating point types.  On VSX systems, pass/return __float128 in
	vector registers.
	(reg_offset_addressing_ok_p): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_emit_move): Likewise.
	(USE_FP_FOR_ARG_P): Likewise.
	(rs6000_aggregate_candidate): Likewise.
	(rs6000_discover_homogeneous_aggregate): Likewise.
	(rs6000_return_in_memory): Likewise.
	(init_cumulative_args): Likewise.
	(rs6000_function_arg_boundary): Likewise.
	(rs6000_function_arg_advance_1): Likewise.
	(rs6000_function_arg): Likewise.
	(rs6000_arg_partial_bytes): Likewise.
	(rs6000_pass_by_reference): Likewise.
	(rs6000_init_builtins): Initialize support for __float128 and
	__ibm128.
	(init_float128_ibm): New function to set up the library names for
	the IBM double-double 128-bit format.
	(init_float128_ieee): New function to set up the library names for
	IEEE 128-bit types.  On VSX systems, use <name>_vector, on non-VSX
	systems with -mfloat128, use <name>_fpr, and on non-Linux/BSD
	systems that default to long double == IEEE 128-bit, use the
	historic names.
	(rs6000_init_libfuncs): Move setup of the library names to
	init_float128_ibm and init_float128_ieee.
	(rs6000_cannot_change_mode_class): Add support for __float128 and
	__ibm128.
	(rs6000_generate_compare): Likewise.
	(rs6000_split_multireg_move): Likewise.
	(spe_func_has_64bit_regs_p): Likewise.
	(rs6000_output_function_epilogue): Likewise.
	(output_toc): Likewise.
	(rs6000_mangle_type): Expand mangling to use "g" for __ibm128, and
	"e" for __float128, to be compatible with defaults for long
	double.
	(rs6000_register_move_cost): Add support for __float128 and
	__ibm128.
	(rs6000_function_value): Likewise.
	(rs6000_libcall_value): Likewise.
	(rs6000_opt_masks): Add -mfloat128.

	* config/rs6000/rs6000.h (FLOAT128_IEEE_P): New macro to identify
	types that map to IEEE 128-bit floating point.
	(FLOAT128_IBM_P): New macro to identify types that map to the
	traditional IBM double-double 128-bit floating point.
	(FLOAT128_VECTOR_P): New macro to identify 128-bit floating point
	types that take a single vector register.
	(FLOAT128_2REG_P): New macro to identify 128-bit floating point
	types that take 2 adjacent scalar registers.
	(MASK_FLOAT128): Map to OPTION_MASK_FLOAT128.
	(SLOW_UNALIGNED_ACCESS): Add support for __float182 and __ibm128.
	(HARD_REGNO_CALLER_SAVE_MODE): Likewise.
	(HARD_REGNO_CALL_PART_CLOBBERED): Likewise.
	(VSX_VECTOR_MODE): Spacing.
	(ALTIVEC_VECTOR_MODE): Add __float128 in vector registers.
	(MODES_TIEABLE_P): Move vectors higher than scalar floating point,
	so that __float128 in vector registers ties with vectors and not
	with other floating point values.
	(struct rs6000_args): Add libcall argument so that we can tell
	when we calling a library support function for __float128.
	(enum rs6000_builtin_type_index): Add __float128 and __ibm128
	support.
	(ieee128_float_type_node): Likewise.
	(ibm128_float_type_node): Likewise.

	* config/rs6000/altivec.md (VM): Add support for IEEE 128-bit
	floating point types that goes in a vector.
	(VM2): Likewise.

	* config/rs6000/rs6000.md (FMOVE128): Add supprt for __float128
	and __ibm128.
	(FMOVE128_GPR): Likewise.
	(mov<mode>_64bit, FMOVE128 types): Likewise.
	(mov<mode>_32bit, FMOVE128 types): Likewise.
	(FP128_64): Likewise.
	(unpack<mode>): Add support to pack/unpack __ibm128 types.  Delete
	old insns just for TFmode.  Don't pack/unpack 128-bit types in a
	vector register.
	(TF_JF): Likewise.
	(unpack<mode>_0): Likewise.
	(unpacktf_0): Likewise.
	(unpack<mode>_1): Likewise.
	(unpacktf_1): Likewise.
	(unpack<mode>_dm): Likewise.
	(unpack<mode>_nodm): Likewise.
	(pack<mode>): Likewise.

	* config/rs6000/vector.md (VEC_L): Add XFmode to vector modes.
	(VEC_R): Likewise.

	* config/rs6000/rs6000-modes.def (XFmode): Add new modes to
	support __float128 and __ibm128 types.
	(JFmode): Likewise.

	* config/rs6000/vsx.md (VSX_L): Add XFmode to vector modes.
	(VSX_M): Likewise.
	(VSX_M2): Likewise.

	* doc/extend.texi (Floating Types): Document __float128 and
	__ibm128 on PowerPC.
	(PowerPC Built-in Functions): Document pack, unpack builtins for
	__ibm128.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Add -mfloat128.

2014-06-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch from trunk, subversion id 211381.
	* REVISION: New file to track subversion id.

