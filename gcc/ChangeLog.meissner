==================== Branch work118, patch #54 ====================

Add conversions fro V4SI vec_extract

This patch adds combiner insns to fold in sign and zero extension of vec_extract
of V4SI with a constant element when expanding to DImode.  It also adds in
combiner insns to create SFmdoe and DFmode.

2023-04-14   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4si_load_to_<su>di): New insn.
	(vsx_extract_v4si_load_to_<mode>): New insn.
	(vsx_extract_v4si_load_to_uns<mode>): New insn.

==================== Branch work118, patch #53 ====================

Allow vec_extract of int vectors to vector registers

2023-04-14   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4si_load): New insn, split off from
	vsx_extract_<mode>_load to handle loading SImode into vector registers
	from V4SImode.
	(vsx_extract_<mode>_load): Restrict to V8HI and V16QI.  Add support to
	load the element into vector registers.

==================== Branch work118, patch #52 ====================

Improve vec_extract of V4SF from memory with variable element.

2023-04-14   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4sf_var_load): Allow split before
	register allocation.
	(vsx_extract_v4sf_to_df_var_load): New insn.


==================== Branch work118, patch #51 ====================

Improve vec_extract of V4SF from memory with constant element.

2023-04-14   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (get_vector_offset): Allow being called before
	register allocation.
	(adjust_vec_address_pcrel): Likewise.
	(rs6000_adjust_vec_address): Likewise.
	* config/rs6000/vsx.md (vsx_extract_v4sf_load): Allow split before
	register allocation.
	(vsx_extract_v4sf_to_df_load): New insn.

==================== Branch work118, patch #50 ====================

Fix typo in insn name.

In doing other work, I noticed that there was an insn:

	vsx_extract_v4sf_<mode>_load

Which did not have an iterator.  I removed the useless <mode>.

2023-04-14   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4sf_load): Rename from
	vsx_extract_v4sf_<mode>_load.

==================== Branch work118, patch #42 was reverted ====================

==================== Branch work118, patch #41 was reverted ====================

==================== Branch work118, patch #40 was reverted ====================

==================== Branch work118, patch #33 was reverted ====================

==================== Branch work118, patch #32 was reverted ====================

==================== Branch work118, patch #31 was reverted ====================

==================== Branch work118, patch #30 was reverted ====================

==================== Branch work118, patch #22 was reverted ====================

==================== Branch work118, patch #21 ====================

Improve 64->128 bit zero extension on PowerPC

2023-04-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/108958
	* gcc/config/rs6000.md (zero_extendditi2): New insn.

gcc/testsuite/

	PR target/108958
	* gcc.target/powerpc/zero-extend-di-ti.c: New test.

==================== Branch work118, patch #20 ====================

Fix splat of extract for long long and double.

2023-04-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/99293
	* gcc/config/rs6000/vsx.md (vsx_splat_extract_<mode>): New combiner
	insn.

gcc/testsuite/

	PR target/108958
	* gcc.target/powerpc/pr99293.c: New test.
	* gcc.target/powerpc/builtins-1.c: Update insn count.


==================== Branch work118, patch #1 ====================

Make load/cmp fusion know about prefixed loads.

The issue with the bug is the power10 load GPR + cmpi -1/0/1 fusion
optimization generates illegal assembler code.

Ultimately the code was dying because the fusion load + compare -1/0/1 patterns
did not handle the possibility that the load might be prefixed.

The main cause is the prefixed attribute did not consider that fused_load_cmpi
insns are essentially load instructions, and to check whether the load is
prefixed.

This code ensures that the prefixed attribute is correctly set for the fusion
load plus compare immediate insns combined instruction.  This means it will
split the insn before final is called, and the load instruction will use a
prefixed load.

The original patch by Aaron reworked the insns generated by genfusion.pl so
that they had constraints that limited the load to be YZ, which are constraints
that restrict the load to offsets that the non-prefixed LWA instruction can
handle.  I will submit that patch as a second patch.  However, just setting the
prefixed attribute correctly will correctly split the insns.

2023-03-23   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/105325
	* gcc/config/rs6000/rs6000.md (prefixed attribute): Add fused_load_cmpi
	instructions to the list of instructions that might have a prefixed load
	instruction.

gcc/testsuite/

	PR target/105325
	* g++.target/powerpc/pr105325.C: New test.

==================== Branch work118, baseline ====================

2023-04-11   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

