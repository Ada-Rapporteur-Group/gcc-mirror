==================== Branch work119, patch #130 ====================

Split vec_extract from memory before reload for V16QI/V8HI/V4SI with constant elements.

This patch goes through the support function rs6000_adjust_vec_address and the
functions it calls to allow them to be called before register allocation.  The
places that take a scratch register will allocate a new pseudo register if they
are passed a SCRATCH register.

It then changes the vec_extract support for V16QI/V8HI/V4SI with constant
element numbers to be split before register allocation.

2023-04-27   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (get_vector_offset): Allow function to be
	called before register allocation.
	(adjust_vec_address_pcrel): Likewise.
	(rs6000_adjust_vec_address): Likewise.
	* config/rs6000/vsx.md (vsx_extract_<mode>_load): Split before register
	allocation.
	(vsx_extract_v4si_load_to_<su>di): Likewise.
	(vsx_extract_<VSX_EXTRACT_I2:mode>_load_to_u<GPR:mode>): Likewise.
	(*vsx_extract_v8hi_load_to_s<mode>): Likewise.
	(vsx_extract_<mode>_var_load): Likewise.
	(vsx_extract_v4si_var_load_to_<su>di): Likewise.
	(vsx_extract_<VSX_EXTRACT_I2:mode>_var_load_to_u<GPR:mode>): Likewise.
	(vsx_extract_v8hi_var_load_to_s<mode>): Likewise.

==================== Branch work119, patch #127 ====================

Optimize variable element vec_extract to be converted to floating point

This patch optimizes vec_extract with a variable element number of the following
types to be converted to floating point by loading the value directly to the
vector register, and then doing the conversion instead of loading the value to a
GPR and then doing a direct move:

vector int
vector unsigned int
vector unsigned short
vector unsigned char

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4si_var_load_to_<uns><mode>): New
	* insn.
	* vsx_extract_<VSX_EXTRACT_I2:mode>_var_load_to_uns<SFDF:mode>: New
	insn.

gcc/testsuite/

	* gcc.target/powerpc/vec-extract-mem-int-6.c: New file.
	* gcc.target/powerpc/vec-extract-mem-int_7.c: New file.

==================== Branch work119, patch #126 ====================

Allow constant element vec_extract to be converted to floating point

This patch allows vec_extract of the following types to be converted to
floating point by loading the value directly to the vector register, and then
doing the conversion instead of loading the value to a GPR and then doing a
direct move:

vector int
vector unsigned int
vector unsigned short
vector unsigned char

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.md (fp_int_extend): New code attribute.
	* config/rs6000/vsx.md (vsx_extract_v4si_load_to_<uns><mode>): New
	* insn.
	* vsx_extract_<VSX_EXTRACT_I2:mode>_load_to_uns<SFDF:mode>: New insn.

gcc/testsuite/

	* gcc.target/powerpc/vec-extract-mem-char-2.c: New file.
	* gcc.target/powerpc/vec-extract-mem-int-4.c: New file.
	* gcc.target/powerpc/vec-extract-mem-int_5.c: New file.
	* gcc.target/powerpc/vec-extract-mem-short-4.c: New file.

==================== Branch work119, patch #125 ====================

Allow variable element vec_extract to be sign or zero extended

This patch allows vec_extract of V4SI, V8HI, and V16QI vector types with a
variable element number to be loaded with sign or zero extension, and GCC will
not generate a separate zero/sign extension instruction.

2023-04-27   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4si_var_load_to_<su>di): New insn.
	(vsx_extract_<VSX_EXTRACT_I2:mode>_var_load_to_u<GPR:mode>): New insn.
	(vsx_extract_v8hi_var_load_to_s<mode>): New insn.

gcc/testsuite/

	* gcc.target/powerpc/vec-extract-mem-int-3.c: New file.
	* gcc.target/powerpc/vec-extract-mem-short-3.c: New file.

==================== Branch work119, patch #124 ====================

Allow variable element vec_extract to be loaded into vector registers.

This patch allows vec_extract of V4SI, V8HI, and V16QI vector types with a
variable element number to be loaded into vector registers directly.

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_<mode>_var_load): Allow vector
	registers to be loaded.

==================== Branch work119, patch #123 ====================

Optimize sign and zero extension of vec_extract from memory with constant element

This patch allows vec_extract of V4SI, V8HI, and V16QI vector types with a
constant element number to be zero extended.  It also allows vec_extract of V4SI
and V8HI vector types with constant element number to be sign extended.

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4si_load_to_<su>d): New insn.
	(vsx_extract_<VSX_EXTRACT_I2:mode>_load_to_u<GPR:mode>): New insn.
	(vsx_extract_v8hi_load_to_s<mode>): New insn.

gcc/testsuite/

	* gcc.target/powerpc/vec-extract-mem-char-1.c: New file.
	* gcc.target/powerpc/vec-extract-mem-int-1.c: New file.
	* gcc.target/powerpc/vec-extract-mem-int-2.c: New file.
	* gcc.target/powerpc/vec-extract-mem-short-1.c: New file.
	* gcc.target/powerpc/vec-extract-mem-short-2.c: New file.

==================== Branch work119, patch #122 ====================

Allow consant element vec_extract to be loaded into vector registers.

This patch allows vec_extract of V4SI, V8HI, and V16QI vector types with a
constant element number to be loaded into vector registers directly.

This patch also adds support for optimzing 0 element number to not need a base
register tempoary.  Likewise, if we have an offsettable address, we don't need
to allocate a scratch register.

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (VSX_EX_ISA): New mode attribute.
	(vsx_extract_<mode>_load): Allow vector registers to be loaded.  Add
	optimizations for loading up element 0 and/or with an offsettable
	address.

==================== Branch work119, patch #121 ====================

Optimize vec_extract of V4SF with variable element number being converted to DF

This patch adds a combiner insn to include the conversion of float to double
within the memory address when vec_extract of V4SF with a variable element
number is done.

It also removes the '?' from the 'r' constraint so that if the SFmode is needed
in a GPR, it doesn't have to load it to the vector unit and then store it.

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4sf_var_load): Remove '?' from 'r'
	constraint.
	(vsx_extract_v4sf_var_load_to_df): New insn.

gcc/testsuite/

	* gcc.target/powerpc/vec-extract-mem-float-2.c: New file.

==================== Branch work119, patch #120 ====================

Optimize vec_extract of V4SF from memory with constant element numbers.

This patch updates vec_extract of V4SF from memory with constant element
numbers.

This patch corrects the ISA for loading SF values to altivec registers to be
power8 vector, and not power7.

This patch adds a combiner patch to combine loading up a SF element and
converting it to double.

It also removes the '?' from the 'r' constraint so that if the SFmode is needed
in a GPR, it doesn't have to load it to the vector unit and then store it.

2023-04-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* gcc/config/rs6000/vsx.md (vsx_extract_v4sf_load): Fix ISA for loading
	up SFmode values with x-form addresses.  Remove ? from 'r' constraint.
	(vsx_extract_v4sf_load_to_df): New insn.

gc/testsuite/

	* gcc.target/powerpc/vec-extract-mem-float-1.c: New file.

==================== Branch work119, patche #110-113 were reverted ====================

==================== Branch work119, patche #100-107 were reverted ====================

==================== Branch work119, patches #90-97 were reverted ====================

==================== Branch work119, patches #80-84 were reverted ====================

==================== Branch work119, patches #70-60 were reverted ====================

==================== Branch work119, patches #50-40 were reverted ====================

==================== Branch work119, patches #30-33 were reverted ====================

==================== Branch work119, patch #23 ====================

PR target/101169 - Fix test suite insn counts

Adjust insn counts.

2023-04-21   Michael Meissner  <meissner@linux.ibm.com>

gcc/testsuite/

	PR target/101169
	* gcc.target/powerpc/fold-vec-extract-char.p7.c: Update insn count.
	* gcc.target/powerpc/fold-vec-extract-double.p7.c: Likewise.
	* gcc.target/powerpc/fold-vec-extract-float.p7.c: Likewise.
	* gcc.target/powerpc/fold-vec-extract-float.p8.c: Likewise.
	* gcc.target/powerpc/fold-vec-extract-int.p7.c: Likewise.
	* gcc.target/powerpc/fold-vec-extract-int.p8.c: Likewise.
	* gcc.target/powerpc/fold-vec-extract-short.p7.c: Likewise.
	* gcc.target/powerpc/fold-vec-extract-short.p8.c: Likewise.

==================== Branch work119, patch #22 ====================

Fix typo in insn name.

In doing other work, I noticed that there was an insn:

	vsx_extract_v4sf_<mode>_load

Which did not have an iterator.  I removed the useless <mode>.

2023-04-18   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/vsx.md (vsx_extract_v4sf_load): Rename from
	vsx_extract_v4sf_<mode>_load.

==================== Branch work119, patch #21 ====================

Improve 64->128 bit zero extension on PowerPC

2023-04-17   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/108958
	* gcc/config/rs6000.md (zero_extendditi2): New insn.

gcc/testsuite/

	PR target/108958
	* gcc.target/powerpc/zero-extend-di-ti.c: New test.

==================== Branch work119, patch #20 ====================

Fix splat of extract for long long and double.

2023-04-17   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/99293
	* gcc/config/rs6000/vsx.md (vsx_splat_extract_<mode>): New combiner
	insn.

gcc/testsuite/

	PR target/108958
	* gcc.target/powerpc/pr99293.c: New test.
	* gcc.target/powerpc/builtins-1.c: Update insn count.


==================== Branch work119, patch #1 ====================

PR target/105325: Make load/cmp fusion know about prefixed loads.

I posted a version of patch on March 21st, a second version on March 24th, and
the third version on March 28th.

The V4 patch just adds a new condition to the new test case.  Previously, I was
using 'powerpc_prefixed_addr' to determine whether the GCC compiler would
automatically generate prefixed addresses.  The V4 version also adds a check
for 'power10_ok'.  Power10_ok is needed in case the compiler could generate
prefixed addresses, but the assembler does not support prefixed instructions.

The V3 patch makes some code changes suggested in the genfusion.pl code from
the last 2 patch submissions.  The fusion.md that is produced by genfusion.pl
is the same in all 3 versions.

In V3, I changed the genfusion.pl to match the suggestion for code layout.  I
also used the correct comment for each of the instructions (in the 2nd patch,
the when I rewrote the comments about ld and lwa being DS format instructions,
I had put the ld comment in the section handling lwa, and vice versa).

In V3, I also removed lp64 from the new test.  When I first added the prefixed
code, it was only done for 64-bit, but now it is allowed for 32-bit.  However,
the case that shows up (lwa) would not hit in 32-bit, since it only generates
lwz and not lwa.  It also would not generate ld.  But the test does pass when
it is built with -m32.

The issue with the original bug is the power10 load GPR + cmpi -1/0/1 fusion
optimization generates illegal assembler code.

Ultimately the code was dying because the fusion load + compare -1/0/1 patterns
did not handle the possibility that the load might be prefixed.

The main cause is the constraints for the individual loads in the fusion did not
match the machine.  In particular, LWA is a ds format instruction when it is
unprefixed.  The code did not also set the prefixed attribute correctly.

This patch rewrites the genfusion.pl script so that it will have more accurate
constraints for the LWA and LD instructions (which are DS instructions).  The
updated genfusion.pl was then run to update fusion.md.  Finally, the code for
the "prefixed" attribute is modified so that it considers load + compare
immediate patterns to be like the normal load insns in checking whether
operand[1] is a prefixed instruction.

I have tested this code on a power9 little endian system (with long double
being IEEE 128-bit and IBM 128-bit), a power10 little endian system, and a
power8 big endian system, testing both 32-bit and 64-bit code generation.

For the V4 changes I also built the compiler on a big endian system with an
older assembler, and I verified that the pr105325.C test was listed as
unsupported.

Can I put this code into the master branch, and after a waiting period, apply
it to the GCC 12 and GCC 11 branches (the bug does show up in those branches,
and the patch applies without change).

2023-04-26   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/105325
	* gcc/config/rs6000/genfusion.pl (gen_ld_cmpi_p10): Improve generation
	of the ld and lwa instructions which use the DS encoding instead of D.
	Use the YZ constraint for these loads.	Handle prefixed loads better.
	Set the sign_extend attribute as appropriate.
	* gcc/config/rs6000/fusion.md: Regenerate.
	* gcc/config/rs6000/rs6000.md (prefixed attribute): Add fused_load_cmpi
	instructions to the list of instructions that might have a prefixed load
	instruction.

gcc/testsuite/

	PR target/105325
	* g++.target/powerpc/pr105325.C: New test.
	* gcc.target/powerpc/fusion-p10-ldcmpi.c: Adjust insn counts.

==================== Branch work119, baseline ====================

2023-04-17   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

