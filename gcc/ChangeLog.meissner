2015-09-24  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (fix_trunc<mode>di2): Add
	TARGET_FLOAT128 condition.
	(fixuns_trunc<IEEE128:mode><SDI:mode>2): Likewise.
	(floatdi<mode>2): Likewise.
	(floatuns<IEEE128:mode><SDI:mode>2): Likewise.

2015-09-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	<patch #9>
	* config/rs6000/rs6000-cpus.def (ISA_2_6_MASKS_SERVER): Add
	-mfloat128.

2015-09-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	<patch #7>
	* config/rs6000/rs6000-cpus.def (POWERPC_MASKS): Add -mfloat128.

	* config/rs6000/rs6000.opt (-mfloat128): Replace the switches
	-mfloat128-{software,none} with -m{,no-}float128.

	* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Add defines
	to tell users whether __float128 is available, and what is the
	format for long double.

	* config/rs6000/rs6000.c (TARGET_C_MODE_FOR_SUFFIX): Define.
	(rs6000_hard_regno_mode_ok): Remove code not allowing 128-bit
	floating types from any register if the appropriate option is not
	used.
	(rs6000_debug_reg_global): Delete -mfloat128-{software,none}
	debugging.
	(rs6000_setup_reg_addr_masks): Don't allow pre-increment or
	pre-decrement on IEEE 128-bit floating point.
	(rs6000_init_hard_regno_mode_ok): Add support for IEEE 128-bit
	floating point types.
	(rs6000_option_override_internal): Replace the switches
	-mfloat128-{software,none} with -m{,no-}float128, and move the
	tests to be closer to other ISA 2.06/2.07 options.
	(rs6000_gen_le_vsx_permute): Add support for IEEE 128-bit floating
	point.
	(init_cumulative_args): Assume that IEEE 128-bit floating point
	emulation routines have prototypes, and don't need to pass the
	arguments in the save area as well as the Altivec register set.
	(rs6000_function_arg): Likewise.
	(rs6000_arg_partial_bytes): Likewise.
	(rs6000_init_builtins): Set up ieee128_float_type_node to always
	use KFmode, and ibm128_float_type_node to always use IFmode.
	(init_float128_ibm): Split rs6000_init_libfuncs into 2 functions,
	one for IEEE 128-bit floating point, and one for IBM extended
	double floating point. For IFmode, use the traditional IBM
	extended double names. For TFmode, if -mabi=ieeelongdouble, use
	the names for KFmode.
	(init_float128_ieee): Likewise.
	(rs6000_init_libfuncs): Likewise.
	(rs6000_expand_float128_convert): Restructure code. Add support
	for using plain move if the underlying type is the same.
	(rs6000_mangle_type): Use U10__float128 for IEEE 128-bit floating
	point.
	(rs6000_scalar_mode_supported_p): Add IFmode if -mfloat128.
	(rs6000_c_mode_for_suffix): Add 'q' and 'Q' suffixes for IEEE
	128-bit floating point.
	(rs6000_opt_masks): Add -mfloat128.
	(struct rs6000_opt_var): Fix typo.
	(chain_contains_only_swaps): Change from VECTOR_MODE_P to
	ALTIVEC_OR_VSX_VECTOR_MODE to add IEEE 128-bit floating point
	values in VSX registers.
	(mark_swaps_for_removal): Likewise.
	(rs6000_analyze_swaps): Likewise.

	* config/rs6000/rs6000.h (ALTIVEC_VECTOR_MODE): Add IEEE 128-bit
	floating point types that go in VSX registers.
	(MODES_TIEABLE_P): Move vector tests above floating point scalar
	tests, so that IEEE 128-bit floating point values in VSX tie with
	other vector types.
	(struct rs6000_args): Add libcall field.

	* config/rs6000/rs6000.md (FLOAT128_SFDFTF): Rework IEEE 128-bit
	floating point code. Make parallel patterns for KFmode and TFmode
	if -mabi=ieeelongdouble. Add parallel patterns for IFmode and
	TFmode with -mabi=ibmlongdouble. Delete FLOAT128_SFDFTF, IFKF and
	TFIFKF iterators. Add IEEE128, and FLOAT128 iterators. Make IBM128
	iterator add checks for IFmode/TFmode being supported.
	(IFKF): Likewise.
	(IBM128): Likewise.
	(IEEE128): Likewise.
	(TFIFKF): Likewise.
	(FLOAT128): Likewise.
	(signbit<mode>2): Likewise.
	(extenddftf2): Likewise.
	(extenddf<mode>2): Likewise.
	(extenddftf2_fprs): Likewise.
	(extenddf<mode>2_fprs): Likewise.
	(extenddftf2_internal): Likewise.
	(extenddf<mode>2_internal): Likewise.
	(extendsftf2): Likewise.
	(extendsf<mode>2): Likewise.
	(trunctfdf2): Likewise.
	(trunc<mode>df2): Likewise.
	(trunctfdf2_internal1): Likewise.
	(trunc<mode>df2_internal1): Likewise.
	(trunctfdf2_internal2): Likewise.
	(trunc<mode>df2_internal2): Likewise.
	(trunctfsf2): Likewise.
	(trunc<mode>sf2): Likewise.
	(trunctfsf2_fprs): Likewise.
	(trunc<mode>sf2_fprs): Likewise.
	(floatsitf2): Likewise.
	(floatsi<mode>2): Likewise.
	(fix_trunc_helper): Likewise.
	(fix_trunc_helper<mode>): Likewise.
	(fix_trunctfsi2): Likewise.
	(fix_trunc<mode>si2): Likewise.
	(fix_trunctfsi2_fprs): Likewise.
	(fix_trunc<mode>si2_fprs): Likewise.
	(fix_trunctfsi2_internal): Likewise.
	(fix_trunc<mode>si2_internal): Likewise.
	(fix_trunctfdi2): Likewise.
	(fix_trunc<mode>di2): Likewise.
	(fixuns_trunctf<mode>2): Likewise.
	(fixuns_trunc<IEEE128:mode><SDI:mode>2): Likewise.
	(floatditf2): Likewise.
	(floatdi<mode>2): Likewise.
	(floatuns<mode>tf2): Likewise.
	(floatuns<IEEE128:mode><SDI:mode>2): Likewise.
	(neg<mode>2): Likewise.
	(negtf2_internal): Likewise.
	(neg<mode>2_internal): Likewise.
	(abs<mode>2): Likewise.
	(abstf2_internal): Likewise.
	(abs<mode>2_internal): Likewise.
	(ieee_128bit_vsx_neg<mode>2): Likewise.
	(ieee_128bit_vsx_neg<mode>2_internal): Likewise.
	(ieee_128bit_vsx_abs<mode>2): Likewise.
	(ieee_128bit_vsx_abs<mode>2_internal): Likewise.
	(ieee_128bit_vsx_nabs<mode>2): Likewise.
	(ieee_128bit_vsx_nabs<mode>2_internal): Likewise.
	(extendiftf2): Likewise.
	(extend<FLOAT128_SFDFTF:mode><IFKF:mode>2): Likewise.
	(extendifkf2): Likewise.
	(trunc<IFKF:mode><FLOAT128_SFDFTF:mode>2): Likewise.
	(extendtfkf2): Likewise.
	(fix_trunc<IFKF:mode><SDI:mode>2): Likewise.
	(trunciftf2): Likewise.
	(fixuns_trunc<IFKF:mode><SDI:mode>2): Likewise.
	(truncifkf2): Likewise.
	(float<SDI:mode><IFKF:mode>2): Likewise.
	(trunckftf2): Likewise.
	(floatuns<SDI:mode><IFKF:mode>2): Likewise.
	(trunctfif2): Likewise.
	(cmptf_internal1): Likewise.
	(cmp<mode>_internal1): Likewise.
	(cmptf_internal2): Likewise.
	(cmp<mode>_internal2): Likewise.

	* config/rs6000/rs6000-opts.h (enum float128_type_t):
	Delete. Switch from -mfloat128-{none,software} to
	-m{,no-}float128.

	* doc/extend.texi (additional floating types): Document PowerPC
	use of __float128 and __ibm128 types.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Document
	-mfloat128 and -mno-float128.

2015-09-21   Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch subversion id 227979

