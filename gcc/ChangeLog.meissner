2016-12-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (altivec_register_operand): Disallow
	SUBREG mixing SFmode and other types, except when a hard GPR
	reister is used, since SFmode is stored like DFmode within the
	floating point and vector registers.  In the cases where SPE is
	possible, rewrite the code to check for SUBREG only one.
	(vsx_register_operand): Likewise.
	(vfloat_operand): Likewise.
	(vint_operand): Likewise.
	(vlogical_operand): Likewise.
	(gpc_reg_operand): Likewise.
	(int_reg_operand): Likewise.
	(int_reg_operand_not_pseudo): Likewise.
	(base_reg_operand): Likewise.
	(fpr_reg_operand): Likewise.
	(toc_fusion_or_p9_reg_operand): Likewise.
	(htm_spr_reg_operand): Likewise.
	(reg_or_indexed_operand): Likewise.
	(lwa_operand): Likewise.
	(symbol_ref_operand): Likewise.
	(splat_input_operand): Likewise.
	(reg_or_mem_no_sfmode): Delete, no longer used.
	(lwa_operand_no_sfmode): Likewise.

	* config/rs6000/rs6000-protos.h (invalid_vsx_subreg): Add
	declaration.

	* config/rs6000/rs6000.c (invalid_vsx_subreg): New function, don't
	allow SUBREG mixing of SFmode and other types.
	(rs6000_emit_move): Rework invalid SFmode subreg support.

	* config/rs6000/vsx.md (vsx_mov<mode>_64bit): Change
	register_operand to gpc_reg_operand.
	(vsx_mov<mode>_32bit): Likewise.
	(peephole to optimize logical operations on SFmode): Use correct
	mode for power9 splat operation.

	* config/rs6000/rs6000.md (zero_extendsi<mode>2): Undo last
	change.
	(extendsi<mode>2): Likewise.
	(fixuns_trunc<mode>di2): Use gpc_reg_operand instead of
	register_operand.
	(movsi_from_sf): Rework to allow use on power7 and/or 32-bit
	systems.
	(movsi_from_sf): Likewise.
	(movdi_from_sf_zero_ext): Likewise.
	(movdi_from_sf_sign_ext): Likewise.

2016-12-20  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (reg_or_mem_no_sfmode): New
	predicate that is like reg_or_mem_operand, except it does not
	allow mixing SUBREGs of SImode/SFmode on machines that can allow
	SImode in the vector registers.
	(lwa_operand_no_sfmode): (reg_or_mem_no_sfmode): New predicate
	that is like lwa_operand, except it does not allow mixing SUBREGs
	of SImode/SFmode on machines that can allow SImode in the vector
	registers.

	* config/rs6000/rs6000.c (rs6000_emit_move): Add support for
	destination being a MEM in handling mixing SUBREGs of SImode and
	SFmode.

	* config/rs6000/rs6000.md (zero_extendsi<mode>2): Rework zero and
	sign extend of SImode to use new predicates.
	(extendsi<mode>2): Likewise.
	(movsi_from_sf): Redo spacing of multiple alternatives.
	(movdi_from_sf_zero_ext): Likewise.
	(movdi_from_sf_sign_ext): New insn that handles sign extension
	combined with movsi_from_sf.
	(movsf_from_si): Fix warning that prevented bootsrapping.

2016-12-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (const_0_to_12_operand): Fix thinko,
	range should be 0..12.

	* config/rs6000/rs6000.c (rs6000_emit_move): If we are moving a
	SFmode to a SImode via a subreg, catch it, and do the conversion.
	Similarly, do the conversion if we are moving SImode ot SFmode.

	* config/rs6000/vsx.md (vextract4b): Fix thinko, range should be
	0..12.
	(vextract4b_internal): Likewise.
	(vinsert4b): Likewise.
	(vinsert4b_internal): Likewise.
	(vinsert4b_di): Likewise.
	(vinsert4b_di_internal): Likewise.

	* config/rs6000/rs6000.md (UNSPEC_SF_FROM_SI): New unspecs.
	(UNSPEC_SI_FROM_SF): Likewise.
	(zero_extendsi<mode>2): Split into an expander and insn.
	Recognize the special case of doing a zero/sign extend of a value
	that is a SUBREG of the SFmode value.  If it is, make sure the
	SFmode is converted from the internal format in the vector
	registers to the standard storage format.  Fix a thinko where
	zero_extend on vector registers accessed the wrong 4 bytes.
	(zero_extendsi<mode>2_internal): Likewise.
	(extendsi<mode>2): Likewise.
	(extendsi<mode>2_internal): Likewise.
	(movsi_from_sf): New insn to generate better code when a SFmode is
	put into a union, and a SImode is extracted.  Do not depend on the
	register allocator do the right thing with secondary reload.
	(movdi_from_sf_zero_ext): Optimize zero_extend of movsi_from_sf.
	(movsf_from_si): New insn to generate better code when putting a
	SFmode value into a union and SFmode is extracted.

	Merge up to 243758.
	* REVISION: Update subversion id.

2016-12-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_secondary_reload): Print reg or
	mem basic information in first line if -mdebug=addr.  Shorten
	default secondary reload output.

2016-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 243729.
	* REVISION: Update subversion id.

2016-12-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/71977
	* config/rs6000/vsx.md (SFBOOL_*): New constants for optimizing
	logical operations on SFmode.
	(SFmode define_peephole2): Recognize when we are moving a SFmode
	value from a vector register to a GPR, doing a simple logical
	operation on the result, and moving it back to a vector register
	and moving the logical operand to the vector registsrs, and do the
	boolean operation there.
	* config/rs6000/rs6000.md (and_ior_xor): New code iterator for
	optimizing logical operations on SFmode.

2016-12-14   Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch subversion id 243664

