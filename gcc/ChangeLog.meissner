2018-06-08  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 261338.
	* REVISION: Update subversion id.

2018-06-08  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 261338.
	* REVISION: Update subversion id.

2018-06-08  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 261328.
	* REVISION: Update subversion id.

2018-06-08  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 261328.
	* REVISION: Update subversion id.

2018-06-07  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 261303.
	* REVISION: Update subversion id.

2018-06-07  Michael Meissner  <meissner@linux.ibm.com>

	Merge up to 261303.
	* REVISION: Update subversion id.

2018-06-07  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-modes.def (toplevel): Include
	rs6000-modes.h to provide the precision values to use for the
	128-bit floating point types.
	(IFmode): Likewise.
	(KFmode): Likewise.
	(TFmode): Likewise.
	* config/rs6000/rs6000-modes.h: Likewise.
	* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Change
	from upstream merge.
	(rs6000_invalid_builtin): Likewise.
	(rs6000_option_override_internal): Set the 128-bit long double
	precision to be 127 to properly select TFmode.
	(rs6000_init_builtins): Undo previous change for complex multiply
	and divide.  Set long double type size to 127 to properly choose
	TFmode.
	(create_complex_muldiv): Likewise.
	(init_float128_ibm): Likewise.
	(init_float128_ieee): Likewise.
	* config/rs6000/rs6000.h (toplevel): Include rs6000-modes.h to
	provide the precision values to use for the 128-bit floating point
	types.
	(TARGET_LONG_DOUBLE_128): Delete previous comment.
	(LONG_DOUBLE_TYPE_SIZE): Likewise.
	(RS6000_BTI_ibm128_complex): Delete, no lnoger used.
	(ibm128_complex_type_node): Likewise.

2018-06-06  Michael Meissner  <meissner@linux.ibm.com>

	PR target/85358
	* config/rs6000/rs6000-modes.def (IFmode): Reorder the 128-bit
	floating point modes so that __ibm128 is not converted to long
	double when long double is IEEE 128-bit on a ISA 3.0 (power9)
	system.
	(KFmode): Likewise.
	(TFmode): Likewise.
	* config/rs6000/rs6000.c (rs6000_debug_reg_global): Change tests
	for long double type size being 128 bits to 127/128 bits.
	(rs6000_option_override_internal): If long double is IEEE 128-bit,
	set the long double type size to 127 to force KFmode to be chosen
	instead of TFmode.
	(ibm128_float_type_node): On systems without IEEE 128-bit floating
	point, reset TFmode precision to 128 bits.
	(create_complex_muldiv): Move higher in the file.
	(init_float128_ibm): Make sure IBM 128-bit calls the historical
	complex long double multiply/divide to match previous compilers
	behaviors.
	(init_float128_ieee): Remove setting long double complex multiply
	and divide when long double is IEEE 128-bit, since reworking the
	modes means we now call the correct function.
	* config/rs6000/rs6000.h (TARGET_LONG_DOUBLE_128): Deal with
	rs6000_long_double_type_size being 127 for selecting IEEE 128-bit
	long double as well as being 128 for selecting IBM 128-bit long
	double.
	(RS6000_BTI_ibm128_complex): New tree node for __ibm128 complex
	type.
	(ibm128_complex_type_node): Likewise.

2018-06-05  Michael Meissner  <meissner@linux.ibm.com>

	PR target/85657
	* config/rs6000/rs6000-builtin.def (BU_IBM128_2): New helper
	macro for __ibm128 built-in functions.
	(PACK_IF): Add __ibm128 pack/unpack functions.
	(UNPACK_IF): Likewise.
	* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Do not
	enable long double built-in functions if long double is IEEE
	128-bit floating point.
	(rs6000_invalid_builtin): Update long double built-in function
	error message.
	(rs6000_expand_builtin): For PACK_IF and UNPACK_IF built-in
	functions, adjust the built-in function to use the long double
	built-in function if __ibm128 and long double are the same type.
	* doc/extend.texi (PowerPC builtins): Update documention for
	__builtin_{,un}pack_longdouble.  Add documentation for
	__builtin_{,un}pack_ibm128.

2018-06-05  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (rs6000_init_builtins): Make __ibm128 use
	the long double type if long double is IBM extended double.  Make
	__float128 use the long double type if long double is IEEE 128-bit.

2018-06-05  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (rs6000_passes_ieee128): New boolean to
	track if we pass or return IEEE 128-bit floating point.
	(ieee128_mangling_gcc_8_1): New boolean to say whether to generate
	C++ mangling that is compatible with GCC 8.1.
	(TARGET_ASM_GLOBALIZE_DECL_NAME): Override target hook.
	(init_cumulative_args): Note if we pass or return IEEE 128-bit
	floating point types.
	(rs6000_function_arg_advance_1): Likewise.
	(rs6000_mangle_type): Optionally generate mangled names that match
	what GCC 8.1 generated for IEEE 128-bit floating point types.
	(rs6000_globalize_decl_name): If we have an external function that
	passes or returns IEEE 128-bit types, generate a weak reference
	from the mangled name used in GCC 8.1 to the current mangled
	name.

2018-06-05   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch subversion id 261212

