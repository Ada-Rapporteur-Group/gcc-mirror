==================== work095, patch #12.

Enable using overload built-ins for 128-bit floating point.

2022-07-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Remove all
	of the code that changed KFmode built-in functions into TFmode, since
	these functions now support overloading between KFmode and TFmode.
	* config/rs6000/rs6000-c.cc (rs6000_builtin_type_compatible):
	Don't consider _Float128 and long double under
	-mabi=ieeelongdouble to be compatible for built-in functions.  Use
	overloading instead.
	* config/rs6000/rs6000.md (IFKF): Delete.
	(IFKF_reg): Delete.
	(@extenddf<mode>2_fprs): Remove extra test for
	TARGET_LONG_DOUBLE_128.
	(@extenddf<mode2>_vsx): Likewise.
	(extendiftf2): Allow __ibm128 even if _Float128 is not supported.
	(extendkfif2): New insn.
	(extendtfkf2): Allow __ibm128 even if _Float128 is not supported.
	(extendtfif2): Likewise.
	(trunckfif2): New insn.
	(trunctfif2): Allow __ibm128 even if _Float128 is not supported.
	(extendkftf2_internal): Split extend<mode>tf2_internal and
	extendtf<mode>2_internal into separate insns that handle either
	conversions between IEEE 128-bit types or between IBM 128-bit types.
	Set the type and insn length correctly.
	(extendtfkf2_internal): Likewise.
	(extendiftf2_internal): Likewise.
	(extendtfif2_internal): Likewise.

==================== work095, patch #11.

Make __float128 and __ibm128 use different types from long double.

2022-07-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_init_builtins): Always
	create a new tree node for __ibm128, even if long double uses the IBM
	128-bit format.  Always create a new tree node for __float128, even if
	long double uses the IEEE 128-bit format.
	* config/rs6000/rs600.cc (init_float128_ibm): Remove checks for
	hardware floating point for the IBM 128-bit comparisons.
	(init_float128_ieee): Do not create __mulkc3 and __divkc3 since
	__float128 always creates these functions.
	(rs6000_init_libfuncs): Create complex multiply and divide for long
	double if long double uses the IEEE 128-bit encoding.
	(rs6000_scalar_mode_supported_p): Allow __ibm128 even if we don't
	support _Float128.
	(rs6000_libgcc_floating_mode_supported_p): Allow KFmode if IEEE
	128-bit floating point is supported.  Allow IFmode if either IEEE
	128-bit floating point is supported or long double is IBM 128-bit.
	(rs6000_floatn_mode): Always return KFmode for IEEE 128-bit.  Do not
	return TFmode, even if long double uses the IEEE 128-bit format.
	(rs6000_c_mode_for_suffix): The 'q' suffix always uses KFmode, even if
	long double uses the IEEE 128-bit encoding.
	* config/rs6000/rs6000.h (FLOAT128_IBM_P): Remove checks for
	-mhard-float.
	(TARGET_IBM128): New macro.

gcc/testsuite/

	* gcc.target/powerpc/mulkd3-2.c: Update test.
	* gcc.target/powerpc/divkd3-2.c: Likewise.

libgcc/

	* config/rs6000/float128-ifunc.c (__multc3_ieee128): Add ifunc
	support.
	(__divtc3_ieee128): Likewise.
	* config/rs6000/quad-float128.h (__multc3_ieee128): Add
        Declaration.
        (__divtc3_ieee128): Likewise.

==================== work095, patch #10.

Allow IBM 128-bit  to do offset addressing.

I noticed that we didn't enable offset addressing for IBM 128-bit floating
point.

2022-07-22   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (rs6000_setup_reg_addr_masks): Allow
	IFmode and possibly TFmode to use offset addressing.
	(reg_offset_addressing_ok_p): IBM 128-bit floating point modes can do
	offset addressing.

==================== work095, patch #9.

Do not enable -mblock-ops-vector-pair.

Testing has shown that using the load vector pair and store vector pair
instructions for block moves has some performance issues on power10.

A patch on June 11th modified the code so that GCC would not set
-mblock-ops-vector-pair by default if we are tuning for power10, but it
would set the option if we were tuning for a different machine and have
load and store vector pair instructions enabled.

This patch just eliminates the code setting -mblock-ops-vector-pair at
all.


2022-07-22   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (rs6000_option_override_internal):
	Do not enable -mblock-ops-vector-pair by default on power10.

==================== work095, patch #8.

Support IEEE 128-bit overload test data built-in functions.

This patch adds support for overloading the IEEE 128-bit test data and
test data negate built-in functions bewteeen KFmode and TFmode arguments.

2022-07-21   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def
	(__builtin_vsx_scalar_test_data_class_qp_kf): Rename KFmode IEEE
	128-bit test data built-in functions to have a KF suffix to allow
	overloading.
	(__builtin_vsx_scalar_test_neg_qp_kf): Likewise.
	(__builtin_vsx_scalar_test_data_class_qp_tf): Add TFmode variants
	for IEEE 128-bit insert and extract support.
	(__builtin_vsx_scalar_test_neg_qp_tf): Likewise.
	* config/rs6000/rs6000-overload.def
	(__builtin_vec_scalar_test_data_class): Add TFmode overloads.
	(__builtin_vec_scalar_test_neg): Likewise.
	(__builtin_vec_scalar_test_neg_qp): Likewise.
	(__builtin_vec_scalar_test_data_class_qp): Likewise.

gcc/testsuite/

	* gcc.target/powerpc/bfp/scalar-test-data-class-11.c:  Update the
	expected error message.
	* gcc.target/powerpc/bfp/scalar-test-neg-5.c: Likewise.

==================== work095, patch #7.

Support IEEE 128-bit overload extract and insert built-in functions.

This patch adds support for overloading the IEEE 128-bit extract and
insert built-in functions bewteeen KFmode and TFmode arguments.

2022-07-21   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def
	(__builtin_vsx_scalar_extract_expq_kf): Rename KFmode IEEE 128-bit
	insert and extract built-in functions to have a KF suffix to allow
	overloading.
	(__builtin_vsx_scalar_extract_sigq_kf): Likewise.
	(__builtin_vsx_scalar_insert_exp_qp_kf): Likewise.
	(__builtin_vsx_scalar_extract_expq_tf): Add TFmode variants for
	IEEE 128-bit insert and extract support.
	(__builtin_vsx_scalar_extract_sigq_tf): Likewise.
	(__builtin_vsx_scalar_insert_exp_qp_tf): Likewise.
	* config/rs6000/rs6000-c.cc (altivec_resolve_overloaded_builtin):
	Add support for having KFmode and TFmode variants of VSIEQPF.
	* config/rs6000/rs6000-overload.def
	(__builtin_vec_scalar_extract_exp): Add TFmode overloads.
	(__builtin_vec_scalar_extract_sig): Likewise.
	(__builtin_vec_scalar_insert_exp): Likewise.

gcc/testsuite/

	* gcc.target/powerpc/bfp/scalar-extract-exp-4.c:  Update the
	expected error message.
	* gcc.target/powerpc/bfp/scalar-extract-sig-4.c: Likewise.
	* gcc.target/powerpc/bfp/scalar-insert-exp-10.c: Likewise.

==================== work095, patch #6.

Support IEEE 128-bit overload comparison built-in functions.

This patch adds support for overloading the IEEE 128-bit comparison
built-in functions bewteeen KFmode and TFmode arguments.

2022-07-21   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def
	(__builtin_vsx_scalar_cmp_exp_qp_eq_kf): Rename KFmode comparison
	built-in functions to have a KF suffix to allow overloading.
	(__builtin_vsx_scalar_cmp_exp_qp_gt_kf): Likewise.
	(__builtin_vsx_scalar_cmp_exp_qp_lt_kf): Likewise.
	(__builtin_vsx_scalar_cmp_exp_qp_unordered_kf): Likewise.
	(__builtin_vsx_scalar_cmp_exp_qp_eq_tf): Add TFmode comparison
	built-in functions.
	(__builtin_vsx_scalar_cmp_exp_qp_gt_tf): Likewise.
	(__builtin_vsx_scalar_cmp_exp_qp_lt_tf): Likewise.
	(__builtin_vsx_scalar_cmp_exp_qp_unordered_tf): Likewise.
	* config/rs6000/rs6000-overload.def
	(__builtin_vec_scalar_cmp_exp_eq): Add TFmode overloaded
	functions.
	(__builtin_vec_scalar_cmp_exp_gt): Likewise.
	(__builtin_vec_scalar_cmp_exp_lt): Likewise.
	(__builtin_vec_scalar_cmp_exp_unordered): Likewise.

==================== work095, patch #5.

Support IEEE 128-bit overload round_to_odd built-in functions.

This patch adds support for overloading the IEEE 128-bit round to odd
built-in functions bewteeen KFmode and TFmode arguments.

2022-07-21   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def
	(__builtin_addf128_round_to_odd_kf): Rename KFmode round to odd
	built-in functions with a KF suffix to allow overloading.
	(__builtin_divf128_round_to_odd_kf): Likewise.
	(__builtin_fmaf128_round_to_odd_kf): Likewise.
	(__builtin_mulf128_round_to_odd_kf): Likewise.
	(__builtin_sqrtf128_round_to_odd_kf): Likewise.
	(__builtin_subf128_round_to_odd_kf): Likewise.
	(__builtin_truncf128_round_to_odd_kf): Likewise.
	(__builtin_addf128_round_to_odd_tf): Add TFmode round to odd
	built-in functions.
	(__builtin_fmaf128_round_to_odd_tf): Likewise.
	(__builtin_mulf128_round_to_odd_tf): Likewise.
	(__builtin_sqrtf128_round_to_odd_tf): Likewise.
	(__builtin_subf128_round_to_odd_tf): Likewise.
	(__builtin_truncf128_round_to_odd_tf): Likewise.
	* config/rs6000/rs6000-overload.def
	(__builtin_addf128_round_to_odd): Make IEEE 128-bit round to odd
	built-in functions overloaded.
	(__builtin_divf128_round_to_odd): Likewise.
	(__builtin_fmaf128_round_to_odd): Likewise.
	(__builtin_mulf128_round_to_odd): Likewise.
	(__builtin_sqrtf128_round_to_odd): Likewise.
	(__builtin_subf128_round_to_odd): Likewise.
	(__builtin_truncf128_round_to_odd): Likewise.

==================== work095, patch #4.

IEEE 128-bit built-in support.

This patch lays the ground work that future patches will use to add
builtin support (both normal and overloaded) for the case where long
double uses the IEEE 128-bit encoding.

This adds a new stanza (ieee128-hw-ld) for when we have IEEE 128-bit
hardware support and long double uses the IEEE 128-bit encoding.

A new type attribute (ieeeld) is added for long double if long double uses
the IEEE 128-bit encoding.

2022-07-21   Michael Meissner  <meissner@linux.ibm.com>


gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_invalid_builtin): Add
	support for ibm128-hw-ld stanza.
	(rs6000_builtin_is_supported): Likewise.
	(rs6000_init_builtins): Likewise.
	(rs6000_expand_builtin): Add support for IEEE128_HW_LD.  Add
	support for ieeeld.
	* config/rs6000/rs6000-builtins.def (toplevel): Add comment about
	the new ieeeld attribute.
	* config/rs6000/rs6000-gen-builtins.cc (enum bif_stanza): Add
	BSTZ_IEEE128_HW_LD.
	(stanza_map): Likewise.
	(enable_string): Likewise.
	(attrinfo): Add isieeeld.
	(parse_bif_attrs): Parse ieeeld.  Add printing ieeeld to the debug
	print.
	(write_decls): Add support for ibm128-hw-ld stanza and ieeeld
	attribute.
	(write_bif_static_init): Add support for ieeeld attribute.

==================== work095, patch #3 was reverted.

==================== work095, patch #2 was reverted.

==================== work095, patch #1 was reverted.

==================== work095, branch setup.

2022-07-18   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

