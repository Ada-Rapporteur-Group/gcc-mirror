==================== Branch work118, patch #1 ====================

PR 93230: Fold sign/zero extension into vec_extract.

gcc/

2023-04-12  Michael Meissner  <meissner@linux.ibm.com>

	PR target/93230
	* config/rs6000/rs6000.c (rs6000_split_vec_extract_var): Remove
	support for handling MEM, users call rs6000_adjust_vec_address
	directly.
	* config/rs6000/vsx.md (VSX_EX_FL): New mode attribute.
	(vsx_extract_v4sf_<mode>_load): Rename to vsx_extract_v4sf_load.
	(vsx_extract_v4sf_to_df_load): New insn to combine vec_extract of
	SFmode from memory being converted to DFmode.
	(vsx_extract_v4si_<su><mode>_load): New insn to support V4SI
	vec_extract from memory being converted to DImode directly without
	an extra sign/zero extension.
	(vsx_extract_v8hi_<su><mode>_load): New insn to support V8HI
	vec_extract from memory being converted to DImode directly without
	an extra sign/zero extension.
	(vsx_extract_v16qi_u<mode>_load): New insn to support V16QI
	vec_extract from memory being converted to DImode directly without
	an extra zero extension.
	(vsx_extract_v4si_var_load): Split V4SI extract from other small
	integers, and add support for loading up vector registers with
	sign/zero extension directly.
	(vsx_extract_<mode>_var_load, VSX_EXTRACT_I2 iterator): Split
	V8HI/V16QI vector extract from memory to handle loading vector
	registers in addition to GPR registers.
	(vsx_extract_<mode>_uns_di_var): New insn to optimize extracting a
	small integer from a vector in a register and zero extending it to
	DImode.
	(vsx_extract_v4si_<su><mode>_var_load): New insns to support
	combining a V4SI variable vector extract from memory with sign or
	zero extension.
	(vsx_extract_v8hi_<su><mode>_var_load): New insns to support
	combining a V8HI variable vector extract from memory with sign or
	zero extension.
	(vsx_extract_v4si_u<mode>_var_load): New insns to support
	combining a V16QI variable vector extract from memory with zero
	extension.
	(vsx_ext_v4si_fl_<mode>_load): New insn to support a V4SI vector
	extract that is converted to floating point to avoid doing a
	direct move.
	(vsx_ext_v4si_ufl_<mode>_load):  New insn to support an unsigned
	V4SI vector extract that is converted to floating point to avoid
	doing a direct move.
	(vsx_ext_v4si_fl_<mode>_var_load): New insn to support a V4SI
	variable vector extract that is converted to floating point to
	avoid doing a direct move.
	(vsx_ext_v4si_ufl_<mode>_var_load): New insn to support an
	unsigned V4SI variable vector extract that is converted to
	floating point to avoid doing a direct move.
	(vsx_ext_<VSX_EXTRACT_I2:mode>_fl_<FL_CONV:mode>_load): New insns
	to support a V8HI/V16QI vector extract that is converted to
	floating point to avoid doing a direct move.
	(vsx_ext_<VSX_EXTRACT_I2:mode>_ufl_<FL_CONV:mode>_load): New insns
	to support an unsigned V8HI/V16QI vector extract that is converted
	to floating point to avoid doing a direct move.
	(vsx_ext_<VSX_EXTRACT_I2:mode>_fl_<FL_CONV:mode>_vl): New insns to
	support a variable V8HI/V16QI vector extract that is converted to
	floating point to avoid doing a direct move.
	(vsx_ext_<VSX_EXTRACT_I2:mode>_ufl_<FL_CONV:mode>_vl): New insns
	to support an unsigned variable V8HI/V16QI vector extract that is
	converted to floating point to avoid doing a direct move.

gcc/testsuite/

2023-04-12  Michael Meissner  <meissner@linux.ibm.com>

	PR target/93230
	* gcc.target/powerpc/fold-vec-extract-char.p8.c: Adjust
	instruction counts.
	* gcc.target/powerpc/fold-vec-extract-int.p8.c: Adjust
	instruction counts.
	* gcc.target/powerpc/fold-vec-extract-short.p8.c: Adjust
	instruction counts.
	* gcc.target/powerpc/pcrel-opt-inc-di.c: Fix typo.

==================== Branch work118, patch #21 ====================

Improve 64->128 bit zero extension on PowerPC

2023-04-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/108958
	* gcc/config/rs6000.md (zero_extendditi2): New insn.

gcc/testsuite/

	PR target/108958
	* gcc.target/powerpc/zero-extend-di-ti.c: New test.

==================== Branch work118, patch #20 ====================

Fix splat of extract for long long and double.

2023-04-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/99293
	* gcc/config/rs6000/vsx.md (vsx_splat_extract_<mode>): New combiner
	insn.

gcc/testsuite/

	PR target/108958
	* gcc.target/powerpc/pr99293.c: New test.
	* gcc.target/powerpc/builtins-1.c: Update insn count.


==================== Branch work118, patch #1 ====================

Make load/cmp fusion know about prefixed loads.

The issue with the bug is the power10 load GPR + cmpi -1/0/1 fusion
optimization generates illegal assembler code.

Ultimately the code was dying because the fusion load + compare -1/0/1 patterns
did not handle the possibility that the load might be prefixed.

The main cause is the prefixed attribute did not consider that fused_load_cmpi
insns are essentially load instructions, and to check whether the load is
prefixed.

This code ensures that the prefixed attribute is correctly set for the fusion
load plus compare immediate insns combined instruction.  This means it will
split the insn before final is called, and the load instruction will use a
prefixed load.

The original patch by Aaron reworked the insns generated by genfusion.pl so
that they had constraints that limited the load to be YZ, which are constraints
that restrict the load to offsets that the non-prefixed LWA instruction can
handle.  I will submit that patch as a second patch.  However, just setting the
prefixed attribute correctly will correctly split the insns.

2023-03-23   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/105325
	* gcc/config/rs6000/rs6000.md (prefixed attribute): Add fused_load_cmpi
	instructions to the list of instructions that might have a prefixed load
	instruction.

gcc/testsuite/

	PR target/105325
	* g++.target/powerpc/pr105325.C: New test.

==================== Branch work118, baseline ====================

2023-04-11   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

