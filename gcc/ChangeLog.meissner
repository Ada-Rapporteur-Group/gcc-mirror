==================== work097, patch015

Delete ieee128_float_type_node.

Now that we always use float128_type_node for __float128, we can delete the tree
variable ieee128_float_type_node.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_type_string): Delete
	ieee128_float_type_node.
	* config/rs6000/rs6000-c.cc (rs6000_target_modify_macros): Likewise.
	(rs6000_cpu_cpp_builtins): Likewise.
	* config/rs6000/rs6000.cc (rs6000_translate_mode_attribute): Likewise.
	* config/rs6000/rs6000.h (RS6000_BTI_ieee128_float): Delete.
	(ieee128_float_type_node): Delete.

==================== work097, patch014

Add 'w' suffix for __ibm128 constants.

In the documentation, we mention that 'w' or 'W' can be used as a suffix for
__ibm128 constants.  We never implemented this.  This patch fixes that.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (rs6000_c_mode_for_suffix): Allow 'w' or 'W'
	for __ibm128 constants.

gcc/testsuite/

	* gcc.target/powerpc/ibm128-suffix.c: New test.

==================== work097, patch013

Make __float128 use the _Float128 type.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_init_builtins): Always use the
	_Float128 type for __float128.  Don't use the long double type.
	* config/rs6000/rs6000.cc (rs6000_libgcc_floating_mode_supported_p):
	Always use KFmode for Float128 mode.
	(rs6000_floatn_mode): Likewise.
	(rs6000_c_mode_for_suffix): Likewise.

==================== work097, patch012

Update switching between KFmode to TFmode and IFmode to TFmode builtins

This patch looks to see if the caller function wants TFmode (when long double is
IEEE 128-bit) to switch the KFmode built-in functions to TFmode.

It will look to see if the caller functions wants IFmode (when long double is
IBM 128-bit) to switch the unpackif built-in function to unpacktf.

It will look to see if a TFmode argument is passed (when long double is IBM
128-bit) to switch the packif built-in function to packtf.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Update
	switching from KFmode/IFmode built-in functions to TFmode built-in
	functions.

==================== work097, patch011

Add ibm128_operand.

Since we have 2 modes for IBM 128-bit (IFmode and TFmode if long double is IBM
128-bit), this patch provides a new predicate (ibm128_operand) that allows
combining a conversion from one mode to another.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/predicates.md (ibm128_operand): New predicate.
	* config/rs6000/rs6000.md (extendiftf2_internal): Add GPR registers in
	case -msoft-float is used.
	(extendtfif2_internal): Likewise.
	(unpack<mode>): Use ibm128_operand.
	(unpack<mode>_dm): Likewise.
	(unpack<mode>_nodm): Likewise.

==================== work097, patch010

Update switching between KFmode to TFmode and IFmode to TFmode builtins

This patch looks to see if the caller function wants TFmode (when long double is
IEEE 128-bit) to switch the KFmode built-in functions to TFmode.

It will look to see if the caller functions wants IFmode (when long double is
IBM 128-bit) to switch the unpackif built-in function to unpacktf.

It will look to see if a TFmode argument is passed (when long double is IBM
128-bit) to switch the packif built-in function to packtf.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Update
	switching from KFmode/IFmode built-in functions to TFmode built-in
	functions.

==================== work097, patch010

Add ibm128_operand.

Since we have 2 modes for IBM 128-bit (IFmode and TFmode if long double is IBM
128-bit), this patch provides a new predicate (ibm128_operand) that allows
combining a conversion from one mode to another.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/predicates.md (ibm128_operand): New predicate.
	* config/rs6000/rs6000.md (extendiftf2_internal): Add GPR registers in
	case -msoft-float is used.
	(extendtfif2_internal): Likewise.
	(unpack<mode>): Use ibm128_operand.
	(unpack<mode>_dm): Likewise.
	(unpack<mode>_nodm): Likewise.

==================== work097, patch010

Add ieee128_operand.

Since we have 2 modes for IEEE 128-bit (KFmode and TFmode if long double is IEEE
128-bit), this patch provides a new predicate (ieee128_operand) that allows
combining a conversion from one mode to another.

2022-08-12   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/predicates.md (ieee128_operand): New predicate.
	* config/rs6000/rs6000.md (trunc<mode>sf2_hw): Use ieee128_operand.
	(round<mode>2): Likewise.
	(add<mode>3_odd): Likewise.
	(sub<mode>3_odd): Likewise.
	(mul<mode>3_odd): Likewise.
	(div<mode>3_odd): Likewise.
	(sqrt<mode>2_odd): Likewise.
	(fma<mode>4_odd): Likewise.
	(fms<mode>4_odd): Likewise.
	(nfma<mode>4_odd): Likewise.
	(nfms<mode>4_odd): Likewise.
	(trunc<mode>df2_odd): Likewise.
	* config/rs6000/vsx.md (xsxexpqp_<mode>): Likewise.
	(xsxsigqp_<mode>): Likewise.
	(xsiexpqpf_<mode>): Likewise.
	(xscmpexpqp_<code>_<mode): Likewise.
	(xscmpexpqp_<code>_<mode>): Likewise.
	(xststdcqp_<mode>): Likewise.
	(xststdcnegqp_<mode>): Likewise.
	(xststdcqp_<mode>): Likewise.

==================== work097, patch009 was reverted

==================== work097, patch008 was reverted

==================== work097, patch007 was reverted

==================== work097, patch006 was reverted

==================== work097, patch005

Improve converting between 128-bit modes that use the same format.

This patch improves the insns used for converting between two modes using
the 128-bit floating point format (i.e. converting between KFmode and TFmode if
-mabi=ieeelongdouble is used, and converting between IFmode and TFmode if
-mabi=ibmlongdouble is used).  The new insns have the correct insn type and
instruction length for the move involved.

2022-08-10   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.md (IFKF): Delete.
	(IFKF_reg): Delete.
	(extendkfif2): New define_expand.
	(trunckfif2): New define_expand.
	(extend<mode>tf2_internal): Split into extendiftf2_internal and
	extendkftf2_internal.  Update the insns to use the correct insn type and
	length attributes based on whether KFmode or IFmode is used.
	(extendiftf2_internal): Likewise.
	(extendkftf2_internal): Likewise.
	(extendtf<mode>2_internal): Split into extendtfif2_internal and
	extendtfkf2_internal.  Update the insns to use the correct insn type and
	length attributes based on whether KFmode or IFmode is used.
	(extendtfif2_internal): Likewise.
	(extendtfkf2_internal): Likewise.

==================== work097, patch004 was reverted

==================== work097, patch003 was reverted

==================== work097, patch002

Rework 128-bit complex multiply and divide.

This function reworks how the complex multiply and divide built-in functions are
done.  Previously we created built-in declarations for doing long double complex
multiply and divide when long double is IEEE 128-bit.  The old code also did not
support __ibm128 complex multiply and divide if long double is IEEE 128-bit.

One of the problems with this approach is that the add_builtin_function would
abort if we used the same name for two different built-in functions.

This code does not create the built-in declaration.  Instead, it uses the
TARGET_MANGLE_DECL_ASSEMBLER_NAME hook to change the name before it is written
out to the assembler file.

2022-08-09   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-c.cc (rs6000_cpu_cpp_builtins): Set
	building_libgcc.
	* config/rs6000/rs6000.cc (create_complex_muldiv): Delete.
	(init_float128_ieee): Delete code to switch complex multiply and divide
	for long double.
	(complex_multiply_builtin_code): New helper function.
	(complex_divide_builtin_code): Likewise.
	(rs6000_mangle_decl_assembler_name): Add support for mangling the name
	of complex 128-bit multiply and divide built-in functions.
	* config/rs6000/rs6000.opt (building_libgcc): New target variable.

==================== work097, patch001

Allow __ibm128 even if IEEE 128-bit floating point is not supported.

This set of patches changes the GCC compiler to allow the use of the __ibm128
keyword if we have IEEE 128-bit floating point support enabled or if long double
is 128-bits.

In addition, checks for requiring hardware floating point to use __ibm128 have
been removed.  This fixes PR target/105534.

2022-08-09   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	PR target/105534
	* config/rs6000/rs6000-builtins.cc (rs6000_init_builtins): Create
	__ibm128 on older machines without IEEE 128-bit support.
	* config/rs6000/rs600.cc (init_float128_ibm): Remove checks for hardware
	floating point for the IBM 128-bit comparisons.
	(rs6000_init_libfuncs): Create IBM 128-bit floating point support even
	if we don't support IEEE 128-bit floating point.
	(rs6000_scalar_mode_supported_p): Allow __ibm128 even if we don't
	support _Float128.
	* config/rs6000/rs6000.h (FLOAT128_IBM_P): Remove checks for
	-mhard-float.
	(TARGET_IBM128): New macro.
	* config/rs6000/rs6000.md (@extenddf<mode>2_fprs): Allow IFmode to be
	converted even if long double is not 128-bits.
	(extenddf<mode>2_vsx): Likewise.
	(extendtfif2): Allow conversion if we have __ibm128 but not IEEE 128-bit
	floating point.
	(trunckftf2): Likewise.

==================== work097, create branch

2022-08-08   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

