2016-12-29  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 243966.
	* REVISION: Update subversion id.

2016-12-29  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (sf_subreg_operand): Use
	TARGET_ALLOW_SF_SUBREG.
	(vsx_reg_sfsubreg_ok): New predicate to allow VSX registers, but
	don't check for SFmode SUBREGS.
	(gpc_nosf_reg_operand): Delete, not used.
	(gpc_reg_operand): Don't match if we have a SFmode SUBREG that
	might be problematical on a VSX system.
	(int_reg_operand): Likewise.
	(reg_or_short_operand): Undo previous changes that used
	gpc_nosf_reg_operand instead of gpc_reg_operand.
	(reg_or_aligned_short_operand): Likewise.
	(reg_or_u_short_operand): Likewise.
	(reg_or_cint_operand): Likewise.
	(add_cint_operand): Likewise.
	(reg_or_sub_cint_operand): Likewise.
	(reg_or_logical_cint_operand): Likewise.
	(vsx_reg_or_cint_operand): Likewise.
	(reg_or_mem_operand): Likewise.
	(reg_or_none500mem_operand): Likewise.

	* config/rs6000/rs600-protos.h (valid_sf_si_move): New
	declaration.

	* config/rs6000/rs6000.c (valid_sf_si_move): New function to
	validate a move to make sure it does not include a SFmode SUBREG
	which can be problematical on VSX systems.

	* config/rs6000/rs6000.h (TARGET_ALLOW_SF_SUBREG): New macro that
	is the inverse of TARGET_NO_SF_SUBREG.

	* config/rs6000/rs6000.md (zero_extendqi<mode>2): Undo previous
	changes that used gpc_nosf_reg_operand instead of
	gpc_reg_operand.
	(zero_extendhi<mode>2): Likewise.
	(zero_extendsi<mode>2): Likewise.
	(zero_extendsi<mode>2): Likewise.
	(extendqi<mode>2): Likewise.
	(extendhi<mode>2): Likewise.
	(extendsi<mode>2): Likewise.
	(and<mode>3): Likewise.
	(and<mode>3_imm): Likewise.
	(and<mode>3_imm_dot): Likewise.
	(and<mode>3_imm_dot2): Likewise.
	(and<mode>3_imm_mask_dot): Likewise.
	(and<mode>3_imm_mask_dot2): Likewise.
	(and<mode>3_imm_dot_shifted): Likewise.
	(and<mode>3_mask): Likewise.
	(and<mode>3_mask_dot): Likewise.
	(and<mode>3_mask_dot2): Likewise.
	(and<mode>3_2insn): Likewise.
	(and<mode>3_2insn_dot): Likewise.
	(and<mode>3_2insn_dot2): Likewise.
	(<code><mode>3, iorxor iterator): Likewise.
	(bool<mode>3_imm): Likewise.
	(bool<mode>3): Likewise.
	(bool<mode>3_dot): Likewise.
	(bool<mode>3_dot2): Likewise.
	(boolc<mode>3): Likewise.
	(boolc<mode>3_dot): Likewise.
	(boolc<mode>3_dot2): Likewise.
	(boolcc<mode>3): Likewise.
	(boolcc<mode>3): Likewise.
	(boolcc<mode>3_dot): Likewise.
	(boolcc<mode>3_dot2): Likewise.
	(eqv<mode>3): Likewise.
	(bpermd_<mode>): Likewise.
	(movsi_from_sf): Rework previous changes.
	(movdi_from_sf_zero_ext): Likewise.
	(mov<mode>_hardfloat): Don't call gpc_reg_operand, call
	register_operand.  Validate move with valid_sf_si_move.
	(movsf_from-si): Rework previous changes.
	(fma<mode>4): Use gpc_reg_operand instead of register_operand to
	prevent problems with SFmode SUBREGs.
	(fms<mode>4): Likewise.
	(fnma<mode>4): Likewise.
	(fnms<mode>4): Likewise.
	(nfma<mode>4): Likewise.
	(nfms<mode>4): Likewise.

2016-12-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (sf_subreg_operand): Use
	TARGET_ALLOW_SF_SUBREG.
	(vsx_reg_sfsubreg_ok): New predicate to allow VSX registers, but
	don't check for SFmode SUBREGS.
	(gpc_nosf_reg_operand): Delete, not used.
	(gpc_reg_operand): Don't match if we have a SFmode SUBREG that
	might be problematical on a VSX system.
	(int_reg_operand): Likewise.
	(reg_or_short_operand): Undo previous changes that used
	gpc_nosf_reg_operand instead of gpc_reg_operand.
	(reg_or_aligned_short_operand): Likewise.
	(reg_or_u_short_operand): Likewise.
	(reg_or_cint_operand): Likewise.
	(add_cint_operand): Likewise.
	(reg_or_sub_cint_operand): Likewise.
	(reg_or_logical_cint_operand): Likewise.
	(vsx_reg_or_cint_operand): Likewise.
	(reg_or_mem_operand): Likewise.
	(reg_or_none500mem_operand): Likewise.

	* config/rs6000/rs600-protos.h (valid_sf_si_move): New
	declaration.

	* config/rs6000/rs6000.c (valid_sf_si_move): New function to valid
	a move to make sure it does not include a SFmode SUBREG which can
	be problematical on VSX systems.
	(rs6000_emit_move): Rework previous changes.

	* config/rs6000/rs6000.h (TARGET_ALLOW_SF_SUBREG): New macro that
	is the inverse of TARGET_NO_SF_SUBREG.

	* config/rs6000/rs6000.md (UNSPEC_SF_FROM_SI): Delete.
	(UNSPEC_SI_FROM_SF): Likewise.
	(UNSPEC_SF_SUBREG): New unspec.
	(zero_extendqi<mode>2): Undo previous changes that used
	gpc_nosf_reg_operand instead of gpc_reg_operand.
	(zero_extendhi<mode>2): Likewise.
	(zero_extendsi<mode>2): Likewise.
	(zero_extendsi<mode>2): Likewise.
	(extendqi<mode>2): Likewise.
	(extendhi<mode>2): Likewise.
	(extendsi<mode>2): Likewise.
	(and<mode>3): Likewise.
	(and<mode>3_imm): Likewise.
	(and<mode>3_imm_dot): Likewise.
	(and<mode>3_imm_dot2): Likewise.
	(and<mode>3_imm_mask_dot): Likewise.
	(and<mode>3_imm_mask_dot2): Likewise.
	(and<mode>3_imm_dot_shifted): Likewise.
	(and<mode>3_mask): Likewise.
	(and<mode>3_mask_dot): Likewise.
	(and<mode>3_mask_dot2): Likewise.
	(and<mode>3_2insn): Likewise.
	(and<mode>3_2insn_dot): Likewise.
	(and<mode>3_2insn_dot2): Likewise.
	(<code><mode>3, iorxor iterator): Likewise.
	(bool<mode>3_imm): Likewise.
	(bool<mode>3): Likewise.
	(bool<mode>3_dot): Likewise.
	(bool<mode>3_dot2): Likewise.
	(boolc<mode>3): Likewise.
	(boolc<mode>3_dot): Likewise.
	(boolc<mode>3_dot2): Likewise.
	(boolcc<mode>3): Likewise.
	(boolcc<mode>3): Likewise.
	(boolcc<mode>3_dot): Likewise.
	(boolcc<mode>3_dot2): Likewise.
	(eqv<mode>3): Likewise.
	(bpermd_<mode>): Likewise.
	(mov<mode>_from_sf): Rework previous changes.
	(movsi_from_sf): Delete.
	(movdi_from_sf_zero_ext): Rework previous changes.
	(mov<mode>_hardfloat): Don't call gpc_reg_operand, call
	register_operand.  Validate move with valid_sf_si_move.
	(movsf_from-si): Rework previous changes.
	(fma<mode>4): Use gpc_reg_operand instead of register_operand to
	prevent problems with SFmode SUBREGs.
	(fms<mode>4): Likewise.
	(fnma<mode>4): Likewise.
	(fnms<mode>4): Likewise.
	(nfma<mode>4): Likewise.
	(nfms<mode>4): Likewise.

2016-12-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/71977
	PR target/70568
	* config/rs6000/predicates.md (sf_subreg_operand): Change test to
	TARGET_NO_SF_SUBREG instead of TARGET_DIRECT_MOVE_64BIT.
	(altivec_register_operand): If TARGET_NO_SF_SUBREG, don't allow
	SFmode subregs.
	(vsx_register_operand): Likewise.
	(vfloat_operand): Likewise.
	(vint_operand): Likewise.
	(vlogical_operand): Likewise.
	(gpc_nosf_reg_operand): Change test to TARGET_NO_SF_SUBREG instead
	of TARGET_DIRECT_MOVE_64BIT.
	(reg_or_short_operand): Call gpc_nosf_reg_operand instead of
	gpc_reg_operand.
	(reg_or_aligned_short_operand): Likewise.
	(reg_or_u_short_operand): Likewise.
	(reg_or_cint_operand): Likewise.
	(reg_or_add_cint_operand"): Likewise.
	(reg_or_sub_cint_operand): Likewise.
	(reg_or_logical_cint_operand): Likewise.
	(and_operand): Likewise.
	(reg_or_mem_operand): Likewise.reg_or_none500mem_operand"): Likewise.
	(reg_nosf_or_cint_operand): Delete.

	* config/rs6000/rs6000.h (TARGET_NO_SF_SUBREG): Define to be true
	if we have to worry about SFmode and integers intermixing in
	vector registers or via direct move.

	* config/rs6000/rs6000.md (zero_extendqi<mode>2): Use
	gpc_nosf_reg_operand instead of gpc_reg_operand.
	(zero_extendhi<mode>2): Likewise.
	(zero_extendsi<mode>2): Likewise.
	(extendqi<mode>2): Likewise.
	(extendhi<mode>2): Likewise.
	(extendsi<mode>2): Likewise.
	(and<mode>3): Go back to reg_or_cint_operand instead of
	reg_nosf_or_cint_operand.
	(<code><mode>3): Likewise.

2016-12-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/71977
	PR target/70568
	* config/rs6000/predicates.md (sf_subreg_operand): New predicate
	that recognizes (SUBREG:SI (REG:SF)) and (SUBREG:SF (REG:SI)), so
	that these can be handled specially.
	(vlogical_operand): Reject sf_subreg_operand arguments.
	(gpc_nosf_reg_operand): New predicates that are like
	gpc_reg_operand and reg_or_cint_operand, but they do not allow the
	operand to match sf_subreg_operand.
	(reg_nosf_or_cint_operand): Likewise.

	* config/rs6000/rs6000.c (rs6000_emit_move): If we are moving a
	SFmode or SImode via a SUBREG, call special insns to do these
	moves using an explicit temporary.

	* config/rs6000/rs6000.md (UNSPEC_SF_FROM_SI): New unspec.
	(UNSPEC_SI_FROM_SF): Likewise.
	(zero_extendsi<mode>2): Fix typo in xxextractuw where we extracted
	the word from byte 1 instead of byte 4.
	(and<mode>3): Change all logical operations to reject SF subregs,
	and require an explicit copy of the subreg to a temporary.
	(and<mode>3_imm): Likewise.
	(and<mode>3_imm_dot): Likewise.
	(and<mode>3_imm_dot2): Likewise.
	(and<mode>3_imm_mask_dot): Likewise.
	(and<mode>3_imm_mask_dot2): Likewise.
	(and<mode>3_imm_dot_shifted): Likewise.
	(and<mode>3_mask): Likewise.
	(and<mode>3_mask_dot2): Likewise.
	(and<mode>3_2insn): Likewise.
	(and<mode>3_2insn_dot): Likewise.
	(and<mode>3_2insn_dot2): Likewise.
	(<code><mode>3): Likewise.
	(iorxor splitter): Likewise.
	(bool<mode>3_imm): Likewise.
	(bool<mode>3): Likewise.
	(bool<mode>3_dot): Likewise.
	(boolc<mode>3): Likewise.
	(boolc<mode>3_dot): Likewise.
	(boolcc<mode>3): Likewise.
	(boolcc<mode>3_dot): Likewise.
	(boolcc<mode>3_dot2): Likewise.
	(eqv<mode>3): Likewise.
	(lfiwzx): Fix typo in xxextractuw where we extracted the word from
	byte 1 instead of byte 4.
	(movsi_from_sf): New insnss to be explicit when we are using
	SFmode in subregs, where the value might need to be converted from
	the format used in the floatint point and vector registers to the
	format used in GPRs and in memory.
	(movdi_from_sf_zero_ext): Likewise.
	(movsf_from_si): Likewise.

	* config/rs6000/vsx.md (SFmode define_peephole2):  Allow the
	logical operation to be an integer constant as well as a register.

2016-12-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/71977
	* config/rs6000/rs6000.md (sf_logical): New code iterator for
	optimizing logical operations on SFmode.
	* config/rs6000/vsx.md (SFBOOL_*): New constants for optimizing
	logical operations on SFmode.
	(SFmode define_peephole2): Recognize when we are moving a SFmode
	value from a vector register to a GPR, doing a simple logical
	operation on the result, and moving it back to a vector register
	and moving the logical operand to the vector registsrs, and do the
	boolean operation there.

2016-12-22   Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch subversion id 243891

