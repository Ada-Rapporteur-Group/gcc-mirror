==================== Work092, patch #12

Make float128 extract builtins overloaded.

2022-06-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def
	(__builtin_vsx_scalar_extract_expq_kf): Rename builtin to add _kf
	suffix.
	(__builtin_vsx_scalar_extract_sigq_kf): Likewise.
	(__builtin_vsx_scalar_extract_expq_tf): New builtin for IEEE
	128-bit long double.
	(__builtin_vsx_scalar_extract_sigq_kf): Likewise.
	* config/rs6000/rs6000-overload.def
	(__builtin_vec_scalar_extract): Add KF/TF overloads.
	(__builtin_vec_scalar_extract_sig): Likewise.

==================== Work092, patch #11

Remove support for renaming KF builtins to TF.

2022-06-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Do not
	convert various KFmode builtins to TFmode builtins if long double
	is IEEE 128-bit.

==================== Work092, patch #10

Make float128 test builtins overloaded.

2022-06-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtins.def
	(__builtin_vsx_scalar_test_data_class_qp_kf): Rename builtin to
	add _kf suffix.
	(__builtin_vsx_scalar_test_neg_qp_kf): Likewise.
	(__builtin_vsx_scalar_test_data_class_qp_tf): New builtin for IEEE
	128-bit long double.
	(__builtin_vsx_scalar_test_neg_qp_tf): Likewise.
	* config/rs6000/rs6000-overload.def
	(__builtin_vec_scalar_test_data_class): Add KF/TF overloads.
	(__builtin_vec_scalar_test_neg): Likewise.
	(__builtin_vec_scalar_test_neg_qp): Likewise.
	(__builtin_vec_scalar_test_data_class_qp): Likewise.

==================== Work092, patch #9

Add builtin ieeeld for long double is IEEE 128-bit.

2022-06-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Add
	check for ieeeld.
	* config/rs6000/rs6000-builtins.def (ieeeld): New attribute.
	(__builtin_addf128_round_to_odd_tf): Add ieeeld.
	(__builtin_divf128_round_to_odd_tf): Likewise.
	(__builtin_fmaf128_round_to_odd_tf): Likewise.
	(__builtin_mulf128_round_to_odd_tf): Likewise.
	(__builtin_sqrtf128_round_to_odd_tf): Likewise.
	(__builtin_subf128_round_to_odd_tf): Likewise.
	(__builtin_truncf128_round_to_odd_tf): Likewise.
	* config/rs6000/rs6000-gen-builtins.c (ieeeld): New attribute.
	(struct attrinfo): Add ieeeld.
	(parse_bif_attrs): Likewise.
	(write_decls): Likewise.
	(write_bif_static_init): Likewise.

==================== Work092, patch #8

Use overloading for ODD KF/TF functions.

2022-06-28   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_invalid_builtin): Add
	support for ieee128-hw-ld.
	(rs6000_builtin_is_supported): Likewise.
	(rs6000_init_builtins): Fix comment from previous change.  Add
	support of ieee128-hd-ld.
	(rs6000_expand_builtin): Add support for ieee128-hw-ld.
	* config/rs6000/rs6000-builtins.def (IEEE 128-bit odd builtins):
	Move the IEEE 128-bit odd builtins to being overloaded.
	* config/rs6000/rs6000-gen-builtins.cc (bif_stanza): Add
	stanza for IEEE 128-bit floating point where long double is IEEE
	128-bit.
	(stanza_map): Likewise.
	(enable_string): Likewise.
	(write_decls): Likewise.
	* config/rs6000/rs6000-overload.def (IEEE 128-bit odd builtins):
	Add the various IEEE 128-bit odd built-in functions for both
	KFmode and TFmode.

==================== Work092, patch #7

Only change IEEE 128-bit built-ins if passed IEEE 128-bit long double.

2022-06-27   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Restore
	code from original source, but do the conversion only if the
	argument is a long double that is IEEE 128-bit.

==================== Work092, patch #6

Allow __ibm128 on systems that support 128-bit long double.

2022-06-27   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (init_float128_ibm): Allow -msoft-float
	with __ibm128.
	(rs6000_scalar_mode_supported_p): Allow __ibm128 on systems that
	support 128-bit long double.
	* config/rs6000/rs6000.h (FLOAT128_IBM_P): Allow -msoft-float with
	__ibm128.
	* config/rs6000/rs6000.md (unpack<mode>_dm): Likewise.
	(unpack<mode>_nodm): Likewise.

==================== Work092, patch #5

Remove code that depends on __float128 or __ibm128 using the long double type.

2022-06-24   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Remove
	code that assumed __float128 and __ibm128 used the long double
	type if long double uses 128-bit IEEE or IBM encodings
	respectively.

==================== Work092, patch #4

Add __float128 to __ibm128 conversations.

In the past, GCC used the long double type for __ibm128 if long double
used the IBM 128-bit encoding.  Now that we always use a separate internal
type for __ibm128, it exposed that some conversions were missing.

2022-06-24   Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.md (extendkfif2): New insn.
	(trunckfif2): Likewise.

==================== Work092, patch #3

Fix IEEE 128-bit long double Complex multiply and divide tests.

2022-06-23   Michael Meissner  <meissner@linux.ibm.com>

gcc/testsuite/

	* gcc.target/powerpc/mulkd3-2.c: Update test.
	* gcc.target/powerpc/divkd3-2.c: Likewise.

==================== Work092, patch #2

Iterate on getting long double complex multiply and divide working.

2022-06-23   Michael Meissner  <meissner@linux.ibm.com>

gcc/
	* config/rs6000/rs6000-builtin.cc (rs6000_type_string): The type
	for __float128 is __float128, not __ieee128.
	* config/rs6000/rs6000.cc (create_complex_muldiv): Add function
	back in.
	(rs6000_init_libfuncs): Move the IEEE 128-bit complex long double
	multiply and divide support here.  Use the names __multc3_ieee128
	and __divtc3_ieee128.

libgcc/
	* config/rs6000/float128-ifunc.c (__multc3_ieee128): Add
	ifunc support.
	(__divtc3_ieee128): Likewise.
	* config/rs6000/quad-float128.h (__multc3_ieee128): Add
	Declaration.
	(__divtc3_ieee128): Likewise.

==================== Work092, patch #1

__float128 and __ibm128 always gets different internal types.

2022-06-22   Michael Meissner  <meissner@linux.ibm.com>

gcc/
	* config/rs6000/rs6000-builtin.cc (rs6000_init_builtins): Always
	create a new tree node for __ibm128, even if long double uses the
	IBM 128-bit format.  Always create a new tree node for __float128,
	even if long double uses the IEEE 128-bit format.  Change the
	keyword create for IEEE 128-bit to be '__float128', not
	'__ieee128'.
	* config/rs6000/rs6000-c.cc (rs6000_target_modify_macros): Define
	__ieee128 compatibility macro.
	* config/rs6000/rs600.cc (reg_offset_addressing_ok_p): Allow
	IFmode to use offset addresses.
	(create_complex_muldiv): Delete.
	(init_float128_ieee): Do not create __mulkc3 and __divkc3 since
	__float128 always creates these functions.
	(rs6000_libgcc_floating_mode_supported_p): Always allow KFmode.
	(rs6000_floatn_mode): Always return KFmode for IEEE 128-bit.  Do
	not return TFmode, even if long double uses the IEEE 128-bit
	format.
	(rs6000_c_mode_for_suffix): The 'q' suffix always uses KFmode,
	even if long double uses the IEEE 128-bit encoding.

==================== Branch creation

2022-06-22   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch

