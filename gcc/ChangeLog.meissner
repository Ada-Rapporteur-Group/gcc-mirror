2018-03-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/predicates.md (large_mem_operand): New predicate
	to recognize large addresses.
	* config/rs6000/rs6000-protos.h (move_valid_p): Add declaration.
	(large_address_valid): Likewise.
	(split_large_address): Likewise.
	* config/rs6000/rs6000.opt (-mlarge-address): New switch.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Add boolean to
	say large addresses are supported.
	(rs6000_debug_print_mode): Print if a mode supports large
	addresses.
	(rs6000_init_hard_regno_mode_ok): Mark that DImode supports large
	addresses.
	(move_valid_p): Return if normal move insns are valid.
	(int_is_32bit): Return true if an integer constant is 32-bits.
	(split_large_integer): Split 32-bit constants into two parts that
	can be set with ADDIS and ADDI.
	(rs6000_opt_masks): Add -mlarge-address.
	(large_address_valid): New function, return if large addresses are
	valid.
	(split_large_address): New function, split a large address into
	smaller pieces.
	* config/rs6000/rs6000.md (movdi_internal32): Call move_valid_p to
	validate the move.
	(movdi_internal64): Likewise.

2018-03-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md: Delete changes, other than the
	changes in ext-addr.
	* config/rs6000/predicates.md: Likewise.
	* config/rs6000/rs6000-protos.h: Likewise.
	* config/rs6000/rs6000.c: Likewise.
	* config/rs6000/rs6000.md: Likewise.
	* config/rs6000/rs6000.opt: Likewise.

2018-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wN): New constraint not to allow
	large memory addresses.
	* config/rs6000/predicates.md (memory_operand_not_large): New
	predicate not to allow large memory addresses.
	(reg_or_mem_operand): Call it.
	(fusion_offsettable_mem_operand): Likewise.
	(large_mem_operand): Change large_address_operand to
	large_address_operand.
	* config/rs6000/rs6000-protos.h (large_address_valid): Likewise.
	(rs6000_init_hard_regno_mode_ok): Add SF/DF support to large
	addresses.
	(move_valid_p): Change large_address_operand to
	large_address_operand.
	(rs6000_legitimate_address_p): Likewise.
	(large_address_valid): Likewise.
	(mem_operand_gpr): Don't allow large addresses.
	(mem_operand_ds_form): Likewise.
	(print_operand): Print %m<n> value as negative if needed.
	* config/rs6000/rs6000.md (LARGE*): Add mode iterators and mode
	attributes to support large addresses.
	(large address splitters): Move large address support before the
	moves.  Add SF/DF to large address support.
	(large_mov<mode>_load): New patterns to do large address loads.
	(large_mov<mode>_store): New patterns to do large address stores.
	(ptrm mode attribute): Change m constraint to wN.
	(zero_extendsi<mode>2): Likewise.
	(extendsfdf2_fpr): Likewise.
	(floatdidf2_mem): Likewise.
	(floatunsdidf2_mem): Likewise.
	(floatdisf2_mem): Likewise.
	(floatunsdisf2_mem): Likewise.
	(movsi_internal1): Likewise.
	(movsi_internal1_single): Likewise.
	(movsi_from_sf): Likewise.
	(movdi_from_sf_zero_ext): Likewise.
	(movsi_from_df): Likewise.
	(mov<mode>_internal, QHI iterator): Likewise.
	(movcc_internal1): Likewise.
	(movsf_hardfloat): Likewise.
	(movsd_hardfloat): Likewise.
	(mov<mode>_softfloat): Likewise.
	(movsf_from_si): Likewise.
	(mov<mode>_hardfloat32, FMOVE64 iterator): Likewise.
	(mov<mode>_hardfloat64, FMOVE64 iterator): Likewise.
	(mov<mode>_64bit_dm): Likewise.
	(movtd_64bit_nodm): Likewise.
	(mov<mode>_32bit): Likewise.
	(extenddf<mode>2_fprs): Likewise.
	(movdi_internal32): Likewise.
	(movdi_internal64): Likewise.
	(stack_protect_testsi): Likewise.
	(<bd>_<mode>): Likewise.
	(<bd>tf_<mode>): Likewise.
	(unpack<mode>_dm): Likewise.
	(bswap<mode>2_extenddi): Call memory_operand_not_large instead of
	memory_operand.
	(bswaphi2_extendsi): Likewise.
	(bswap<mode>2_load): Likewise.
	(bswap<mode>2_store): Likewise.
	(bswapdi2_load): Likewise.
	(bswapdi2_store): Likewise.
	(ashdi3_extswsli_dot): Likewise.
	(ashdi3_extswsli_dot2): Likewise.
	(signbit<mode>2_dm_mem): Likewise.
	(fix<uns>_trunc<SFDF:mode><QHSI:mode>2_mem): Likewise.
	(floatdidf2_mem): Likewise.
	(UNSPEC_MOVSI_GOT splitter): Likewise.
	(save_stack_nonlocal): Likewise.
	(restore_stack_nonlocal): Likewise.
	(call_indirect_aix<mode>): Likewise.
	(call_indirect_aix<mode>_nospec): Likewise.
	(call_value_indirect_aix<mode>): Likewise.
	(call_value_indirect_aix<mode>_nospec): Likewise.
	(probe_stack_<mode>): Likewise.
	(stack_protect_set): Likewise.
	(stack_protect_setsi): Likewise.
	(stack_protect_setdi): Likewise.
	(stack_protect_test): Likewise.
	(stack_protect_testsi): Likewise.
	(stack_protect_testdi): Likewise.
	(crsave): Likewise.
	(stmw_operation): Likewise.
	(any_parallel_operand): Likewise.
	(save_gpregs_<mode>_r12): Likewise.
	(save_gpregs_<mode>_r1): Likewise.
	(save_fpregs_<mode>_r11): Likewise.
	(save_fpregs_<mode>_r12): Likewise.
	(save_fpregs_<mode>_r1): Likewise.
	(lmw): Likewise.
	(restore_gpregs_<mode>_r11): Likewise.
	(restore_gpregs_<mode>_r12): Likewise.
	(restore_gpregs_<mode>_r1): Likewise.
	(return_and_restore_gpregs_<mode>_r11): Likewise.
	(return_and_restore_gpregs_<mode>_r12): Likewise.
	(return_and_restore_gpregs_<mode>_r1): Likewise.
	(return_and_restore_fpregs_<mode>_r11): Likewise.
	(return_and_restore_fpregs_<mode>_r12): Likewise.
	(return_and_restore_fpregs_<mode>_r1): Likewise.
	(return_and_restore_fpregs_aix_<mode>_r11): Likewise.
	(return_and_restore_fpregs_aix_<mode>_r1): Likewise.
	(fix<uns>_trunc<IEEE128:mode><QHSI:mode>2_mem): Likewise.

2018-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wC): New constraint for large
	addresses.
	* config/rs6000/predicates.md (large_mem_operand): New predicate
	for large addresses.
	* config/rs6000/rs6000.opt (-mlarge-address): New switch to enable
	for large addresses.
	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Add large
	address flag.
	(int_is_32bit): New helper function to say whether an integer is
	32-bits.
	(split_large_integer): New function, split a 32-bit integer into
	ADDIS and ADDI/memory parts.
	(rs6000_debug_print_mode): Print if the mode accepts large
	addresses.
	(rs6000_init_hard_regno_mode_ok): Mark that DImode supports large
	addresses.
	(move_valid_p): New function to validate move insns.  Don't allow
	naked large addresses after register allocation.
	(rs6000_legitimate_address_p): Allow large addresses.
	(print_operand): Use %M<n> and %m<n> for printing large
	addresses.
	(rs6000_opt_masks): Add -mlarge-address.
	(large_addr_operand): Return true if the operand is a large
	address.
	* config/rs6000/rs6000.md (UNSPEC_LARGE_ADDRESS): New unspec.
	(movdi_internal32): Use move_valid_p.
	(movdi_internal64): Likewise.
	(movdi splitters): Add initial support for large addresses.
	(large_movdi_load): New insn for large address load.
	(large_movdi_store): New insn for large address store.

2018-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (struct rs6000_reg_addr): Eliminate
	unused insn code fields that were originally meant for adding
	fusion operations.
	(rs6000_debug_print_mode): Likewise.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	* config/rs6000/rs6000.md (fusion_gpr_load_<mode>): Turn off insn
	geneator for the fusion functions that are not referenced by name.
	(fusion_gpr_<P:mode>_<GPR_FUSION:mode>_store): Likewise.
	(fusion_gpr_<P:mode>_<GPR_FUSION:mode>_load): Likewise.
	(fusion_vsx_<P:mode>_<FPR_FUSION:mode>_load): Likewise.
	(fusion_vsx_<P:mode>_<FPR_FUSION:mode>_store): Likewise.

<ext-addr.rev2-patch11b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (addr_mask_type): Grow mask to 16 bits.
	(RELOAD_REG_DS_OFFSET): New mask for DS-form addresses.
	(mode_supports_ds_form): New helper function to return if a reload
	register class uses DS-form addresses.
	(rs6000_debug_addr_mask): Print if we have DS-form addresses.
	(rs6000_setup_reg_addr_masks): Note which reload register classes
	use DS-form addresses.

<ext-addr.rev2-patch10b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Move
	toc fusion support after the Linux port has set the default code
	model.  Do not enable it by default.  If either -mtoc-fusion or
	-mpower8-fusion-sign is used with -mno-power8-fusion, clear the
	toc fusion/sign bits.

<ext-addr.rev2-patch09b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_softfloat, FMOVE32):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch08b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_softfloat64, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch07b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_hardfloat64, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch06b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_softfloat32, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch05b>
2018-03-22  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (mov<mode>_hardfloat32, FMOVE64):
	Reformat alternatives and attributes so it is easier to identify
	which constraints/attributes go with which instruction.

<ext-addr.rev2-patch04b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_pre_incdec_p): Add
	additional argument to specify the reload register class to use,
	defaulting to RELOAD_REG_ANY.
	(mode_supports_pre_modify_p): Likewise.
	(mode_supports_dq_form): Likewise.

<ext-addr.rev2-patch03b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_d_form): Rename
	mode_supports_vmx_dform to mode_supports_d_form.  Add an optional
	argument to say which reload register class to use.  Change all
	callers to pass in the RELOAD_REG_VMX class explicitly.
	(rs6000_secondary_reload): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_secondary_reload_class): Likewise.

<ext-addr.rev2-patch02b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_vmx_dform): Move these
	functions to be next to the other mode_supports functions.
	(mode_supports_dq_form): Likewise.

<ext-addr.rev2-patch01b>
2018-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (mode_supports_dq_form): Rename
	mode_supports_vsx_dform_quad to mode_supports_dq_form.
	(mode_supports_vsx_dform_quad): Likewise.
	(quad_address_p): Likewise.
	(reg_offset_addressing_ok_p): Likewise.
	(offsettable_ok_by_alignment): Likewise.
	(rs6000_legitimate_offset_address_p): Likewise.
	(legitimate_lo_sum_address_p): Likewise.
	(rs6000_legitimize_address): Likewise.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_secondary_reload_inner): Likewise.
	(rs6000_preferred_reload_class): Likewise.
	(rs6000_output_move_128bit): Likewise.

2018-03-22   Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch subversion id 258717

