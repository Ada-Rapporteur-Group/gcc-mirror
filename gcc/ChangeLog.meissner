==================== Branch work174, patch #9 ====================

Add a2 processor to arch flags.

2024-07-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-arch.def: Add a2 processor.

==================== Branch work174, patch #8 ====================

Remove arch flags power4 and power5.  Use const HOST_WIDE_INT for arch masks.

2024-07-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-arch.def: Remove power4 and power5 architecture
	masks.
	* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Use arch flags
	for power6.
	* config/rs6000/rs6000-opts.h (ARCH_MASK_*): Encode the masks as const
	HOST_WIDE_INT and not as an enumeratio.
	* config/rs6000/rs6000.cc (get_arch_flags): Drop power4 and power5 arch
	flags support.
	(rs6000_machine_from_flags): Likewise.

==================== Branch work174, patch #7 was reverted ====================

==================== Branch work174, patch #6 ====================

Update tests to work with architecture flags changes.

Two tests used -mvsx to raise the processor level to at least power7.  These
tests were rewritten to add cpu=power7 support.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/testsuite/

	* gcc.target/powerpc/ppc-target-4.c: Rewrite the test to add cpu=power7
	when we need to add VSX support.  Add test for adding cpu=power7 no-vsx
	to generate only Altivec instructions.
	* gcc.target/powerpc/pr115688.c: Add cpu=power7 when requesting VSX
	instructions.

==================== Branch work174, patch #5 ====================

Do not allow -mvsx to boost processor to power7.

This patch restructures the code so that -mvsx for example will not silently
convert the processor to power7.  The user must now use -mcpu=power7 or higher.
This means if the user does -mvsx and the default processor does not have VSX
support, it will be an error.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (report_architecture_mismatch): New function.
	Report an error if the user used an option such as -mvsx when the
	default processor would not allow the option.
	(rs6000_option_override_internal): Move some ISA checking code into
	report_architecture_mismatch.

==================== Branch work174, patch #4 ====================

Use architecture flags for defining _ARCH_PWR macros.

For the newer architectures, this patch changes GCC to define the _ARCH_PWR<n>
macros using the new architecture flags instead of relying on isa options like
-mpower10.

The -mpower8-internal, -mpower10, and -mpower11 options were removed.  The
-mpower11 option was removed completely, since it was just added in GCC 15.  The
other two options were marked as WarnRemoved, and the various ISA bits were
removed.

TARGET_POWER8 and TARGET_POWER10 were re-defined to use the architeture bits
instead of the ISA bits.

There are other internal isa bits that aren't removed with this patch because
the built-in function support uses those bits.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-c.cc (rs6000_target_modify_macros) Add support to
	use architecture flags instead of ISA flags for setting most of the
	_ARCH_PWR* macros.
	(rs6000_cpu_cpp_builtins): Likewise.
	* config/rs6000/rs6000-cpus.def (ISA_2_7_MASKS_SERVER): Remove
	OPTION_MASK_POWER8.
	(ISA_3_1_MASKS_SERVER): Remove OPTION_MASK_POWER10.
	(POWER11_MASKS_SERVER): Remove OPTION_MASK_POWER11.
	(POWERPC_MASKS): Remove OPTION_MASK_POWER8, OPTION_MASK_POWER10, and
	OPTION_MASK_POWER11.
	* config/rs6000/rs6000-protos.h (rs6000_target_modify_macros): Update
	declaration.
	(rs6000_target_modify_macros_ptr): Likewise.
	* config/rs6000/rs6000.cc (rs6000_target_modify_macros_ptr): Likewise.
	(rs6000_option_override_internal): Use architecture flags instead of ISA
	flags.
	(rs6000_opt_masks): Remove -mpower10 and -mpower11 support.
	(rs6000_pragma_target_parse): Use architecture flags as well as ISA
	flags.
	* config/rs6000/rs6000.h (TARGET_POWER8): New macro.
	(TARGET_POWER10): Likewise.
	* config/rs6000/rs6000.opt (-mpower8-internal): No longer make this an
	ISA flag.
	(-mpower10): Likewise.
	(-mpower11): Likewise.

==================== Branch work174, patch #3 ====================

Set .machine from the architecture flags

This patch switches the handling of .machine to use architecture masks if they
exist (power4 through power11).  All of the other PowerPCs will continue to use
the existing code for setting the .machine option.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000 (rs6000_machine_from_flags): Set .machine from
	the architecture flags.

==================== Branch work174, patch #2 ====================

Make clone_targets use architecture flags.

This patch expands on the previous patch and changes the target_clones support
to use an architecture mask instead of isa bits.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000.cc (struct clone_map): Switch to use architecture
	flags instead of ISA flags for target_clone support.
	(rs6000_clone_map): Likewise.
	(rs6000_clone_priority): Likewise.

==================== Branch work174, patch #1 ====================

Add rs6000 architecture masks.

This patch begins the journey to move architecture bits that are not user ISA
options from rs6000_isa_flags to a new targt variable rs6000_arch_flags.  The
intention is to remove switches that are currently isa options, but the user
should not be using this particular option. For example, we want users to use
-mcpu=power10 and not just -mpower10.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* config/rs6000/rs6000-arch.def: New file.
	* config/rs6000/rs6000-opts.h: Use rs6000-arch.def to create the
	architecture masks needed.
	* config/rs6000/rs6000.cc (rs6000_print_isa_options): Add an
	architecture flags argument, change all callers.
	(get_arch_flag): New function.
	(rs6000_debug_reg_global): Update rs6000_print_isa_options calls.
	(rs6000_option_override_internal): Likewise.
	(struct rs6000_arch_mask): New structure.
	(rs6000_arch_masks): New table of architecutre masks and names.
	(rs6000_function_specific_save): Save architecture flags.
	(rs6000_function_specific_restore): Restore architecture flags.
	(rs6000_function_specific_print): Update rs6000_print_isa_options calls.
	(rs6000_print_options_internal): Add architecture flags options.
	(rs6000_can_inline_p): Don't allow inling if the callee requires a newer
	architecture than the caller.
	* config/rs6000/rs6000.opt (rs6000_arch_flags): New target variable.
	(x_rs6000_arch_flags): New save/restore field for rs6000_arch_flags.

==================== Branch work174, baseline ====================

2024-07-29   Michael Meissner  <meissner@linux.ibm.com>
Add ChangeLog.meissner and REVISION.

2024-07-29  Michael Meissner  <meissner@linux.ibm.com>

gcc/

	* REVISION: New file for branch.
	* ChangeLog.meissner: New file.

gcc/c-family/

	* ChangeLog.meissner: New file.

gcc/c/

	* ChangeLog.meissner: New file.

gcc/cp/

	* ChangeLog.meissner: New file.

gcc/fortran/

	* ChangeLog.meissner: New file.

gcc/testsuite/

	* ChangeLog.meissner: New file.

libgcc/

	* ChangeLog.meissner: New file.

	Clone branch
