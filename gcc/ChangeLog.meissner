2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000-string.c (expand_block_move): Use vector
	pair instructions if they are available for block moves.  If
	prefixed addresses are supported, use standard vector offsettable
	loads/stores.

2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/mma.md: New file for vector quad support.
	* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define
	__VECTOR_PAIR__ and __VECTOR_QUAD__ if the vector pair and vector
	quad support is enabled.
	* config/rs6000/rs6000-call.c (rs6000_init_builtins): Initialize
	the __vector_pair and __vector_quad keywords for C.
	* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Add
	-mvector-256bit.
	(OTHER_FUTURE_MASKS): Add -mvector-256bit.
	(POWERPC_MASKS): Add -mvector-256bit.
	* config/rs6000/rs6000-modes.def (int vector pair modes): Update
	comments.
	(floating point vector pair modes): Add modes.
	(int vector quad modes): Add modes.
	(OImode): Add 256-bit integer mode.
	(XImode): Add 512-bit integer mode.
	* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok_uncached): Add
	support for vector pair and vector quad modes.
	(rs6000_debug_reg_global): Print information about V4TImode,
	OImode, and XImode if -mdebug=reg.  Print the endian configuration
	macros.  Print the block move and compare configuration
	variables.
	(rs6000_setup_reg_addr_masks): Setup vector pair and vector quad
	modes.
	(rs6000_init_hard_regno_mode_ok): Setup vector pair and vector
	quad modes.  Add reload handlers for vector pair and vector quad
	modes.
	(rs6000_option_override_internal): Bump up block move limit if we
	support loading and storing vector pairs.
	(quad_address_p): Add support for vector pair and vector quad modes.
	(reg_offset_addressing_ok_p): Add support for vector pair and
	vector quad modes.
	(avoiding_indexed_address_p): Add support for vector pairs.
	(rs6000_emit_move): Assert that vector pair and vector constant
	modes don't allow moves of a constant.
	(rs6000_preferred_reload_class): Vector pairs are limited to VSX
	register, and vector quads are limited to FPR registers.
	(rs6000_split_multireg_move): Add support for vector pair and
	vector quad modes.
	(rs6000_opt_masks): Add -mvector-256bit.
	* config/rs6000/rs6000.h (ALTIVEC_OR_VSX_VECTOR_MODE): Add support
	for vector pair and vector quad modes.
	(enum rs6000_builtin_type_index): Add support for vector pair and
	vector quad modes.
	(vector_pair_type_node): New global type for vector pair mode.
	(vector_quad_type_node): New global type for vector quad mode.
	(VECTOR_PAIR_MODE_P): New macro to check if this is a vector
	pair.
	(VECTOR_QUAD_MODE_P): New macro to check if this is a vector
	quad.
	* config/rs6000/rs6000.md: Include mma.md.
	(RELOAD iterator): Add V2TImode and V4TImode.
	* config/rs6000/rs6000.opt (-mvector-256bit): New switch.
	* config/rs6000/vsx.md (OImode): Dummy OImode move.
	(movv2ti): New generator for V2TImode.
	(movv2ti_vector_pair): New move insn for -mvector-256bit.
	(movv2ti_no_vector_pair): New move insn for -mno-vector-256bit.

2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/linux64.h (TARGET_PREFIXED_ADDR_DEFAULT): Enable
	prefixed addressing by default.
	(TARGET_PCREL_DEFAULT): Enable pc-relative addressing by default.
	* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Only
	enable -mprefixed-addr and -mpcrel if the OS tm.h says to enable
	it.
	(ADDRESSING_FUTURE_MASKS): New mask macro.
	(OTHER_FUTURE_MASKS): Use ADDRESSING_FUTURE_MASKS.
	* config/rs6000/rs6000.c (TARGET_PREFIXED_ADDR_DEFAULT): Do not
	enable -mprefixed-addr unless the OS tm.h says to.
	(TARGET_PCREL_DEFAULT): Do not enable -mpcrel unless the OS tm.h
	says to.
	(rs6000_option_override_internal): Do not enable -mprefixed-addr
	or -mpcrel unless the OS tm.h says to enable it.  Add more checks
	for -mcpu=future.

2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/predicates.md (add_operand): Add support for
	PADDI.
	* config/rs6000/rs6000.md (add<mode>3): Add support for PADDI.

2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.md (movsi_internal1): Add support to load
	up 32-bit SImode integer constants with PADDI.
	(movsi integer constant splitter): Do not split constant if PADDI
	can load it up directly.

2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/rs6000.c (num_insns_constant_gpr): Add support for
	PADDI to load up and/or add 34-bit integer constants.
	(rs6000_rtx_costs): Treat constants loaded up with PADDI with the
	same cost as normal 16-bit constants.
	* config/rs6000/rs6000.md (movdi_internal64): Add support to load
	up 34-bit integer constants with PADDI.
	(movdi integer constant splitter): Add comment about PADDI.

2019-09-30  Michael Meissner  <meissner@linux.ibm.com>

	* config/rs6000/constraints.md (em constraint): New constraint for
	non PC-relative memory.
	(eM constraint): New constraint for non-prefixed memory.
	* config/rs6000/predicates.md (lwa_operand): Allow odd offsets if
	we have prefixed addressing.
	(non_prefixed_memory): New predicate.
	(non_pcrel_memory): New predicate.
	(reg_or_non_pcrel_memory): New predicate.
	* config/rs6000/rs6000-protos.h (make_memory_non_prefixed): New
	declaration.
	* config/rs6000/rs6000.c (rs6000_adjust_vec_address): Optimize
	PC-relative addresses with constant offsets.  Signal an error if
	we have a PC-relative address and a variable offset.  Use the
	SIGNED_16BIT_OFFSET_P macro.
	(rs6000_split_vec_extract_var): Signal an error if we have a
	PC-relative address and a variable offset.
	(quad_address_p): Add support for prefixed addresses.
	(mem_operand_gpr): Add support for prefixed addresses.
	(mem_operand_ds_form): Add support for prefixed addresses.
	(rs6000_legitimate_offset_address_p): Add support for prefixed
	addresses.
	(rs6000_legitimate_address_p): Add support for prefixed
	addresses.
	(rs6000_mode_dependent_address): Add support for prefixed
	addresses.
	(rs6000_num_insns): New helper function.
	(rs6000_insn_cost): Treat prefixed instructions as having the same
	cost as non prefixed instructions, even though the prefixed
	instructions are larger.
	(make_memory_non_prefixed): New function to make a non-prefixed
	memory operand.
	* config/rs6000/rs6000.md (mov<mode>_64bit_dm): Add support for
	prefixed addresses.
	(movtd_64bit_nodm): Add support for prefixed addresses.
	(mov<mode>_ppc64): Add support for prefixed addresses.
	(stack_protect_setdi): Convert prefixed addresses to non-prefixed
	addresses.  Allow for indexed addressing as well as offsettable.
	(stack_protect_testdi): Convert prefixed addresses to non-prefixed
	addresses.  Allow for indexed addressing as well as offsettable.
	* config/rs6000/vsx.md (vsx_mov<mode>_64bit): Add support for
	prefixed addresses.
	(vsx_extract_<mode>_var, VSX_D iterator): Do not allow a vector in
	memory with a prefixed address to combine with variable offsets.
	(vsx_extract_v4sf_var): Do not allow a vector in memory with a
	prefixed address to combine with variable offsets.
	(vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Do not allow a
	vector in memory with a prefixed address to combine with variable
	offsets.
	(vsx_extract_<mode>_<VS_scalar>mode_var): Do not allow a vector in
	memory with a prefixed address to combine with variable offsets.
	* doc/md.texi (PowerPC constraints): Document the 'em' and 'eM'
	constraints.

2019-09-30   Michael Meissner  <meissner@linux.ibm.com>

	Clone branch subversion id 276344

