[+ AutoGen5 template -*- Mode: Makefile -*-
mk
+][+COMMENT use 'autogen --trace=everything melt-newbuild.def' to debug this
  See http://www.gnu.org/software/autogen/
+]
[+ (. (dne "#@#@# " "#@! ")) +]
##@@ melt-newbuild.mk is generated from melt-newbuild.tpl by 'autogen melt-newbuild.def'
#
# Self-contained Gnu makefile for MELT modules and MELT translator bootstrap.
#   Copyright (C) 2012  Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#@ [+ (. (tpl-file-line))+] generated by Autogen [+ (. autogen-version)+] using [+ (.(def-file))+]
## See http://stackoverflow.com/q/8727896/841108
## and http://lists.gnu.org/archive/html/help-make/2012-01/msg00017.html
## and http://gcc.gnu.org/ml/gcc/2012-01/msg00089.html
## and Ian Taylor's explanation http://gcc.gnu.org/ml/gcc/2012-01/msg00090.html
## Using remake http://bashdb.sourceforge.net/remake/ may help debugging this.



## LN_S might not be defined, e.g. in MELT-Plugin-Makefile [+ (. (tpl-file-line))+]
LN_S ?= ln -sv

## GAWK is needed, the GNU awk [+ (. (tpl-file-line))+]
GAWK ?= gawk

## the md5sum utility is needed  [+ (. (tpl-file-line))+]
MD5SUM ?= md5sum

include melt-build-param.mk

GCCMELT_ZERO_FLAVOR=$(patsubst melt-stage0-%,%,$(GCCMELT_STAGE_ZERO))

melt_move_if_change?= $(SHELL) $(GCCMELT_MOVE_IF_CHANGE)

## settings  [+ (. (tpl-file-line))+] for descriptor *+meltdesc.c
GCCMELT_DESCRIPTOR_FLAGS?= -Os
GCCMELT_DESCRIPTOR_PREPROFLAGS?= -DMELTGCC_MODULE_DESCRIPTOR
## settings  [+ (. (tpl-file-line))+] for dynamic 
GCCMELT_DYNAMIC_FLAGS?= -O0
GCCMELT_DYNAMIC_PREPROFLAGS?= -DMELTGCC_MODULE_DYNAMIC  -DMELTGCC_NOLINENUMBERING -DMELT_HAVE_DEBUG=1  -DMELTGCC_DYNAMIC_OBJSTRUCT
## settings  [+ (. (tpl-file-line))+] for quicklybuilt 
GCCMELT_QUICKLYBUILT_FLAGS?= -O0 -Wall
GCCMELT_QUICKLYBUILT_PREPROFLAGS= -DMELTGCC_MODULE_QUICKLYBUILT -DMELT_HAVE_DEBUG=1
## settings  [+ (. (tpl-file-line))+] for optimized 
GCCMELT_OPTIMIZED_FLAGS?= -O1
GCCMELT_OPTIMIZED_PREPROFLAGS?= -DMELTGCC_MODULE_OPTIMIZED -DMELT_HAVE_DEBUG=0
## settings  [+ (. (tpl-file-line))+] for debugnoline 
GCCMELT_DEBUGNOLINE_FLAGS?= -g
GCCMELT_DEBUGNOLINE_PREPROFLAGS?= -DMELTGCC_MODULE_DEBUGNOLINE  -DMELTGCC_NOLINENUMBERING -DMELT_HAVE_DEBUG=1


## xflavors  [+ (. (tpl-file-line))+]
[+FOR xflavor IN "descriptor" "dynamic" "quicklybuilt" "optimized" "debugnoline"+]

##xflavor [+xflavor+] [+ (. (tpl-file-line))+]
GCCMELT_COMPILER_[+(. (string-upcase (get "xflavor")))+]_FLAGS= $(GCCMELT_[+(. (string-upcase (get "xflavor")))+]_FLAGS) $(GCCMELT_[+(. (string-upcase (get "xflavor")))+]_PREPROFLAGS)
GCCMELT_LINKER_[+(. (string-upcase (get "xflavor")))+]_FLAGS= $(GCCMELT_[+(. (string-upcase (get "xflavor")))+]_FLAGS)

##compilation rule [+xflavor+] [+ (. (tpl-file-line))+]
melt-workdir/%.[+xflavor+].meltpic.o:
	@echo  @+@melt-newbuild-compile   at= $@ left= $< circ= $^  [+ (. (tpl-file-line))+]
	if [ -L "$^" ]; then \
	   melt_realcircpath_[+xflavor+]=`readlink "$^"` ; echo  @+@melt-newbuild-compilesym  melt_realcircpath_[+xflavor+]= $$melt_realcircpath_[+xflavor+] circ= $^; \
	fi
	$(GCCMELT_COMPILER) $(GCCMELT_COMPILER_FLAGS) $(GCCMELT_COMPILER_[+(. (string-upcase (get "xflavor")))+]_FLAGS) $(GCCMELT_PIC_FLAGS) -o $@ -c $<

#linking rule  [+xflavor+] [+ (. (tpl-file-line))+]
melt-workdir/%.[+xflavor+].meltmod.so:
	@echo  @+@melt-newbuild-link   at= $@ left= $< circ= $^  [+ (. (tpl-file-line))+]
	$(GCCMELT_LINKER) $(GCCMELT_LINKER_FLAGS) $(GCCMELT_LINKER_[+(. (string-upcase (get "xflavor")))+]_FLAGS) $(GCCMELT_SHARED_FLAGS) -o $@ $^

#end rules  [+xflavor+] [+ (. (tpl-file-line))+]

[+ENDFOR xflavor+]
## endxflavors  [+ (. (tpl-file-line))+]

##############################################  [+ (. (tpl-file-line))+]
## The base name of the MELT translator files [+ (. (tpl-file-line))+]
MELT_TRANSLATOR_BASE= \
  [+FOR melt_translator_file " \\\n"+]  [+base+][+ENDFOR melt_translator_file+]

## the MELT translator MELT source files [+ (. (tpl-file-line))+]
MELT_TRANSLATOR_SOURCE= $(patsubst %,$(GCCMELT_MELTSOURCEDIR)/%.melt,$(MELT_TRANSLATOR_BASE))

## The base name of the MELT application files [+ (. (tpl-file-line))+]
MELT_APPLICATION_BASE= \
  [+FOR melt_application_file " \\\n"+]  [+base+][+ENDFOR melt_application_file+]

## The MELT application source files [+ (. (tpl-file-line))+]
MELT_APPLICATION_SOURCE= $(patsubst %,$(GCCMELT_MELTSOURCEDIR)/%.melt,$(MELT_APPLICATION_BASE))

## The cold stage 0 of the translator [+ (. (tpl-file-line))+]
[+FOR melt_translator_file +]
#@ The C files of the stage 0 are deposited [+ (. (tpl-file-line))+]
MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES= \
                  $(realpath $(GCCMELT_MELTSOURCEDIR))/generated/[+base+].c \
                  $(sort $(wildcard $(realpath $(GCCMELT_MELTSOURCEDIR))/generated/[+base+]+[0-9]*.c))

# The base names of stage 0 files [+ (. (tpl-file-line))+]
MELT_ZERO_GENERATED_[+mkvarsuf+]_BASENAME= \
                  $(basename $(notdir $(MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES)))
# for stage 0 files, we don't compute the checksum, we extract what was deposited [+ (. (tpl-file-line))+]
## avoid spaces in MELT_GENERATED_[+mkvarsuf+]_CUMULMD5 below [+ (. (tpl-file-line))+]
MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5:=$(shell $(GAWK) -F\" '/extern/{next} /melt_cumulated_hexmd5/{print $$2}' $(GCCMELT_MELTSOURCEDIR)/generated/[+base+]+meltdesc.c)
[+ENDFOR melt_translator_file+]

## An empty file is needed for every MELT translation [+ (. (tpl-file-line))+]
empty-file-for-melt.c:
	date +"/* empty-file-for-melt.c %c */" > $@-tmp
	mv $@-tmp $@

## the various arguments to MELT - avoid spaces in them! [+ (. (tpl-file-line))+]
meltarg_mode=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-mode,-fmelt-mode)
meltarg_init=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-init,-fmelt-init)
meltarg_module_path=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-module-path,-fmelt-module-path)
meltarg_source_path=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-source-path,-fmelt-source-path)
meltarg_tempdir=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-tempdir,-fmelt-tempdir)
meltarg_workdir=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-workdir,-fmelt-workdir)
meltarg_arg=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-arg,-fmelt-arg)
meltarg_bootstrapping=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-bootstrapping,-fmelt-bootstrapping)
meltarg_genworklink=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-generate-work-link,-fmelt-generate-work-link)
meltarg_makefile=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-module-makefile,-fmelt-module-makefile)
meltarg_makecmd=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-module-make-command,-fmelt-module-make-command)
meltarg_arglist=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-arglist,-fmelt-arglist)
meltarg_output=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-output,-fmelt-output)
meltarg_modulecflags=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-module-cflags,-fmelt-module-cflags)
meltarg_inhibitautobuild=$(if $(GCCMELT_IS_PLUGIN),-fplugin-arg-melt-inhibit-auto-build,-fmelt-inhibit-auto-build)


#@ [+ (. (tpl-file-line))+]
## MELT_DEBUG could be set to -fmelt-debug or -fplugin-arg-melt-debug
## the invocation to translate the very first initial MELT file [+ (. (tpl-file-line))+]
MELTCCINIT1ARGS= $(melt_make_cc1flags) -Wno-shadow $(meltarg_mode)=translateinit  \
	      $(meltarg_makefile)=$(GCCMELT_MODULE_MK) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(meltarg_bootstrapping) $(MELT_DEBUG)

#@ [+ (. (tpl-file-line))+]
## the invocation to translate the other files [+ (. (tpl-file-line))+]
MELTCCFILE1ARGS=  $(melt_make_cc1flags) -Wno-shadow $(meltarg_mode)=translatefile  \
	      $(meltarg_makefile)=$(GCCMELT_MODULE_MK) \
	      $(meltarg_makecmd)=$(MAKE) \
              "$(meltarg_modulecflags)='$(melt_cflags)'" \
	      $(meltarg_tempdir)=. $(meltarg_bootstrapping)  $(MELT_DEBUG)

## position independent flag to compile *.c into *pic.o [+ (. (tpl-file-line))+]
GCCMELT_PIC_FLAGS ?= -fPIC

## shared object flag to link *pic.o into *.so [+ (. (tpl-file-line))+]
GCCMELT_SHARED_FLAGS ?= -shared

#@ [+ (. (tpl-file-line))+] our various MELT stages
.PHONY: melt-stage0-step [+FOR melt_stage " \\\n"+][+melt_stage+]-step [+ENDFOR melt_stage+]

## the workdir [+ (. (tpl-file-line))+]
melt-workdir:
	test -d $@ || mkdir $@

### catch excessive recursion  [+ (. (tpl-file-line))+] to help debugging with remake
ifeq (32,$(MAKELEVEL))
$(error too recursive make MAKELEVEL= $(MAKELEVEL)  [+ (. (tpl-file-line))+])
endif

## GCCMELTGEN_BUILD is needed by generated *+meltbuild.mk files  [+ (. (tpl-file-line))+]
GCCMELTGEN_BUILD=melt-workdir/

melt-stage0-step: melt-workdir $(GCCMELT_STAGE_ZERO) $(GCCMELT_STAGE_ZERO)/warmelt.modlis

[+FOR zeroflavor IN "dynamic" "quicklybuilt" +]
## stage 0 flavor [+zeroflavor+]  [+ (. (tpl-file-line))+]

melt-stage0-[+zeroflavor+]:
	test -d  melt-stage0-[+zeroflavor+]/ || mkdir  melt-stage0-[+zeroflavor+]/

#@  [+ (. (tpl-file-line))+]

[+FOR melt_translator_file+]

#@  symlink for module without checksum [+ (. (tpl-file-line))+]

melt-stage0-[+zeroflavor+]/[+base+].[+zeroflavor+].so  melt-stage0-[+zeroflavor+]/[+base+].$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5).[+zeroflavor+].so: \
  melt-stage0-[+zeroflavor+]/[+base+].$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5).[+zeroflavor+].meltmod.so
	@echo newbuild-symlink-module0.[+zeroflavor+].[+base+] at= $@ left= $< circ= $^ [+ (. (tpl-file-line))+]
	$(LN_S) -f -v $(realpath $<)  $@
	$(LN_S) -f -v $(realpath $<) melt-stage0-[+zeroflavor+]/[+base+].$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5).[+zeroflavor+].so
[+ENDFOR  melt_translator_file+]



#@ [+ (. (tpl-file-line))+] symbolic links for stage 0 sources [+zeroflavor+]
[+FOR melt_translator_file+]
$(addprefix melt-stage0-[+zeroflavor+]/,$(notdir $(MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES))  [+base+]+meltdesc.c [+base+]+melttime.h): | melt-stage0-[+zeroflavor+]
	@echo @+@melt-newbuild-stamp zero-[+zeroflavor+].[+base+].srcsymlink at= $@ left= $< circ= $^ [+ (. (tpl-file-line))+]
	$(LN_S) -v -f $(realpath $(GCCMELT_MELTSOURCEDIR)/generated/$(@F)) melt-stage0-[+zeroflavor+]/
	$(LN_S) -v -f $(realpath $(GCCMELT_MELTSOURCEDIR)/generated/[+base+]+melttime.h) melt-stage0-[+zeroflavor+]/
#@ [+ (. (tpl-file-line))+]
[+ENDFOR melt_translator_file+]

#@ [+ (. (tpl-file-line))+] module and object files for stage 0 [+zeroflavor+]

[+FOR melt_translator_file+]

#@ [+ (. (tpl-file-line))+] zeroflavor= [+zeroflavor+] base= [+base+] 
#@ [+ (. (tpl-file-line))+]
melt-stage0-[+zeroflavor+]/[+base+].$(MELT_ZERO_GENERATED_[+mkvarsuf+]_CUMULMD5).[+zeroflavor+].meltmod.so: \
  melt-stage0-[+zeroflavor+]/[+base+]+meltdesc.zpic.o $(addprefix melt-stage0-[+zeroflavor+]/,$(addsuffix .[+zeroflavor+].zpic.o,$(MELT_ZERO_GENERATED_[+mkvarsuf+]_BASENAME)))
	@echo @+@melt-newbuild-stamp zero-[+zeroflavor+].[+base+].meltmodule  at= $@ left= $< circ= $^ MELT_ZERO_GENERATED_[+mkvarsuf+]_BASENAME= $(MELT_ZERO_GENERATED_[+mkvarsuf+]_BASENAME) MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES= $(MELT_ZERO_GENERATED_[+mkvarsuf+]_C_FILES) [+ (. (tpl-file-line))+]
	$(GCCMELT_LINKER) $(GCCMELT_LINKER_FLAGS) $(GCCMELT_SHARED_FLAGS) $(GCCMELT_LINKER_[+(. (string-upcase (get "zeroflavor")))+]_FLAGS) -o $@ $^

#@ [+ (. (tpl-file-line))+]
melt-stage0-[+zeroflavor+]/[+base+]+meltdesc.zpic.o: melt-stage0-[+zeroflavor+]/[+base+]+meltdesc.c
	@echo @+@melt-newbuild-stamp zero-descriptor.[+base+].meltzpic  at= $@ left= $< circ= $^ [+ (. (tpl-file-line))+]
	$(GCCMELT_COMPILER) $(GCCMELT_COMPILER_FLAGS) -I $(^D) $(GCCMELT_PIC_FLAGS) $(GCCMELT_COMPILER_DESCRIPTOR_FLAGS) -c -o $@ $^

#@ [+ (. (tpl-file-line))+]
melt-stage0-[+zeroflavor+]/[+base+].[+zeroflavor+].zpic.o: melt-stage0-[+zeroflavor+]/[+base+].c $(GCCMELT_CC1_DEPENDENCIES)
	@echo @+@melt-newbuild-plain zero-[+zeroflavor+].[+base+].meltzpic  at= $@ left= $< circ= $^ [+ (. (tpl-file-line))+]
	$(GCCMELT_COMPILER) $(GCCMELT_COMPILER_FLAGS) $(GCCMELT_PIC_FLAGS) $(GCCMELT_COMPILER_[+(. (string-upcase (get "zeroflavor")))+]_FLAGS) -c -o $@ $<

#@ [+ (. (tpl-file-line))+]
melt-stage0-[+zeroflavor+]/[+base+]%.[+zeroflavor+].zpic.o: melt-stage0-[+zeroflavor+]/[+base+]%.c $(GCCMELT_CC1_DEPENDENCIES)
	@echo @+@melt-newbuild-rest zero-[+zeroflavor+].[+base+].meltzpic  at= $@ left= $< circ= $^ [+ (. (tpl-file-line))+]
	$(GCCMELT_COMPILER) $(GCCMELT_COMPILER_FLAGS) $(GCCMELT_PIC_FLAGS) $(GCCMELT_COMPILER_[+(. (string-upcase (get "zeroflavor")))+]_FLAGS) -c -o $@ $<


[+ENDFOR melt_translator_file+]


#@ stage 0 flavor [+zeroflavor+] modulelist  [+ (. (tpl-file-line))+] 
melt-stage0-[+zeroflavor+]/warmelt.modlis:  | \
[+FOR melt_translator_file " \\\n" 
+]             melt-stage0-[+zeroflavor+]/[+base+].[+zeroflavor+].so \
                melt-stage0-[+zeroflavor+]/[+base+]+meltdesc.c [+
ENDFOR melt_translator_file+]
	@echo @+@melt-newbuild-modlis  at= $@ left= $< circ= $^ [+ (. (tpl-file-line))+]
	date  +"#$@ generated %F" > $@-tmp
[+FOR melt_translator_file+]	echo $(GCCMELT_MELTSOURCEDIR)/generated/[+base+].[+zeroflavor+] >> $@-tmp
	echo "#end stage 0 flavor [+zeroflavor+] module list" >> $@-tmp
[+ENDFOR melt_translator_file+]
	$(melt_move_if_change) $@-tmp $@

## end stage 0 flavor [+zeroflavor+]  [+ (. (tpl-file-line))+]
[+ENDFOR zeroflavor+]

################ end stage 0 [+ (. (tpl-file-line))+] 



#@ [+ (. (tpl-file-line))+] 

[+FOR melt_stage+]
## stage [+melt_stage+] [+ (. (tpl-file-line))+] 

[+ 
  (define stageindex (+ 1 (for-index)))
  (define previndex (for-index))
  (define prevstage (if (> stageindex 1) (sprintf "melt-stage%d" previndex) "$(GCCMELT_STAGE_ZERO)"))
  (define stageident (sprintf "melt_stage%d" stageindex))
  (define prevflavor (if (> stageindex 1) "quicklybuilt" "$(GCCMELT_ZERO_FLAVOR)"))
+]
[+define melt_prevstage+][+ (. prevstage)+][+enddef+]
[+define melt_prevflavor+][+ (. prevflavor)+][+enddef+]
[+define melt_stagident+][+ (. stageident)+][+enddef+]

## melt_prevstage [+melt_prevstage+] melt_prevflavor [+melt_prevflavor+]  [+ (. (tpl-file-line))+] 

[+melt_stage+]:
	test -d  [+melt-stage+]/ || mkdir  [+melt-stage+]


[+FOR melt_translator_file+]
[+ 
  (define outbase (get "base")) (define outindex (for-index)) 
  (define baseident (string-map 
    (lambda(c) (if (or (char-alphabetic? c) (char-numeric? c)) c #\_
    )) (get "base")))
+]

[+define melt_basident+][+ (. baseident)+][+enddef+]

## the generated make fragments warmelt*+meltbuild.mk have rules for $(GCCMELTGEN_BUILD)warmelt*.<md5sum>.<flavor>.so


## perhaps we should use MELT mode to generate modules, not C sources?? 
## the descriptive C of [+melt_stage+] for [+ (. outbase)+] [+ (. (tpl-file-line))+]
[+melt_stage+]/[+ (. outbase)+]+meltdesc.c [+melt_stage+]/[+ (. outbase)+]+meltbuild.mk [+melt_stage+]/[+ (. outbase)+].c:  \
     $(GCCMELT_MELTSOURCEDIR)/[+ (. outbase)+].melt \
[+FOR includeload+]        [+includeload+] \
[+ENDFOR includeload
+][+FOR melt_translator_file+][+ 
  (define inbase (get "base")) 
  (define inindex (for-index)) 
  (define depstage (if (< inindex outindex) (get "melt_stage") prevstage))
  (define depindex (if (< inindex outindex) stageindex (- stageindex 1)))
  (define prevflavor (if (> stageindex 1) "quicklybuilt" "$(GCCMELT_ZERO_FLAVOR)"))
  (define depflavor (if (< inindex outindex) "quicklybuilt" prevflavor))
+]      [+ (. depstage)+]/[+(. inbase)+].[+ (. depflavor)+].so \
[+ENDFOR melt_translator_file
+]   empty-file-for-melt.c $(GCCMELT_CC1_DEPENDENCIES) | [+melt_stage+]
	@echo @+@melt-newbuild-desc-[+melt_stage+]-[+ (. outbase)+]  at= $@ left= $< circ= $^ prevstage=[+melt_prevstage+] prevflavor=[+melt_prevflavor+] [+ (. (tpl-file-line))+]
	@echo [+IF (= outindex 0)+] $(MELTCCINIT1ARGS)[+ELSE+] $(MELTCCFILE1ARGS)[+ENDIF+] > [+ (. outbase)+]+[+melt_stage+].args-tmp
	@echo  $(meltarg_init)=[+FOR melt_translator_file ":\\\n"+][+ (define inbase (get "base")) (define inindex (for-index)) 
  (define depstage (if (< inindex outindex) (get "melt_stage") prevstage))
  (define depflavor (if (< inindex outindex) "quicklybuilt" prevflavor))
  (define depindex (if (< inindex outindex) stageindex (- stageindex 1)))
+][+ (. depstage)+]/[+ (. inbase)+].[+ (. depflavor)+][+ENDFOR melt_translator_file
+] >> [+ (. outbase)+]+[+melt_stage+].args-tmp
	@echo $(meltarg_arg)=$<  -frandom-seed=$(shell $(MD5SUM) $< | cut -b-24) \
	      $(meltarg_module_path)=$(realpath .):$(realpath [+melt_stage+]):$(realpath [+melt_prevstage+]):melt-workdir \
	      $(meltarg_source_path)=$(realpath .):$(realpath [+melt_stage+]):$(realpath [+melt_prevstage+]):$(realpath $(GCCMELT_MELTSOURCEDIR)):$(realpath $(GCCMELT_MELTSOURCEDIR)/generated):melt-workdir \
	      $(meltarg_output)=[+melt_stage+]/[+ (. outbase)+] $(meltarg_workdir)=melt-workdir $(meltarg_genworklink) \
	      empty-file-for-melt.c >> [+ (. outbase)+]+[+melt_stage+].args-tmp
	@$(melt_move_if_change)  [+ (. outbase)+]+[+melt_stage+].args-tmp  [+ (. outbase)+]+[+melt_stage+].args
	@echo; echo; echo -n   @+@melt-newbuild [+ (. outbase)+]+[+melt_stage+].args: ; cat [+ (. outbase)+]+[+melt_stage+].args ; echo; echo; echo "***** doing " $@  [+ (. (tpl-file-line))+]
	@echo  @+@melt-newbuild doing [+ (. outbase)+]+[+melt_stage+] with GCCMELT_CC1= $(GCCMELT_CC1)  [+ (. (tpl-file-line))+]
	$(GCCMELT_CC1) -DGCCMELT_FROMTPL=\"$(shell echo  [+ (. (tpl-file-line))+] [+melt_stage+] [+base+] | sed 's/ /_/g')\" @[+ (. outbase)+]+[+melt_stage+].args
	@ls -l [+melt_stage+]/[+ (. outbase)+].c  || ( echo "*@*MISSING "  [+melt_stage+]/[+ (. outbase)+].c [+ (. (tpl-file-line))+] ; exit 1 )

#@ [+ (. (tpl-file-line))+] 
-include [+melt_stage+]/[+base+]+meltbuild.mk

[+FOR flavor IN "dynamic" "quicklybuilt" "optimized" "debugnoline"+]
#@ flavor  base [+base+] stage [+melt_stage+] [+ (. (tpl-file-line))+]

ifndef MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]
MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]=$(shell cat  [+melt_stage+]/[+base+].c  [+melt_stage+]/[+base+]+[0-9]*.c | $(MD5SUM) | cut -b-24)
endif

#@ [+ (. (tpl-file-line))+] base [+base+] flavor [+flavor+]
[+melt_stage+]/[+base+].[+flavor+].so: [+melt_stage+]/[+base+]+meltbuild.mk \
  [+melt_stage+]/[+base+]+meltdesc.c [+melt_stage+]/[+base+].c 
	@echo  @+@melt-newbuild module at= $@ circ= $^ MAKE= $(MAKE) MAKEFLAGS= $(MAKEFLAGS) MAKEFILES= $(MAKEFILES) stage=[+melt_stage+] base=[+base+] prevstage=[+melt_prevstage+] GCCMELT_BUILD_MKFILE= $(GCCMELT_BUILD_MKFILE) [+ (. (tpl-file-line))+]
	$(MAKE) -f $(GCCMELT_BUILD_MKFILE) GCCMELT_BUILD_MKFILE=$(GCCMELT_BUILD_MKFILE) melt-workdir/[+base+].$(MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]).[+flavor+].meltmod.so
	@echo  @+@melt-newbuild module made melt-workdir/[+base+].$(MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]).[+flavor+].meltmod.so [+ (. (tpl-file-line))+]
	$(LN_S) -v -f $(realpath melt-workdir)/[+base+].$(MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]).[+flavor+].meltmod.so  [+melt_stage+]/[+base+].[+flavor+].$(MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]).so 
	$(LN_S) -v -f $(realpath melt-workdir)/[+base+].$(MELTGENMOD_CUMULATED_MD5SUM_[+melt_stagident+]_[+melt_basident+]).[+flavor+].meltmod.so  $@


#@ end flavor [+flavor+] base [+base+] stage [+melt_stage+] [+ (. (tpl-file-line))+]

[+ENDFOR flavor+]


#@ end base [+base+] stage [+melt_stage+] [+ (. (tpl-file-line))+]
[+ENDFOR melt_translator_file+]


#@ stage [+melt_stage+] phony step [+ (. (tpl-file-line))+]
[+melt_stage+]-step: 
	@echo  @+@melt-newbuild-[+melt_stage+] at= $@ circ= $^ [+ (. (tpl-file-line))+]
[+FOR melt_translator_file+]
	$(MAKE) -f $(realpath $(GCCMELT_BUILD_MKFILE)) GCCMELT_BUILD_MKFILE=$(GCCMELT_BUILD_MKFILE) [+melt_stage+]/[+base+]+meltbuild.mk [+melt_stage+]/[+base+].c
	@echo  @+@melt-newbuild-[+melt_stage+]-base [+base+] module [+ (. (tpl-file-line))+]
	$(MAKE) -f $(realpath $(GCCMELT_BUILD_MKFILE)) GCCMELT_BUILD_MKFILE=$(GCCMELT_BUILD_MKFILE)  [+melt_stage+]/[+base+].quicklybuilt.so
	@echo  @+@melt-newbuild-[+melt_stage+]-base [+base+] done [+ (. (tpl-file-line))+]
[+ENDFOR melt_translator_file+]

#@ end stage [+melt_stage+] [+ (. (tpl-file-line))+]
[+ENDFOR melt_stage+]

#@ [+ (. (tpl-file-line))+] eof melt-newbuild.mk
## eof melt-newbuild.mk generated from melt-newbuild.tpl & melt-newbuild.def
