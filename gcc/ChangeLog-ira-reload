2010-03-30  Jeff Law <law@redhat.com>

	* ira-reload.c (ira_reload): If necessary, call commit_edge_insertions
	after fixup_abnormal_edges.

2010-02-01  Jeff Law <law@redhat.com>

	* ira-reload.c (ira_reload): Wipe equivalence information and
	REG_EQUIV notes which refer to PSEUDOS_TO_LOCALIZE.

2010-12-23  Jeff Law <law@redhat.com>

	* reload1.c (record_equivalences_for_reload): Mirror Bernd's change
	#160947 for init_eliminable_invariants.

2010-12-21  Jeff Law <law@redhat.com>

	* ira-reload.c (build_conflicts_for_new_allocnos): If the new
	allocno crosses calls, then mark CALL_USED_REG_SET as conflicting.

2010-12-14  Jeff Law <law@redhat.com>

	* reload.h (reg_equiv_memory_loc_vec): Move into reg_equivs structure.
	(reg_equiv_constant, reg_equiv_invariant): Likewise.
	(reg_equiv_memory_loc, reg_equiv_address): Likewise.
	(reg_equiv_mem, reg_equiv_alt_mem_list): Likewise.
	(reg_equiv_init, reg_equiv_init_size): Likewise.
	(struct reg_equivs): New structure.
	(reg_equivs): VEC of struct reg_equiv.
	* caller-save.c (mark_referenced_regs): Corresponding changes to
	access the various reg_equiv_XXX arrays.
	* ira.c (find_equiv_invariant_cost): Likewise.
	(fix_reg_equiv_init, no_equiv): Likewise.
	(update_equiv_regs): Likewise.
	(ira): Likewise.
	* ira-reload.c (localize_pseudo_p): Likewise.
	(emit_localizing_loads, emit_localizing_stores): Likewise.
	(localize_pseudos): Likewise.
	* integrate.c (allocate_initial_values): Likewise.
	* reload.c (push_reg_equiv_alt_mem): Likewise.
	(push_secondary_reload, push_reload): Likewise.
	(find_reloads, find_reload_toplev): Likewise.
	(make_memloc, find_reloads_address): Likewise.
	(subst_reg_equivs, subst_indexed_address): Likewise.
	(find_reloads_address_1, find_reloads_subreg_address): Likewise.
	(refers_to_mem_for_reload_1, find_reg_equiv): Likewise.
	* reload1.c (replace_pseudos_in): Likewise.
	(reload, record_equivalences_for_reload): Likewise.
	(calculate_needs_all_insns): Likewise.
	(calculate_elim_costs_all_insns, alter_reg): Likewise.
	(note_reg_elim_costly, eliminate_regs_1): Likewise.
	(elimination_effects, init_eliminable_invariants): Likewise.
	(free_reg_equiv, emit_input_reload_insns): Likewise.
	(emit_output_reload_insns, delete_output_reload): Likewise.
	* caller-save.c	(allocate_initial_values): Prototype moved here.
	* ira.c (init_reg_equiv_memory_loc): Remove.
	(ira): Recompute max_regno and call grow_reg_equivs.
	* ira-reload.c (copy_allocno_for_spilling): New.
	(create_allocno_for_spilling): Simplify.
	* integrate.c: Include "reload.h"
	* integrate.h (allocate_initial_values): Remove prototype.
	* reload1.c: Include ggc.h.
	(reg_equiv_constant, reg_equiv_invariant): Remove.
	(reg_equiv_invariant, reg_equiv_memory_loc): Likewise.
	(reg_equiv_memory_loc_vec, reg_equiv_address): Likewise.
	(reg_equiv_mem, reg_equiv_alt_mem_list): Likewise.
	(reg_equiv_init, reg_equiv_init_size): Likewise.
	(reg_equivs, grow_reg_equivs): New.
	(reload): Call grow_reg_equivs.  Remove extraneous df calls.
	(calculate_elim_costs_all_insns): Do not free reg_equivs.
	(reload): Remove extraneous df calls.
	
2010-12-01  Jeff Law <law@redhat.com>

	* reload1.c (allocate_reload_reg): Remove set, but unused variable.

	* reload1.c: Include params.h.
	(df_initialized): Declare.
	(reload): Set df_initialized.
	(mark_spill_regs): Rename last argument to index.  Simplify
	array addressing arithmetic.
	(allocate_reload_reg): Avoid insn scan if there is only one
	spill register.  Lazily perform the DF rescan.  Clamp the number
	of insns scanned.  Changes to faciliate array addressing simplification
	in mark_spill_regs.  Remove unnecessary loop to map from regno to
	index into spill_reg_rtx.
	* params.def (PARAM_MAX_RELOAD_FORWARD_SEARCH_INSNS): New param.

2010-11-18  Jeff Law <law@redhat.com>

	* reload1.c (REG_OR_SUBREG_P): Define.
	(reload): Update DF information just prior to emitting reloads.
	(mark_spill_regs): New.
	(allocate_reload_reg): Scan forward from the insn needing reloads
	to determine desirability of each spill reg.

2010-08-04  Jeff Law <law@redhat.com>

	* ira-reload.c (create_new_allocno_for_spilling): Set the new allocno's
	cover class before creating its underlying objects.  Set the underlying
	object's conflicts to include ira_no_alloc_regs and regs not in the
	cover class.

2010-07-26  Jeff Law <law@redhat.com>

	* ira-reload.c (create_new_allocno_for_spilling): Changes to allow
	an allocno to have > 1 underlying object.
	(maybe_add_conflict): Likewise.
	(ira_reload): Likewise.

2010-07-21  Jeff Law <law@redhat.com>

	* ira-reload.c (create_new_allocno_for_spilling): Create the
	underlying object as well.

2010-07-07  Jeff Law <law@redhat.com>

	* ira-reload.c: Revert change from Jan 14.  It is not safe due to
	assumptions in reload.

	* ira-reload.c (create_new_allocno_for_spilling): Add some debug dump
	support.

2010-06-28  Jeff Law <law@redhat.com>

	* ira-reload.c (create_new_allocno_for_spilling): Drop 'allocno'
	from live_range_t.
	* ira-build.c (remove_allocno_conflicts): Use CLEAR_MINMAX_SET_BIT
	instead of CLEAR_ALLOCNO_SET_BIT.

2010-06-21  Jeff Law <law@redhat.com>

	* ira-reload.c (localize_pseudos): Use GGC_RESIZEVEC rather than
	ggc_realloc_stat.

2010-06-16  Jeff Law <law@redhat.com>

	* ira-reload.c (localize_pseudos): Use ggc_realloc_stat.

2010-06-09  Jeff Law <law@redhat.com>

	* ira-build.c (initiate_cost_vectors): Initiate a cost vector for
	NO_REGS.
	* ira-reload.c (ira_bad_reload_regno, ira_bad_reload_regno_1): Delete.
	* ira.h (ira_bad_reload_regno): Delete redundant prototype.
	* ira-costs.c (ira_costs): Do not call calculate_elim_costs_all_insns
	when computing costs for pseudos/allocnos created by ira-reload.

2010-05-10  Jeff Law <law@redhat.com>

	* ira-reload.c (localize_pseudos): Abort if we discover newly created
	pseudos w/o allocnos.

	* ira-reload.c (emit_localizing_loads): Fix typo.

2010-04-27  Jeff Law <law@redhat.com>

	* ira-reload.c (ira_reload): Remove set, but not used 'tail' variable.
	* reload1.c (reload): Similarly for 'n' variable.

2010-02-16  Jeff Law <law@redhat.com>

	* ira-reload.c (create_new_allocno_for_spilling): No longer
	copy HARD_REG_COSTS from the original allocno.
	(ira_reload): Call ira_tune_allocno_costs_and_cover_classes and
	ira_costs.
	* ira-costs.c (find_costs_and_classes): New argument MIN_REGNO.  Only
	update reg classes for pseudos larger than MIN_REGNO.
	(setup_allocno_cover_class_and_costs): Similarly, but for cover
	classes.
	(ira_costs): New argument MIN_REGNO.  Pass along to 
	find_costs_and_classes and setup_allocno_cover_class_and_costs.
	(ira_set_pseudo_classes): Corresponding changes.
	* ira-int.h (ira_costs): Update prototype.
	* ira_build.c (ira_build): Pass in new argument to ira_costs.

	* ira-reload.c (create_new_allocno_for_spilling): Zero CALL_FREQ
	CALLS_CROSSED_NUM and NEXT_REGNO_ALLOCNO fields.
	(build_conflicts_for_new_allocnos): Update CALL_FREQ and
	CALLS_CROSSED_NUM for new allocnos as needed.

2010-02-11  Jeff Law <law@redhat.com>

	* ira-reload.c (ira_reload): Recompute DF info immediately after
	localizing pseudos.

2010-02-02  Jeff Law <law@redhat.com>

	* ira-conflicts.c (process_regs_for_copy): Skip conflicts test if
	CONFLICTS is NULL.
	(add_insn_allocno_copies): Similarly for REG_DEAD notes.
	(ira_add_copies): Renamed from add_copies.
	(ira_build_conflicts): Corresponding changes.  Clear CONFLICTS after
	freeing memory.
	* ira-int.h (ira_add_copies): Prototype.
	* ira-build.c (finish_loop_tree_node): New argument to control
	deletion of the regno_allocno_map.
	(finish_loop_tree_nodes): Pass in new argument to
	finish_loop_tree_node.  Do not delete regno_allocno_map here.
	(remove_unnecessary_regions): Pass in new argument to
	finish_loop_tree_node.
	* ira-reload.c (fix_allocno_map): New function.
	(build_conflicts_for_new_allocnos): Remove copy detection.
	(ira_reload): Call fix_allocno_map and ira_add_copies.

2010-01-26  Jeff Law <law@redhat.com>

	* ira-reload.c (emit_localizing_loads): Avoid creating unnecessary
	pseudos.

	* ira-reload.c (build_conflicts_for_new_allocnos): Fix typo.

2010-01-14  Jeff Law <law@redhat.com>

	* ira-reload.c (build_conflicts_for_new_allocnos): Avoid unnecessary
	conflicts between allocnos appearing in a simple copy.
	(mark_conflicts): Corresponding changes.

2009-12-16  Jeff Law <law@redhat.com>

	* ira-reload.c (emit_localizing_stores): Use MEM directly in more
	read-modify-write insns.

2009-12-04  Jeff Law <law@redhat.com>

	* ira-reload.c (build_conflicts_for_new_allocnos): Look for
	copies to/from new pseudos/allocnos and create ira copies for them.

	* ira-color.c (ira_reassign_conflict_pseudos): Remove bogus asserts.
	Free UPDATED_HARD_REG_COSTS and UPDATED_CONFLICT_HARD_REG_COSTS.
	(allocno_reload_assign): Likewise.


2009-12-02  Jeff Law <law@redhat.com>

	* ira-reload.c (create_new_allocno_for_spilling): If the original
	allocno conflicts with all hard regs, then make the new allocno
	conflict with all hard regs too.

	* ira-reload.c (build_conflicts_for_new_allocnos): Clear 
	ELIMINABLE_REGSET and IRA_NO_ALLOC_REGS from LIVE.

	* ira-reload.c (emit_localizing_stores): Allow replacement of
	pseudo with MEM if there are 2 stores and no uses.

2009-12-01  Jeff Law <law@redhat.com>

	* ira-reload.c (no_uses_after_this_set): New function.
	(emit_localizing_stores): Use no_uses_after_this_set, accept
	new argument TAIL.  Remove references to no_uses_after_last_set.
	(localize_pseudos): Remove references to no_uses_after_last_set.
	(identify_singleton_sets): Likewise.
	(no_uses_after_last_set): Delete bitmap.

	* ira-reload.c (emit_localizing_stores): Decrement pseudo_nsets
	if we eliminate a store to a pseudo we want to localize.  Do not
	clear regs_to_load if we eliminated a store to the pseudo reg.

2009-11-18  Jeff Law <law@redhat.com>

	* ira-reload.c (build_conflicts_for_new_allocnos): Take HEAD and
	TAIL arguments instead of BB.  Iterate from tail back to head building
	conflicts.
	(localize_pseudos): Accept new VISITED argument.  Operate on
	extended basic blocks starting with BB.
	(ira_reload): Refine to work with extended basic blocks.

2009-11-10  Jeff Law <law@redhat.com>

	* ira-reload.c (localize_pseudos): Set REG_FREQ for the newly
	created pseudos.
	(create_new_allocno_for_spilling): Set ALLOCNO_FREQ based on the
	new pseudo's REG_FREQ.

	2009-11-10  Vladimir Makarov <vmakarov@redhat.com>
	* ira-color.c (allocno_reload_assign): Avoid accumulating
	reload registers in ALLOCNO_TOTAL_CONFLICT_HARD_REGS.

	* ira-reload.c (ira_bad_reload_regno_1): If the pseudo wants a
	singleton register, then consider everything else bad.

2009-11-05  Jeff Law <law@redhat.com>

	* ira-color.c (ira_reassign_pseudos): Collect all pseudos for
	reassignment rather than doing them in two passes.
	* reload1.c (finish_spills): Remove Oct 22, 2009 change as it's
	no longer needed.

	* ira-reload.c (create_new_allocno_for_spilling): Copy the
	UPDATED_MEMORY_COST and HARD_REG_COSTS from the old to the
	new allocno.

2009-11-04  Jeff Law <law@redhat.com>

	* ira-color.c (ira_reassign_pseudos): Only try to reassign
	conflicting pseudos if requested by caller.
	* ira.h (ira_reassign_pseudos): Update prototype.
	* reload1.c (finish_spills): Update call to ira_reassign_pseudos.
	* ira-reload.c (ira_reload): Likewise.

2009-10-29  Jeff Law <law@redhat.com>

	* ira-build.c (update_conflict_hard_reg_costs): Do not
	die if ALLOCNO_HARD_REG_COSTS is empty.

2009-10-28  Jeff Law <law@redhat.com>

	2009-10-22  Vladimir Makarov <vmakarov@redhat.com>
	* ira-build.c (update_conflict_hard_reg_costs): New.
	(ira_build): Call update_conflict_hard_reg_costs.

	* ira-reload.c (ira_reload): Clear REG_N_REFS and REG_N_SETS for
	localized pseudos.

2009-10-22  Jeff Law <law@redhat.com>

	* reload1.c (finish_spills): Also try to re-allocate pseudos
	currently on the stack.

	* ira-lives.c (process_single_reg_class_operands): Update the 
	hard reg costs for all the hard registers desired by the single
	reg class operand.

2009-10-15  Jeff Law <law@redhat.com>

	* ira-reload.c (ira_bad_reload_regno): New function.
	(ira_bad_reload_regno_1): Likewise.
	* ira.h (ira_bad_reload_regno): Declare.
	* reload1.c (allocate_reload_reg): Use ira_bad_reload_regno.

2009-10-13  Jeff Law <law@redhat.com>

	* ira-reload.c (no_uses_after_last_set): New bitmap.
	(identify_singleton_sets): Set it appropriately.
	(emit_localizing_stores): More aggressively replace a pseudo
	with its equivalent memory location.  Indicate that INSN
	should be deleted in certain cases.
	(localize_pseudos): Allocate and free no_uses_after_last_set.
	Fix SET/USE processing order for no_uses_after_last_set.
	If emit_localizing_stores requests an insn be deleted, do it.

2009-09-31  Jeff Law <law@redhat.com>

	* ira-reload.c (emit_localizing_loads): Attempt to replace the
	pseudo with its equivalent memory when safe and profitable.

2009-09-30  Jeff Law <law@redhat.com>

	* ira-reload.c (uses_before_set): Remove bitmap.
	(identify_singleton_uses): Corresponding changes.
	(localize_pseudos): Likewise.

	* ira-reload.c (emit_localizing_stores): Return whether or not the
	current insn needs to be rescanned by DF analyzer.
	Attempt to replace the pseudo with its equivalent memory.
	(localize_pseudos): Rescan as needed after emit_localizing_stores.

2009-09-25  Jeff Law <law@redhat.com>

	* ira-reload.c (identify_singleton_uses): Twiddles for using DF rather
	than note_stores/note_uses.
	(identify_singleton_sets, collect_loads): Likewise.
	(identify_singleton_uses_1): Remove.
	(collect_loads_1, emit_localizing_loads_1): Likewise.
	(emit_localizing_loads): Twiddles for using DF rather than
	note_stores/note_uses.  Return whether or not rescanning is needed.
	(rename_sets, emit_localizing_stores): Likewise.
	(localize_pseudos): Iterate over DF structures rather than using
	note_stores/note_uses.  Defer rescanning until we're finished with
	the current insn.

2009-09-24  Jeff Law <law@redhat.com>

	* ira-reload.c (emit_localizing_loads_1): Incrementally update DF.
	(emit_localizing_stores): Likewise.
	(create_new_allocno_for_spilling): Clear the hard register conflicts
	for the new allocno.
	(maybe_add_conflict): Handle hard register conflicts.
	(mark_conflicts): Renamed from mark_conflict.   Simplify slightly.
	(mark_uses): New.
	(live_uses, live_uses_1): Remove.
	(build_conflicts_for_new_allocnos): Simplify and use DF.

2009-09-22  Jeff Law <law@redhat.com>

	* ira-reload.c (build_conflicts_for_new_allocnos): Ignore debug
	insns.
	(localize_pseudos): Likewise.

2009-09-21  Jeff Law <law@redhat.com>

	* ira-reload.c (localize_pseudos): Add new argument to call to
	setup_reg_classes.
	(emit_localizing_stores): Remove unused variable.
	* reload1.c (reload): Pass in the right peudo register number
	to alter_reg.  Restore incorrectly removed initialization of
	tmp_pseudo_reg_arr.

	* NOTES: New file.

	* ira-reload.c: New file.
	* ira-int.h (reload_reload): Declare.
	* ira-color.c (sorted_allocnos): No longer static.
	* ira.c (ira): Call ira_reload.
	* Makefile.in (OBJS-common): Add ira-reload.o
	(ira-reload.o): Add dependencies

	* ira-color.c (setup_allocno_priorities): No longer static.
	* ira-int.h (setup_allocno_priorities): Declare

	* reload1.c (reg_max_ref_width): No longer static.
	(alter_reg): Likewise.
	(record_equivalences_for_reload): New function extracted from reload.
	(reload): Don't sort registers prior to calling alter_reg anymore.
	* reload.h (reg_max_ref_width): Declare.
	(alter_reg): Likewise.
	(record_equivalences_for_reload): Likewise.

2009-09-18  Jeff Law <law@redhat.com>
	
	* ira.c (expand_reg_info): No longer static.
	* ira-int.h (expand_reg_info): Declare.

	* ira-build.c (remove_from_all_conflicts): New function.
	(remove_allocno_conflicts): New function.
	* ira-int.h (remove_from_all_conflicts): Declare.

	2009-09-14  Vladimir Makarov <vmakarov@redhat.com>
	* ira.c (ira_non_ordered_class_hard_regs): Define.
	(setup_class_hard_regs): Initialize ira_non_ordered_class_hard_regs.
	* ira-int.h (ira_non_ordered_class_hard_regs): Declare.
	* ira-costs.c (ira_tune_allocno_costs_and_cover_classes): Increase
	cost of unaligned hard regs when allocating multi-reg pseudos.

	* regstat.c (regstat_reallocate_ri): New function.
	* regs.h (regstat_reallocate_ri): Declare

	* ira-conflicts.c (print_allocno_conflicts): New function to print
	conflicts for a single allocno.
	(print_conflicts): Use print_allocno_conflicts.


