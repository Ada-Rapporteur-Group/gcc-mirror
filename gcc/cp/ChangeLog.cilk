2012-06-12  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (callable): Removed a check to add LOOKUP_COMPLAIN.

2012-06-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* parser.c (cp_parser_ctor_initializer_opt_and_function_body): Added a
	check for array notation expressions. If so, then decompose them.

2012-06-04  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (cp_make_cilk_frame): Removed adding body to the orig body's
	tree chain.

2012-05-30  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* semantics.c (finish_call_expr): Used spawning for call_type instead of
	default CALL_NORMAL to support spawned call.

2012-05-29  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* pt.c (apply_late_template_attributes): Added a check for "vector"
	attribute for elemental functions.

2012-05-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* parser.c (cp_parser_elem_fn_processor_clause): Added a underscore
	between pentium and 4 for sse3, removed an extra 's' in
	sse3 for core2_duo and put underscore between core and 2 in core2.
	* cp-gimplify.c (cp_gimplify_expr): Added a check if stmt tree is valid.

2012-05-22  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (fix_conditional_array_notations_1): Changed
	build_min_nt to build_min_nt_loc with location info.
	(fix_builtin_array_notation_fn): Added location info for
	build_x_conditional_expr.  Also replaced all '1' with
	tf_warning_or_error.
	* parser.c (cp_parser_cilk_init_declarator): Change decl_specifier
	location field.  Also changed decl_spec spec array check.
	(cp_parser_array_notation): Changed build_min_nt to build_min_nt_loc
	and added location info.

2012-05-08  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (compute_loop_var): Added location info to build_new_op.
	(callable): Likewise.
	(compute_loop_count): Likewise.
	* cp-array-notation.c (build_x_array_notation_expr): Added location
	information to grok_array_decl, build_x_unary_op, build_x_binary_op.
	(fix_builtin_array_notation_fn): Likewise.
	(fix_unary_array_notation_exprs): Likewise.
	(has_call_expr_with_array_notation): Moved declaration after if stmt.
2012-04-06  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* parser.c (cp_parser_attribute_list): Added code to catch vector
	attribute.
	(cp_parser_elem_fn_processor_clause): New function.
	(cp_parser_elem_fn_uniform_clause): Likewise.
	(cp_parser_elem_fn_vlength_clause): Likewise.
	(cp_parser_elem_fn_linear_clause): Likewise.
	(cp_parser_elem_fn_expression_list): Likewise.

2012-03-16  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* decl.c (finish_function_body): called DECL_HAS_SPAWN_P and set it to
	calls_spawns.
	* pt.c (tsubst_copy): Carried the spawn call information from one
	call expression to another.
	(tsubst_copy_and_build): Likewise.

2012-02-14  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* parser.c (cp_parser_compound_stmt): Added a check to see if the
	compound statement has array notations inside it.

2012-02-13  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* call.c (build_conditional_expr): Added a check for ARRAY_NOTATION_REF.
	(convert_like_real): Added check for array notations inside function.
	* cp-array-notation.c (fix_builtin_array_notation_fn): Added a
	REDUCE_ANY_NONZEROS, REDUCE_ALL_NONZEROS and REDUCE_CUSTOM case.
	(is_builtin_array_notation_fn): Replaced all occurances of "zeros" in
	string with "zero."  Also, added a check for REDUCE_CUSTOM,
	REDUCE_ALL_ZEROS, REDUCE_ALL_NONZEROS.  Also added a check for
	FUNCTION_DECL.
	(find_rank): Changed a not equal to check to a less than check.  Also
	added check for TREE_LIST and DECL_EXPR.
	(extract_array_notation_exprs): Likewise.
	(replace_array_notations): Likewise.  Also added a type check.
	(has_call_expr_with_array_notation): New function.
	(build_x_array_notations): Moved lhs_var creation and checking for
	implicit_index function to the top.  Added a check for ARRAY NOTATION
	REF.  Also replaced all TREE CONSTANT calls with specific functions.
	Replaced all build_decls with create_tmp_var.  Added a label name for
	all the label decls.  Replaced all C function-calls with their C++
	equivalents (e.g replace build_modify_expr with build_x_modify_expr).
	Also, replaced stmt list implemention to a push_stmt_list impl.
	Replaced conditional_expr in the array notation loop with a if-then-else
	statment functions.
	(fix_conditional_array_notations_1): Likewise.
	(fix_unary_array_notation_exprs): Likewise.
	(fix_builtin_array_notation_fn): All the changes in
	build_x_array_notation_exprs are incorporated into this function.  Also,
	added check for REDUCE_CUSTOM, REDUCE_ALL_NONZEROS and
	REDUCE_ANY_NONZEROS. Replaced a big case statement with if then else.
	(fix_array_notation_exprs): Added a check for DECL_EXPR, MODIFY_EXPR,
	CALL_EXPR and MODOP_EXPR.
	* parser.c (cp_parser_assignment_expression): Removed call for
	build_x_array_notation_expr and the new_expr variable.
	(cp_parser_array_notation): Added support for templates.
	(tsubst_copy_and_build): Added a ARRAY_NOTATION_REF case.
	(type_unification_real): Likewise.
	* tree.c (lvalue_kind): Likewise.
	* typeck.c (cp_build_addr_expr_1): Likewise.
	* expr.c (array_ref_element_size): Broke up a value into smaller parts.
	(array_ref_lower_bound): Likewise.

2012-01-31  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (build_x_array_notation_expr): Added another
	dimension to lhs parameters to handle scatter of array notations.  Also
	replaced all cases of build_int_cst with 0 or 1 with build_zero_cst and
	build_one_cst, respectively.
	(fix_conditional_array_notations_1): Replaced build_int_cst with 0 or 1
	with build_zero_cst and build_one_cst, respectively.
	(fix_builtin_array_notation_fn): Likewise.
	(fix_unary_array_notation_exprs): Likewise.

2012-01-26  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (fix_builtin_array_notation_fn): Added new var
	called "array_ind_value," that stores the max/min value and the *new_var
	stores the index.  Also, replaced all build_int_cst with build_one_cst
	and build_zero_cst.  Also, in REDUCE_ANY_ZEROS and REDUCE_ALL_ZEROS
	cases, replaced comparing with func_parm with a new_cond_expr.  Also
	initialized the maximum/minimum value for the max/min index builtin
	function.
	(contains_array_notation_expr): Deferenced array_list in if statement.
	* typeck.c (convert_for_assignment): Checked if the rhs contains array
	notation expr, if so we don't do any conversion.

2012-01-26  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (extract_array_notation_exprs): Added a check
	to see if the call expr is sec_implicit_index function.
	(replace_array_notations): Likewise.
	(build_x_array_notation_expr): Likewise.

2012-01-22  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (is_builtin_array_notation_fn): Initialized
	function_name to NULL.

2012-01-22  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (find_rank): Removed a check for AGGR_INIT_EXPR
	with CALL_EXPR.
	(extract_array_notation_exprs): Likewise.
	(replace_array_notations): Likewise.

2012-01-20  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* call.c (convert_like_real): Type conversion is ignored if array
	notation is present as a parameter.
	* cp-array-notation.c (find_rank): Added a new parameter called
	ignore_builtin_fn.  Also handled a case for STATEMENT_LIST.  Finally,
	added a check to see if the builtin function should be ignored.
	(extract_array_notation_exprs): Added a new parameter called
	ignore_builtin_fn.  Also added a check to see for ignore_builtin_fn.
	(replace_array_notations): Likewise.
	(build_x_array_notation_expr): Modified find_rank call to add a bool.
	Also added a check if the funtion is a builtin array notation function.
	Added a bool parameter to extract_array_notation_exprs, find_rank and
	replace_array_notations.
	(fix_builtin_array_notation_fn): New function.
	(is_builtin_array_notation_fn): Likewise.
	(build_x_reduce_expr): Likewise.
	(contains_array_notation_expr): Likewise.
	(fix_unary_array_notation_exprs): Changed the name of the parameter.
	Also handled a case check for CALL_EXPR and if so, called
	fix_builtin_array_notation_fn.

2012-01-17  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (max): New function.
	(fix_unary_array_notation_exprs): Likewise.
	(build_x_array_notation_expr): Added a check to see if we get an
	expression has a rank of 0.  Also added code to handle a case where
	a function call with array notation as a parameter that results a
	scalar value.  Also added a check if lhs_rank is zero.  Changed
	modifycode to NOP_EXPR.  Replaced all lhs_rank in for-loop conditions
	to max of lhs and rhs rank.  Added a check to see if array_expr_lhs is
	null, if so then just use lhs.
	(fix_conditional_array_notations): Renamed to fix_array_notation_exprs.
	Also added a case for POSTINCREMENT_EXPR, POSTDECREMENT_EXPR,
	PREDECREMENT_EXPR, PREINCREMENT_EXPR.
	* cp-tree.h: Renamed fix_conditional_array_notations to
	fix_array_notation_exprs.
	* parser.c (cp_parser_assignment_expression): Modified to handle a
	function-call that has array-notation as a parameter which will return
	a single scalar value.
	(cp_parser_compound_statement): Renamed fix_conditional array_notations
	to fix_array_notation_exprs and make sure it is called only if
	flag_enable_cilk is set.
	* typeck.c (lvalue_or_else): Removed a error check for
	ARRAY_NOTATION_REF, if flag_enable_cilk is defined.
	(cp_build_addr_expr_1): Likewise.

2012-01-12  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-array-notation.c (fix_conditional_array_notations): New function.
	(fix_conditional_array_notations_1): Likewise.
	* parser.c (cp_parser_compound_statement): Added a call to
	fix_conditional_array_notations.
	* cp-tree.h: Added a prototype for fix_conditional_array_notations.

2012-01-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* Make-lang.in: Added cp-array-notation.c file information.
	* cp-array-notation.c (replace_array_notations): New function.
	(find_rank): Likewise.
	(extract_array_notation_exprs): Likewise.
	(build_x_array_notation_exprs): Likewise.
	* parser.c (cp_parser_array_notation): Likewise.
	(cp_parser_nested_name_specifier_opt): Added a check to see if
	cilkplus is enabled.
	(cp_parser_postfix_open_square_expression): Added a check for CPP_COLON
	to handle array notation.
	(cp_parser_assignment_expression): Added a check for ARRAY_NOTATION_REF
	and if so, then call build_x_array_notation_expr function.
	* cp-tree.h: Added prototype for build_x_array_notation_expr.

2011-11-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (for_local_cb): Changed a const tree cast to (tree *).
	(wrapper_local_cb): Likewise.

2011-11-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* parser.c (cp_parser_userdef_char_literal): Added CALL_NORMAL
	parameter to finish_call_expr function call.
	(cp_parser_userdef_numeral_literal): Likewise.
	(cp_parser_userdef_string_literal): Likewise.

2011-10-22  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* typeck2.c (split_nonconstant_init_1): Added "CALL_NORMAL" parameter
	to build_special_member_call function.

2011-10-06  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cilk.c (cp_make_cilk_frame): Added cilk_enter_begin and
	cilk_enter_end function calls into spawn expansion.

2011-09-08  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* cp-tree.h (FOR_SCOPE): Changed FOR_STMT_CHECK to
	FOR_STMT_CHECK2.
	* cilk.c (check_incr): Added a check for variable entity name
	match, not just var.  Removed the assert to check if 1st
	operand is the variable.
	(cp_extract_for_fields): Likewise.

2011-09-07  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* parser.c (cp_parser_jump_statement): Removed "IN_CILK_FOR | " from
	  if (parser->in_statement & (IN_CILK_FOR | IN_CILK_SPAWN)).

2011-08-08  Balaji V. Iyer  <balaji.v.iyer@intel.com>

	* call.c: Added #include "cilk.h"
	(build_over_call, build_call_n, build_call_a,
	build_new_function_call, build_op_call_1, build_op_call,
	build_over_call, build_cxx_call, build_special_member_call,
	build_new_method_call_1, build_new_method_call): Added a new parameter
	called "enum call_context" to pass in whether it is a spawned function
	or not.
	* cilk.c: Added new file.
	* cp-gimpify.c (cp_gimplify_expr): Added CILK_FOR_STMT, and
	SPAWN_STMT  case statements.
	* cp-tree.def: Added "CILK_FOR_STMT"
	(lang_name_cilk): New define
	(CILK_FOR_VAR, CILK_FOR_INIT, CILK_FOR_GRAIN): Likewise.
	(FOR_INIT_STMT, FOR_COND, FOR_EXPR,FOR_BODY, FOR_SCOPE): Likewise.
	(SF_CILK_NESTED): Likewise.
	(BUILT_IN_CILK_SYNC, BUILT_IN_CILK_FRAME): Likewise.
	(BUILT_IN_CILK_DISABLE, BUILT_IN_CILK_ENABLE): Likewise.
	(BUILT_IN_CILK_CLEAN, BUILD_IN_CILK_WRITE): Likewise.
	(BUILT_IN_CILK_ACQUIRE, BUILT_IN_CILK_RELEASE): Likewise.
	(BUILT_IN_CILK_WORKER): Likewise
	(enum call_context): New enum to say the context of the
	function call.
	* decl.c (pop_label): Added a if statement to check if  flag enable
	 cilk is turned on. If so, then we exit.
	(is_cilk_function_decl): Added new function.
	(duplicate_decls): Added new if statement to see if
	flag_enable_cilk is set and if it is a is_cilk_function_decl. If so
	then we return newdecl.
	(initialize_predefined_identifiers): Added "Cilk+" element.
	(finish_function_body): Check if cfun->calls_spawns is set.
	if so, then call cp_make_cilk_frame.
	* name-lookup.c (typedef enum scope_kind): Added "sk_cilk_for" and
	"sk_cilk_block" type.
	* parser.c (cp_parser_cilk_for): Added new function.
	(cp_parser_cilk_for_init_statement): Likewise.
	(cp_parser_cilk_grainsize): Likewise.
	(cp_parser_cilk_for_condition): Likewise.
	(cp_parser_cilk_for_expression_iterator): Likewise.
	(cp_parser_simd_private): Likewise.
	(cp_parser_simd_reduction): Likewise.
	(cp_parser_simd_linear): Likewise.
	(cp_parser_simd_assert): Likewise.
	(cp_parser_simd_vectorlength): Likewise.
	(cp_parser_postfix_expression): Added new case statements
	"RID_CILK_SPAWN" to handle cilk_spawn
	(cp_parser_statement): Added new case statement
	"RID_CILK_FOR," "RID_CILK_SYNC."
	(cp_parser_jump_statement): Added new case statement.
	IN_CILK_SPAWN and IN_CILK_FOR in multiple places.
	(cp_parser_pragma): Added the following case statements:
	PRAGMA_SIMD_ASSERT, PRAGMA_SIMD_NOASSERT, PRAGMA_SIMD_VECTORLENGTH,
	PRAGMA_SIMD_PRIVATE, PRAGMA_SIMD_LINEAR, PRAGMA_SIMD_REDUCTION.
	* pt.c (lookup_template_class_1): Check if the record is cilk or
	if the template arguments are of type cilk. If so, set the appropriate
	defines.
	(tsubst_expr): Added "CILK_FOR_STMT" case statement.
	* semantics.c (finish_cilk_for_cond): Added new function.
	(finish_cilk_for_init_stmt): Likewise.
	(begin_cilk_block): Likewise.
	(finish_cilk_block): Likewise.
	(finish_sync_stmt): Likewise.
	(begin_cilk_for_stmt): Likewise.
	(finish_cilk_for_stmt): Likewise.
	(finish_cilk_for_init_stmt): Likewise.
	(finish_cilk_for_cond): Likewise.
	* Make-lang.in: Added cilk files and functions so that we can compile
	them with the gcc files.
	* tree.c (struct attribute_spec cxx_attribute table): Added "cilk"
	entry.
	(handle_cilk_linkage_attribute): New function.
	* typeck.c (cp_build_function_call, cp_build_function_call_nary):
	Added a new parameter called "enum call_context" to pass in whether
	if is a spawned function or not.
