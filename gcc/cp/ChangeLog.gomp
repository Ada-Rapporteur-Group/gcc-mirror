2015-11-11  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_clauses): Don't mark
	GOMP_MAP_FIRSTPRIVATE_POINTER decls addressable.

2015-11-05  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_target_data,
	cp_parser_omp_target_enter_data,
	cp_parser_omp_target_exit_data, cp_parser_omp_target): Allow
	GOMP_MAP_ALWAYS_POINTER and GOMP_MAP_FIRSTPRIVATE_REFERENCE.
	* semantics.c (handle_omp_array_sections): For structure element
	based array sections use GOMP_MAP_ALWAYS_POINTER instead of
	GOMP_MAP_FIRSTPRIVATE_POINTER.
	(finish_omp_clauses): Drop generic_field_head, structure
	elements are now always mapped even as array section bases,
	diagnose same var in data sharing and mapping clauses.
	For references map what they refer to using GOMP_MAP_ALWAYS_POINTER
	for structure elements and GOMP_MAP_FIRSTPRIVATE_REFERENCE
	otherwise.

2015-11-02  Ilya Verbin  <ilya.verbin@intel.com>

	* parser.c: Include context.h.
	(cp_parser_omp_declare_target): If decl has "omp declare target" or
	"omp declare target link" attribute, and cgraph or varpool node already
	exists, then set corresponding flags.

2015-10-29  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (omp_privatize_field): Add SHARED argument.
	* parser.c (cp_parser_omp_for_loop_init): Adjust omp_privatize_field
	caller.
	* pt.c (tsubst_omp_clauses): Handle non-static data members in
	shared clauses.
	(tsubst_omp_for_iterator): Adjust omp_privatize_field caller.
	* semantics.c (omp_privatize_field): Add SHARED argument, if true,
	always create artificial var and never put it into the hash table
	or vector.
	(handle_omp_array_sections_1): Adjust omp_privatize_field caller.
	(finish_omp_clauses): Likewise.  Allow non-static data members on
	shared clauses.

	* semantics.c (finish_omp_atomic): Adjust c_finish_omp_atomic
	caller.

	* parser.c (cp_parser_omp_clause_linear): Add DECLARE_SIMD argument.
	Parse parameter name as linear step as id-expression rather than
	expression.
	(cp_parser_omp_all_clauses): Adjust caller.
	* pt.c (tsubst_omp_clauses): If OMP_CLAUSE_LINEAR_VARIABLE_STRIDE,
	use tsubst_omp_clause_decl instead of tsubst_expr on
	OMP_CLAUSE_LINEAR_STEP.
	* semantics.c (finish_omp_clauses): Diagnose if linear step
	on declare simd is neither a constant nor a uniform parameter.

2015-10-26  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_target): Evaluate num_teams and
	thread_limit expressions on combined target teams before the
	target.
	* pt.c (tsubst_find_omp_teams): New function.
	(tsubst_expr): Evaluate num_teams and thread_limit expressions on
	combined target teams before the target.

2015-10-23  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (OMP_DISTRIBUTE_CLAUSE_MASK): Add lastprivate clause.

2015-10-19  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (finish_omp_for): Add ORIG_INITS argument.
	* parser.c (cp_parser_omp_for_loop_init): Add ORIG_INIT argument,
	initialize it.
	(cp_parser_omp_for_loop): Compute orig_inits, pass it's address
	to finish_omp_for.
	* pt.c (tsubst_expr): Use OMP_FOR_ORIG_DECLS for all
	OpenMP/OpenACC/Cilk+ looping constructs.  Adjust finish_omp_for
	caller.
	* semantics.c (handle_omp_for_class_iterator): Add ORIG_DECLS
	argument.  Call c_omp_check_loop_iv_exprs on cond.
	(finish_omp_for): Add ORIG_INITS argument.  Call
	c_omp_check_loop_iv_exprs on ORIG_INITS elements.  Adjust
	handle_omp_for_class_iterator caller.  Call c_omp_check_loop_iv.
	Call add_stmt.

2015-10-16  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (handle_omp_array_sections_1): Allow non-zero low-bound
	on OMP_CLAUSE_REDUCTION array sections.
	(handle_omp_array_sections): Encode low-bound into the MEM_REF,
	either into the constant offset, or for variable low-bound
	using POINTER_PLUS_EXPR.
	(finish_omp_clauses): Look through POINTER_PLUS_EXPR
	for array section reductions.

2015-10-15  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_declare_target): Call finish_omp_clauses
	in the parenthesized extended-list syntax case.  Call
	cp_parser_require_pragma_eol instead of cp_parser_skip_to_pragma_eol.
	(cp_parser_omp_end_declare_target): Call cp_parser_require_pragma_eol
	instead of cp_parser_skip_to_pragma_eol.
	* decl2.c (cplus_decl_attributes): Don't diagnose block scope vars inside
	declare target.
	* semantics.c (finish_omp_clauses): Diagnose the same var or function
	appearing multiple times on the same directive.  Fix up wording for
	the to clause if t is neither a FUNCTION_DECL nor a VAR_DECL,
	use special wording for OVERLOADs and TEMPLATE_ID_EXPR.

2015-10-14  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_schedule): Parse schedule
	modifiers, diagnose monotonic together with nonmonotonic.
	* semantics.c (finish_omp_clauses): Diagnose nonmonotonic
	modifier on kinds other than dynamic or guided or nonmonotonic
	modifier together with ordered clause.

Copyright (C) 2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
