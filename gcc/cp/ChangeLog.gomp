2018-06-19  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (OMP_TASKWAIT_CLAUSE_MASK): Define.
	(cp_parser_omp_taskwait): Handle taskwait with depend clauses.
	* pt.c (tsubst_expr): Likewise.

2018-06-13  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_iterators): New function.
	(cp_parser_omp_clause_depend): Parse iterator modifier and handle
	iterators.
	* semantics.c (handle_omp_array_sections): Handle depend clauses
	with iterators.
	(cp_omp_finish_iterators): New function.
	(finish_omp_clauses): Handle depend clauses with iterators.
	* pt.c (tsubst_omp_clause_decl): Add iterators_cache argument.
	Adjust recursive calls.  Handle iterators.
	(tsubst_omp_clauses): Adjust tsubst_omp_clause_decl callers.

2018-06-05  Jakub Jelinek  <jakub@redhat.com>

	* cp-gimplify.c (cxx_omp_predetermined_sharing_1): Don't return
	OMP_CLAUSE_DEFAULT_SHARED for const qualified decls with no mutable
	member.  Return OMP_CLAUSE_DEFAULT_FIRSTPRIVATE for this pointer.
	* semantics.c (finish_omp_clauses): Only handle static data members
	in the special case that const qualified vars may be specified in
	firstprivate clause.  Complain if const qualified vars without mutable
	members are mentioned in data-sharing clauses other than firstprivate
	or shared.

2018-06-01  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_reduction_clause): Use error_at with
	OMP_CLAUSE_LOCATION (c) as first argument instead of error.
	(finish_omp_clauses):

	* semantics.c (finish_omp_clauses): Diagnose more than one
	nontemporal clause refering to the same variable.

2018-05-31  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (OMP_ATOMIC_DEPENDENT_P): Return true also for first
	argument being OMP_CLAUSE.
	(finish_omp_atomic): Remove seq_cst argument.  Add clauses and mo
	arguments.
	* parser.c (cp_parser_omp_atomic): Parse hint and memory order clauses.
	Handle default memory order from requires directive if any.  Adjust
	finish_omp_atomic caller.
	(cp_parser_omp_critical): Allow comma in between (name) and hint
	clause.
	(cp_parser_omp_target): Set OMP_REQUIRES_TARGET_USED bit in
	omp_requires_mask.
	(cp_parser_omp_requires): New function.
	(cp_parser_pragma): Handle PRAGMA_OMP_REQUIRES.
	* pt.c (tsubst_expr) <case OMP_ATOMIC>: Call tsubst_omp_clauses
	on clauses if any, adjust finish_omp_atomic caller.  Use
	OMP_ATOMIC_MEMORY_ORDER rather than OMP_ATOMIC_SEQ_CST.
	* semantics.c (finish_omp_clauses): Use error_at rather than
	error for priority and hint clause diagnostics.  Fix pasto for
	hint clause.  Diagnose hint expression that doesn't fold into
	INTEGER_CST.
	(finish_omp_atomic): Remove seq_cst argument.  Add clauses and mo
	arguments.  Adjust c_finish_omp_atomic caller.  Stick clauses if
	any into first argument of wrapping OMP_ATOMIC.

2018-05-07  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_depend): Parse mutexinoutset kind.

2018-05-04  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Handle nontemporal clause.
	(cp_parser_omp_clause_if): Handle cancel and simd modifiers.
	(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_NONTEMPORAL.
	(OMP_SIMD_CLAUSE_MASK): Add if and nontemporal clauses.
	* semantics.c (finish_omp_clauses): Diagnose if clause with modifier
	other than cancel.
	(finish_omp_cancel): Handle OMP_CLAUSE_NONTEMPORAL.
	* pt.c (tsubst_omp_clauses): Likewise.

2018-05-03  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_defaultmap): Parse new kinds of
	defaultmap clause.

2017-06-29  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_for_cond): Allow NE_EXPR even in OpenMP
	loops.
	* pt.c (dependent_omp_for_p): Return true if class type iterator
	does not have INTEGER_CST increment.
	* semantics.c (handle_omp_for_class_iterator): Call cp_fully_fold
	on incr.
	(finish_omp_for): Adjust c_finish_omp_for caller.

2017-06-12  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Handle
	in_reduction and task_reduction clauses.
	(cp_parser_omp_var_list_no_open): Handle
	OMP_CLAUSE_IN_REDUCTION and OMP_CLAUSE_TASK_REDUCTION.
	(cp_parser_omp_clause_reduction): Add KIND argument.  Pass
	it to cp_parser_omp_var_list_no_open.
	(cp_parser_omp_clause_lastprivate): Remove unused loc argument.
	(cp_parser_oacc_all_clauses): Adjust cp_parser_omp_clause_reduction
	caller.
	(cp_parser_omp_all_clauses): Likewise.  Handle
	PRAGMA_OMP_CLAUSE_IN_REDUCTION and PRAGMA_OMP_CLAUSE_TASK_REDUCTION.
	Adjust cp_parser_omp_clause_lastprivate caller.
	(cp_parser_omp_for_loop): Handle OMP_CLAUSE_IN_REDUCTION like
	OMP_CLAUSE_REDUCTION.
	(OMP_TASK_CLAUSE_MASK): Add in_reduction clause.
	(OMP_TASKGROUP_CLAUSE_MASK): Define.
	(cp_parser_omp_taskgroup): Parse taskgroup clauses, adjust
	c_finish_omp_taskgroup caller.
	(OMP_TASKLOOP_CLAUSE_MASK): Add reduction and in_reduction clauses.
	(cp_parser_cilk_simd_all_clauses): Adjust
	cp_parser_omp_clause_reduction caller.
	* semantics.c (handle_omp_array_sections_1): Handle
	OMP_CLAUSE_{IN,TASK}_REDUCTION like OMP_CLAUSE_REDUCTION.
	(handle_omp_array_sections): Likewise.
	(finish_omp_clauses): Likewise.
	* cp-gimplify.c (cp_genericize_r): Handle OMP_CLAUSE_IN_REDUCTION
	and OMP_CLAUSE_TASK_REDUCTION.
	* pt.c (tsubst_expr): Handle clauses on OMP_TASKGROUP.

2017-05-10  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_lastprivate): New function.
	(cp_parser_omp_all_clauses): Call it for OpenMP lastprivate clause.

2017-05-09  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_var_list_no_open): For OMP_CLAUSE_DEPEND,
	parse clause operands as either an array section, or lvalue assignment
	expression.
	* semantics.c (finish_omp_clauses): Allow any lvalue as
	OMP_CLAUSE_DEPEND operand (besides array section), adjust diagnostics.

2017-05-04  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_target_data): Allow target data
	with only use_device_ptr clauses.

Copyright (C) 2017-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
