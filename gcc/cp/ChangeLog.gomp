2018-10-25  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_clauses): Don't diagnose nonmonotonic clause
	with static, runtime or auto schedule kinds.

2018-10-19  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_for_loop): Disallow ordered clause with
	argument for range-for loops.

2018-10-18  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_taskloop): Add forward declaration.
	Disallow in_reduction clause when combined with parallel master.
	(cp_parser_omp_master): Add p_name, mask and cclauses arguments.
	Allow to be called while parsing combined parallel master.
	Parse combined master taskloop{, simd}.
	(cp_parser_omp_parallel): Parse combined
	parallel master{, taskloop{, simd}} constructs.
	(cp_parser_omp_construct) <case PRAGMA_OMP_MASTER>: Adjust
	c_parser_omp_master caller.

2018-10-17  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_reduction_clause): Call save_expr for
	whole array reduction sizes.

2018-10-16  Jakub Jelinek  <jakub@redhat.com>

	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_IN_REDUCTION and
	OMP_CLAUSE_TASK_REDUCTION.
	* semantics.c (handle_omp_array_sections): Call save_expr on array
	reductions before calling build_index_type.
	(finish_omp_clauses): Diagnose nogroup clause used with reduction
	clause(s).

2018-09-27  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_reduction_clause): Don't mark
	OMP_CLAUSE_DECL addressable if it has reference type.  Do mark
	decl_placeholder addressable if needed.

2018-08-02  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_iterators): Build vector with 6 elts
	instead of 5.
	(cp_parser_omp_clause_depend): Put block into elt 5 instead of 4.
	* semantics.c (cp_omp_finish_iterators): Remove iterator if step is
	errorneous, diagnose if step doesn't have integral type.  Remember
	original step expression wrapped with save_expr and store that to
	elt 4.  If processing_template_decl, punt earlier if begin/end/step
	are type dependent expression, and only update step to the orig_step.
	* pt.c (tsubst_omp_clause_decl): Put block into elt 5 instead of 4.

2018-08-01  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_depend): Adjust parsing for
	dependence type to be no longer optional and dependence modifier
	separated from dependence type by comma rather than colon.  Parse
	depobj dependence type.
	(cp_parser_omp_depobj): Use OMP_CLAUSE_DEPEND_SOURCE instead of
	OMP_CLAUSE_DEPEND_UNSPECIFIED.
	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_DEPEND_DEPOBJ
	instead of OMP_CLAUSE_DEPEND_UNSPECIFIED, adjust diagnostics.
	* pt.c (tsubst_expr): Use OMP_CLAUSE_DEPEND_SOURCE instead of
	OMP_CLAUSE_DEPEND_UNSPECIFIED.

	* parser.c (cp_parser_omp_clause_reduction): Add IS_OMP argument,
	parse reduction modifiers.
	(cp_parser_oacc_all_clauses, cp_parser_omp_all_clauses): Adjust
	cp_parser_omp_clause_reduction callers.

2018-07-25  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (finish_omp_atomic): Add LOC argument.
	* parser.c (cp_parser_omp_atomic): Pass pragma_tok->location as
	LOC to finish_omp_atomic.
	(cp_parser_omp_single): Use SET_EXPR_LOCATION.
	(cp_parser_omp_teams): Force a BIND_EXPR with BLOCK around teams
	body.
	* semantics.c (finish_omp_atomic): Add LOC argument, pass it through
	to c_finish_omp_atomic and set it as location of OMP_ATOMIC* trees.
	* pt.c (tsubst_expr): Force a BIND_EXPR with BLOCK around teams body.
	Adjust finish_omp_atomic caller.

2018-07-18  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (cp_convert_omp_range_for, cp_finish_omp_range_for,
	finish_omp_for_block): Declare.
	* parser.c (cp_parser_for): Pass false as new is_omp argument to
	cp_parser_range_for.
	(cp_parser_range_for): Add is_omp argument, return before finalizing
	if it is true.
	(cp_convert_omp_range_for, cp_finish_omp_range_for): New functions.
	(cp_parser_omp_for_loop): Parse C++11 range for loops among omp
	loops.
	(cp_parser_omp_simd, cp_parser_omp_for, cp_parser_omp_distribute,
	cp_parser_omp_taskloop): Call keep_next_level before
	begin_omp_structured_block and call finish_omp_for_block on
	finish_omp_structured_block result.
	* semantics.c (handle_omp_for_class_iterator): Don't create a new
	TREE_LIST if one has been created already for range for, just fill
	TREE_PURPOSE and TREE_VALUE.
	(finish_omp_for): Don't check cond/incr if cond is global_namespace.
	Pass to c_omp_check_loop_iv_exprs orig_declv if non-NULL.  Don't
	use IS_EMPTY_STMT on NULL pre_body.
	(finish_omp_for_block): New function.
	* pt.c (tsubst_decomp_names): Add forward declaration.
	(tsubst_omp_for_iterator): Change orig_declv into a reference.
	Handle range for loops.  Move orig_declv handling after declv/initv
	handling.
	(tsubst_expr): Call keep_next_level before begin_omp_structured_block.
	Call cp_finish_omp_range_for for range for loops and use
	{begin,finish}_omp_structured_block instead of {push,pop}_stmt_list
	if there are any range for loops.  Call finish_omp_for_block on
	finish_omp_structured_block result.
	(dependent_omp_for_p): Always return true for range for loops if
	processing_template_decl.

2018-06-28  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_var_list_no_open): Fix up depend clause
	error recovery.
	(cp_parser_omp_iterators): Return error_mark_node instead of NULL.
	(cp_parser_omp_clause_depend): Make dependence-type optional.
	(cp_parser_omp_depobj): New function.
	(cp_parser_pragma): Handle PRAGMA_OMP_DEPOBJ.
	* cp-tree.h (OMP_DEPOBJ_DEPOBJ, OMP_DEPOBJ_CLAUSES): Define.
	(finish_omp_depobj): Declare.
	* cp-tree.def (OMP_DEPOBJ): New tree code.
	* semantics.c (finish_omp_clauses): Handle depend clause with
	OMP_CLAUSE_DEPEND_UNSPECIFIED.  Diagnose bit-fields.  Require
	omp_depend_t type for OMP_CLAUSE_DEPEND_UNSPECIFIED kinds and
	some different type for other kinds.  Use cp_build_addr_expr
	and cp_build_indirect_ref instead of cxx_mark_addressable.
	(finish_omp_depobj): New function.
	* pt.c (tsubst_expr): Handle OMP_DEPOBJ.
	* cp-objcp-common.c (cp_common_init_ts): Likewise.
	* constexpr.c (potential_constant_expression_1): Likewise.
	* lex.c (cxx_init): Likewise.
	* dump.c (cp_dump_tree): Likewise.
	* cxx-pretty-print.c (cxx_pretty_printer::statement): Likewise.

2018-06-19  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (finish_omp_flush): Add MO argument.
	* parser.c: Include memmodel.h.
	(cp_parser_omp_flush): Parse flush with memory-order-clause.
	* semantics.c (finish_omp_flush): Add MO argument, if not
	MEMMODEL_LAST, emit __atomic_thread_fence call with the given value.

	* parser.c (OMP_TASKWAIT_CLAUSE_MASK): Define.
	(cp_parser_omp_taskwait): Handle taskwait with depend clauses.
	* pt.c (tsubst_expr): Likewise.

2018-06-13  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_iterators): New function.
	(cp_parser_omp_clause_depend): Parse iterator modifier and handle
	iterators.
	* semantics.c (handle_omp_array_sections): Handle depend clauses
	with iterators.
	(cp_omp_finish_iterators): New function.
	(finish_omp_clauses): Handle depend clauses with iterators.
	* pt.c (tsubst_omp_clause_decl): Add iterators_cache argument.
	Adjust recursive calls.  Handle iterators.
	(tsubst_omp_clauses): Adjust tsubst_omp_clause_decl callers.

2018-06-05  Jakub Jelinek  <jakub@redhat.com>

	* cp-gimplify.c (cxx_omp_predetermined_sharing_1): Don't return
	OMP_CLAUSE_DEFAULT_SHARED for const qualified decls with no mutable
	member.  Return OMP_CLAUSE_DEFAULT_FIRSTPRIVATE for this pointer.
	* semantics.c (finish_omp_clauses): Only handle static data members
	in the special case that const qualified vars may be specified in
	firstprivate clause.  Complain if const qualified vars without mutable
	members are mentioned in data-sharing clauses other than firstprivate
	or shared.

2018-06-01  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_reduction_clause): Use error_at with
	OMP_CLAUSE_LOCATION (c) as first argument instead of error.
	(finish_omp_clauses):

	* semantics.c (finish_omp_clauses): Diagnose more than one
	nontemporal clause refering to the same variable.

2018-05-31  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (OMP_ATOMIC_DEPENDENT_P): Return true also for first
	argument being OMP_CLAUSE.
	(finish_omp_atomic): Remove seq_cst argument.  Add clauses and mo
	arguments.
	* parser.c (cp_parser_omp_atomic): Parse hint and memory order clauses.
	Handle default memory order from requires directive if any.  Adjust
	finish_omp_atomic caller.
	(cp_parser_omp_critical): Allow comma in between (name) and hint
	clause.
	(cp_parser_omp_target): Set OMP_REQUIRES_TARGET_USED bit in
	omp_requires_mask.
	(cp_parser_omp_requires): New function.
	(cp_parser_pragma): Handle PRAGMA_OMP_REQUIRES.
	* pt.c (tsubst_expr) <case OMP_ATOMIC>: Call tsubst_omp_clauses
	on clauses if any, adjust finish_omp_atomic caller.  Use
	OMP_ATOMIC_MEMORY_ORDER rather than OMP_ATOMIC_SEQ_CST.
	* semantics.c (finish_omp_clauses): Use error_at rather than
	error for priority and hint clause diagnostics.  Fix pasto for
	hint clause.  Diagnose hint expression that doesn't fold into
	INTEGER_CST.
	(finish_omp_atomic): Remove seq_cst argument.  Add clauses and mo
	arguments.  Adjust c_finish_omp_atomic caller.  Stick clauses if
	any into first argument of wrapping OMP_ATOMIC.

2018-05-07  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_depend): Parse mutexinoutset kind.

2018-05-04  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Handle nontemporal clause.
	(cp_parser_omp_clause_if): Handle cancel and simd modifiers.
	(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_NONTEMPORAL.
	(OMP_SIMD_CLAUSE_MASK): Add if and nontemporal clauses.
	* semantics.c (finish_omp_clauses): Diagnose if clause with modifier
	other than cancel.
	(finish_omp_cancel): Handle OMP_CLAUSE_NONTEMPORAL.
	* pt.c (tsubst_omp_clauses): Likewise.

2018-05-03  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_defaultmap): Parse new kinds of
	defaultmap clause.

2017-06-29  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_for_cond): Allow NE_EXPR even in OpenMP
	loops.
	* pt.c (dependent_omp_for_p): Return true if class type iterator
	does not have INTEGER_CST increment.
	* semantics.c (handle_omp_for_class_iterator): Call cp_fully_fold
	on incr.
	(finish_omp_for): Adjust c_finish_omp_for caller.

2017-06-12  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Handle
	in_reduction and task_reduction clauses.
	(cp_parser_omp_var_list_no_open): Handle
	OMP_CLAUSE_IN_REDUCTION and OMP_CLAUSE_TASK_REDUCTION.
	(cp_parser_omp_clause_reduction): Add KIND argument.  Pass
	it to cp_parser_omp_var_list_no_open.
	(cp_parser_omp_clause_lastprivate): Remove unused loc argument.
	(cp_parser_oacc_all_clauses): Adjust cp_parser_omp_clause_reduction
	caller.
	(cp_parser_omp_all_clauses): Likewise.  Handle
	PRAGMA_OMP_CLAUSE_IN_REDUCTION and PRAGMA_OMP_CLAUSE_TASK_REDUCTION.
	Adjust cp_parser_omp_clause_lastprivate caller.
	(cp_parser_omp_for_loop): Handle OMP_CLAUSE_IN_REDUCTION like
	OMP_CLAUSE_REDUCTION.
	(OMP_TASK_CLAUSE_MASK): Add in_reduction clause.
	(OMP_TASKGROUP_CLAUSE_MASK): Define.
	(cp_parser_omp_taskgroup): Parse taskgroup clauses, adjust
	c_finish_omp_taskgroup caller.
	(OMP_TASKLOOP_CLAUSE_MASK): Add reduction and in_reduction clauses.
	(cp_parser_cilk_simd_all_clauses): Adjust
	cp_parser_omp_clause_reduction caller.
	* semantics.c (handle_omp_array_sections_1): Handle
	OMP_CLAUSE_{IN,TASK}_REDUCTION like OMP_CLAUSE_REDUCTION.
	(handle_omp_array_sections): Likewise.
	(finish_omp_clauses): Likewise.
	* cp-gimplify.c (cp_genericize_r): Handle OMP_CLAUSE_IN_REDUCTION
	and OMP_CLAUSE_TASK_REDUCTION.
	* pt.c (tsubst_expr): Handle clauses on OMP_TASKGROUP.

2017-05-10  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_lastprivate): New function.
	(cp_parser_omp_all_clauses): Call it for OpenMP lastprivate clause.

2017-05-09  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_var_list_no_open): For OMP_CLAUSE_DEPEND,
	parse clause operands as either an array section, or lvalue assignment
	expression.
	* semantics.c (finish_omp_clauses): Allow any lvalue as
	OMP_CLAUSE_DEPEND operand (besides array section), adjust diagnostics.

2017-05-04  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_target_data): Allow target data
	with only use_device_ptr clauses.

Copyright (C) 2017-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
