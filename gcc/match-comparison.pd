/* Simplify X * C1 CMP 0 to X CMP 0 if C1 is not zero.  */
(for op in lt le eq ne ge gt
  (simplify
    (op (mult @0 INTEGER_CST@1) integer_zerop@2)
    /* In fold-const.c we have this and the following pattern
       combined because there we can "compute" the operator
       to use by using swap_tree_comparison.  Here we manage
       to use only two patterns by swapping the operands instead
       of changing the comparison code.  */
    (if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))
         && tree_int_cst_sgn (@1) > 0))
    (op @0 @2))
  (simplify
    (op (mult @0 INTEGER_CST@1) integer_zerop@2)
    (if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))
         && tree_int_cst_sgn (@1) < 0))
    (op @2 @0)))

