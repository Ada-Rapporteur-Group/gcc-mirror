/* match-and-simplify patterns for simplify_bitwise_binary
   Copyright (C) 2014 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */

/* TODO bitwise patterns:
1] x & x -> x
2] x & 0 -> 0
3] x & -1 -> x
4] x & ~x -> 0
5] ~x & ~y -> ~(x | y)
6] ~x | ~y -> ~(x & y)
7] x & (~x | y) -> y & x
8] (x | CST1) & CST2  ->  (x & CST2) | (CST1 & CST2)
9] x ^ x -> 0
10] x ^ ~0 -> ~x
11] (x | y) & x -> x
12] (x & y) | x -> x
13] (~x | y) & x -> x & y
14] (~x & y) | x -> x | y
15] ((a & b) & ~a) & ~b -> 0
16] ~~x -> x
*/

/* x & x -> x */
(simplify
  (bit_and integral_op_p@0 @0)
  @0)

/* x & ~x -> 0 */
(simplify
  (bit_and:c integral_op_p@0 (bit_not @0))
  { build_int_cst (type, 0); })

/* ~x & ~y -> ~(x | y) */
(simplify
  (bit_and (bit_not integral_op_p@0) (bit_not @1))
  (bit_not (bit_ior @0 @1)))

/* ~x | ~y -> ~(x & y) */
(simplify
  (bit_ior (bit_not integral_op_p@0) (bit_not @1))
  (bit_not (bit_and @0 @1)))

/* x & (~x | y) -> y & x */
(simplify
  (bit_and:c integral_op_p@0 (bit_ior:c (bit_not @0) @1))
  (bit_and @1 @0))

/* (x | CST1) & CST2 -> (x & CST2) | (CST1 & CST2) */
(simplify
  (bit_and (bit_ior integral_op_p@0 INTEGER_CST_P@1) INTEGER_CST_P@2)
  (bit_ior (bit_and @0 @2) (bit_and @1 @2)))

/* x ^ ~0 -> ~x */
(simplify
  (bit_xor @0 integer_all_onesp@1)
  (bit_not @0))

/* (x | y) & x -> x */
(simplify
  (bit_and:c (bit_ior integral_op_p@0 @1) @0)
  @0)

/* (x & y) | x -> x */
(simplify
  (bit_ior:c (bit_and integral_op_p@0 @1) @0)
  @0)

/* (~x | y) & x -> x & y */
(simplify
  (bit_and:c (bit_ior:c (bit_not integral_op_p@0) @1) @0)
  (bit_and @0 @1))

/* (~x & y) | x -> x | y */
(simplify
  (bit_ior:c (bit_and:c (bit_not integral_op_p@0) @1) @0)
  (bit_ior @0 @1))

/* ~~x -> x */
(simplify
  (bit_not (bit_not integral_op_p@0))
  @0)

/* ((a & b) & ~a) -> 0 */
(simplify
  (bit_and:c (bit_and integral_op_p@0 @1) (bit_not @0))
  { build_int_cst (type, 0); })
