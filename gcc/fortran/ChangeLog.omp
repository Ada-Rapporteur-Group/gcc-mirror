2023-03-23  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_has_alloc_comps): Add 'bool
	shallow_alloc_only=false' arg.
	(gfc_omp_replace_alloc_by_to_mapping): New, call it.
	(gfc_omp_deep_map_kind_p): Return 'true' also for '(present,)alloc'.
	(gfc_omp_deep_mapping_item, gfc_omp_deep_mapping_do): On map entering,
	replace shallowly 'alloc'/'from' by '(from)to' mapping if there are
	allocatable components.

2023-03-23  Tobias Burnus  <tobias@codesourcery.com>

	* class.cc (generate_callback_wrapper): Add attr.class_ok check.
	* resolve.cc (resolve_fl_derived): Likewise.

2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Ensure DT struct-comp with
	array descriptor and 'alloc:' have the descriptor mapped with 'to:'.

2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses): Apply to OpenMP target update.

2023-11-19  Tobias Burnus  <tobias@codesourcery.com>
	    Chung-Lin Tang <cltang@codesourcery.com>

	* trans-array.cc (gfc_conv_array_initializer): Set PURPOSE
	when building constructor for get_initialized_tmp_var.
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle uses_allocators.
	* types.def (BT_FN_VOID_PTRMODE, BT_FN_PTRMODE_PTRMODE_INT_PTR): Add.

2022-05-12  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (gfc_scalar_elemental_arg_saved_as_reference):
	Return true for attr.proc_pointer expressions.

2022-04-27  Tobias Burnus <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Remove
	gfc_resolve_finalizers calls, use gfc_is_finalizable.
	(resolve_fl_derived): Resolve derived-type components
	first.

2022-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Also resolve allocatable comps.

2022-03-01  Tobias Burnus  <tobias@codesourcery.com>

	* class.cc (finalization_scalarizer): Mark syms as artificial.
	(generate_callback_wrapper): New.
	(gfc_find_derived_vtab): Call it, add _callback comp.
	* f95-lang.cc (LANG_HOOKS_OMP_DEEP_MAPPING,
	LANG_HOOKS_OMP_DEEP_MAPPING_P,
	LANG_HOOKS_OMP_DEEP_MAPPING_CNT): Redeinfe
	* gfortran.h (gfc_import_iso_c_binding_module,
	GFC_CLASS_CALLBACK_DEFAULT_FLAG, GFC_CLASS_CALLBACK_VTABLE_FLAG,
	GFC_CLASS_CB_ALLOCATABLE, GFC_CLASS_CB_POINTER,
	GFC_CLASS_CB_PROC_POINTER, GFC_CLASS_CB_VTABLE,
	GFC_CLASS_CB_VPTR): New.
	* match.cc (select_type_set_tmp): Propagate allocatable property.
	* module.cc (MOD_VERSION): Bump due to vtab change.
	(import_iso_c_binding_module): New import_all arg.
	(gfc_import_iso_c_binding_module): New.
	(gfc_use_module): Update call.
	* openmp.cc (resolve_omp_clauses): Accept DT with alloc comps.
	* resolve.cc (gfc_resolve_formal_arglist, gfc_resolve_intrinsic,
	resolve_fl_procedure, resolve_types): Permit some violations
	for internal code.
	* trans-array.cc (gfc_conv_descriptor_stride_get,
	gfc_tree_array_size, gfc_full_array_size): Update
	for GFC_TYPE_ARRAY_AKIND change.
	(gfc_conv_expr_descriptor): Likewise; permit calling with tree code.
	* trans-expr.cc (VTABLE_CALLBACK_FIELD): Add.
	(VTAB_GET_FIELD_GEN): Use it.
	(VTABLE_DEALLOCATE_FIELD): Undef at the end.
	(gfc_conv_expr_reference): Fixes; avoid unneccessary temp var.
	* trans-intrinsic.cc (gfc_conv_intrinsic_sizeof,
	gfc_conv_associated): Fix class and comp-ref handling.
	(conv_isocbinding_function): Remove buggy code.
	* trans-openmp.ccc (gfc_has_alloc_comps): Add ptr_ok arg.
	(gfc_omp_private_outer_ref, gfc_walk_alloc_comps,
	gfc_omp_clause_default_ctor, gfc_omp_clause_copy_ctor,
	gfc_omp_clause_assign_op, gfc_omp_clause_dtor,
	(gfc_omp_finish_clause): Update call.
	(GFC_MAP_TOKEN_DATA, GFC_MAP_TOKEN_SIZES, GFC_MAP_TOKEN_KINDS,
	GFC_MAP_TOKEN_DATA_OFFSET, GFC_MAP_TOKEN_OFFSET,
	GFC_MAP_TOKEN_FLAGS, GFC_MAP_TOKEN_DETACH): Define.
	(gfc_omp_get_token_data, gfc_omp_get_token_sizes,
	gfc_omp_get_token_kinds, gfc_omp_get_token_offset_data,
	gfc_omp_get_token_offset, gfc_omp_get_token_flags,
	gfc_omp_get_token_detach, gfc_omp_get_map_token_type,
	gfc_omp_get_cb_type, gfc_omp_gen_deep_map_fn,
	gfc_omp_deep_mapping_map, gfc_omp_deep_mapping_item,
	gfc_omp_deep_mapping_comps, gfc_omp_gen_simple_loop,
	gfc_omp_get_array_size, gfc_omp_elmental_loop,
	gfc_omp_deep_map_kind_p, gfc_omp_deep_mapping_int_p,
	gfc_omp_deep_mapping_p, gfc_omp_deep_mapping_do),
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New.
	(gfc_trans_omp_array_section): Save clause decl to survive gimplifying.
	(gfc_trans_omp_clauses): Likewise; fixes.
	* trans-types.cc (gfc_build_array_type, gfc_get_derived_type,
	gfc_get_array_descr_info): Update array kind to distinguish
	different assumed-rank arrays.
	* trans.h (gfc_class_vtab_callback_get, gfc_omp_deep_mapping_p,
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New prototypes.
	(enum gfc_array_kind): Additional GFC_ARRAY_ASSUMED_RANK_* entries.

2020-02-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.ccc (gfc_omp_check_optional_argument): Handle non-decl
	case.

2018-10-04  Cesar Philippidis  <cesar@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>

	* gfortran.h (enum gfc_omp_map_op): Add OMP_MAP_DECLARE_ALLOCATE,
	OMP_MAP_DECLARE_DEALLOCATE.
	(gfc_omp_clauses): Add update_allocatable.
	* trans-array.c (gfc_array_allocate): Call
	gfc_trans_oacc_declare_allocate for decls that have oacc_declare_create
	attribute set.
	* trans-decl.c (find_module_oacc_declare_clauses): Relax oacc_declare_create to
	OMP_MAP_ALLOC, and oacc_declare_copyin to OMP_MAP_TO, in order to
	match OpenACC 2.5 semantics.
	* trans-openmp.c (gfc_trans_omp_clauses): Use GOMP_MAP_ALWAYS_POINTER
	(for update directive) or GOMP_MAP_FIRSTPRIVATE_POINTER (otherwise) for
	allocatable scalar decls.  Handle OMP_MAP_DECLARE_{ALLOCATE,DEALLOCATE}
	clauses.
	(gfc_trans_oacc_executable_directive): Use GOMP_MAP_ALWAYS_POINTER
	for allocatable scalar data clauses inside acc update directives.
	(gfc_trans_oacc_declare_allocate): New function.
	* trans-stmt.c (gfc_trans_allocate): Call
	gfc_trans_oacc_declare_allocate for decls with oacc_declare_create
	attribute set.
	(gfc_trans_deallocate): Likewise.
	* trans.h (gfc_trans_oacc_declare_allocate): Declare.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* openmp.cc (oacc_is_parallel): New.
	(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC
	gang reductions.
	* trans-openmp.ccc (gfc_omp_clause_copy_ctor): Permit reductions.

2018-06-29  Cesar Philippidis  <cesar@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* openmp.cc (resolve_positive_int_expr): Promote the warning to an
	error.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* f95-lang.cc (DEF_FUNCTION_TYPE_VAR_5): New symbol.
	* types.def (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_VAR): New type.
