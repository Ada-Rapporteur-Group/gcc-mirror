[+ AutoGen5 template -*- Mode: Shell-script -*-
sh
+][+COMMENT use 'autogen --trace=everything melt-build-script.def' to debug this
  See http://www.gnu.org/software/autogen/
+]#!/bin/bash
[+ (. (dne "#@#@# " "#@! ")) +]
# Generated shell script for MELT modules and MELT translator bootstrap
#   Copyright (C) 2012  Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#@ [+ (. (tpl-file-line))+] generated by Autogen [+ (. autogen-version)+] using [+ (.(def-file))+]

[+(. (define comefromcount 0))+]
[+(. (define (fromline) (set! comefromcount (+ comefromcount 1)) 
	(sprintf "%s/%d" (tpl-file-line "%s:%d") comefromcount)
	))+]

## source the parameters  [+(.(fromline))+]
. ./melt-build-param.sh

export GAWK=${GAWK:=gawk}

## our error function  [+(.(fromline))+]
function meltbuild_error () {
    echo MELT BUILD SCRIPT FAILURE: $@ > /dev/stderr
    exit 1
}

## symbolic linking
function meltbuild_symlink () {
    ln -svf `realpath $1` $2
}

## our info function
function meltbuild_info () {
    echo MELT BUILD SCRIPT INFO: $@ > /dev/stderr
}

function meltbuild_emit () {
    local meltfrom=$1
    local meltmode=$2
    local meltoutput=$3
    local meltsource=$4
    local meltinit=$5
}

GCCMELT_ZERO_FLAVOR=${GCCMELT_STAGE_ZERO#melt-stage0-}

## The base name of the MELT translator files [+ (. (fromline))+]
GCCMELT_TRANSLATOR_BASE=([+FOR melt_translator_file " \\\n"+]  [+base+][+ENDFOR melt_translator_file+] )

case $GCCMELT_ZERO_FLAVOR in
    optimized) ;;
    dynamic) ;;
    debugnoline) ;;
    quicklybuilt) ;;
    *) meltbuild_error  [+(.(fromline))+] bad zero flavor $GCCMELT_ZERO_FLAVOR ;;
esac

[ -d melt-workdir ] || mkdir  melt-workdir

## our stage0 [+(.(fromline))+]

[ -d $GCCMELT_STAGE_ZERO ] || mkdir  $GCCMELT_STAGE_ZERO


[+FOR melt_translator_file+]
meltbuild_info making stage0 [+base+]  [+(.(fromline))+]

##  stage0 [+(.(fromline))+] symlink descriptor file [+base+]
if ! -f "$GCCMELT_STAGE_ZERO/[+base+]+meltdesc.c" ; then
    meltbuild_symlink $GCCMELT_MELTSOURCEDIR/generated/[+base+]+meltdesc.c $GCCMELT_STAGE_ZERO/ 
fi

##  stage0 [+(.(fromline))+] symlink source code [+base+]
if ! -f "$GCCMELT_STAGE_ZERO/[+base+].c" ; then
    meltbuild_symlink $GCCMELT_MELTSOURCEDIR/generated/[+base+].c $GCCMELT_STAGE_ZERO/ 
    for f in $GCCMELT_MELTSOURCEDIR/generated/[+base+]+[0-9]*.c ; do
	meltbuild_symlink $f $GCCMELT_STAGE_ZERO/ 
    done
fi

##  stage0 [+(.(fromline))+] symlink stamp [+base+]
if ! -f "$GCCMELT_STAGE_ZERO/[+base+]+melttime.h" ; then
    meltbuild_symlink $GCCMELT_MELTSOURCEDIR/generated/[+base+]+melttime.h $GCCMELT_STAGE_ZERO/ 
fi

MELT_ZERO_GENERATED_[+varsuf+]_CUMULMD5=$($GAWK -F\" '/extern/{next} /melt_cumulated_hexmd5/{print $2}' $GCCMELT_MELTSOURCEDIR/generated/[+base+]+meltdesc.c)

$GCCMELT_MAKE -f $GCCMELT_MODULE_MK melt_module \
   GCCMELT_FROM=[+(.(fromline))+] \
   GCCMELT_MODULE_WORKSPACE=melt-workdir \
   GCCMELT_MODULE_FLAVOR=$GCCMELT_ZERO_FLAVOR \
   GCCMELT_CFLAGS="$GCCMELT_COMPILER_FLAGS" \
   GCCMELT_MODULE_SOURCEBASE=$GCCMELT_MELTSOURCEDIR/generated/[+base+] \
   GCCMELT_CUMULATED_MD5=$MELT_ZERO_GENERATED_[+varsuf+]_CUMULMD5 \
   GCCMELT_MODULE_BINARYBASE=$GCCMELT_STAGE_ZERO/[+base+] \
 || meltbuild_error  [+(.(fromline))+] stage0 [+base+] did not build

meltbuild_info [+(.(fromline))+] successfully build stage0 [+base+]

[+ENDFOR melt_translator_file+]


################################################################
################################################################
#################@ before our stages [+(.(fromline))+] 


[+FOR melt_stage+]
#@  begin for [+melt_stage+] [+(.(fromline))+]

[ -d [+melt_stage+] ] || mkdir [+melt_stage+]

#### rules for [+melt_stage+][+ 
  (define stageindex (+ 1 (for-index)))
  (define previndex (for-index))
  (define prevstage (if (> stageindex 1) (sprintf "meltbuild-stage%d" previndex) "$(MELT_STAGE_ZERO)"))
  (define prevflavor (if (> stageindex 1) "quicklybuilt" "$(MELT_ZERO_FLAVOR)"))
+], previous [+ (. prevstage)+] [+(.(fromline))+]

[+FOR melt_translator_file+][+ 
  (define outbase (get "base")) (define outindex (for-index)) +]

### the C source of [+melt_stage+] for [+ (. outbase)+] [+ (. (fromline))+]
#@ [+(.(fromline))+] base [+base+] stage [+melt_stage+] prevstage [+ (. prevstage)+] prevflavor  [+ (. prevflavor)+] 

meltbuild_emit [+(.(fromline))+] 
#@ [+(.(fromline))+] end base [+base+] stage [+melt_stage+] 
[+ENDFOR melt_translator_file+]


########@  end for [+melt_stage+] [+ (. (fromline))+]
[+ENDFOR melt_stage+]


################
meltbuild_info [+(.(fromline))+] successfully done
#@ eof [+(.(fromline))+] end of generated melt-build-script.sh
