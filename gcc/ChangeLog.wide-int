	* alias.c
	(ao_ref_from_mem): Update to use wide-int.
	(rtx_equal_for_memref_p): Update comment.
	(adjust_offset_for_component_ref): Update to use wide-int.
	* builtins.c
	(get_object_alignment_2): Update to use wide-int.
	(c_readstr): Likewise.
	(target_char_cast): Add comment.
	(determine_block_size): Update to use wide-int.
	(expand_builtin_signbit): Likewise.
	(fold_builtin_int_roundingfn): Likewise.
	(fold_builtin_bitop): Likewise.
	(fold_builtin_bswap): Likewise.
	(fold_builtin_logarithm): Update to use signop.
	(fold_builtin_pow): Likewise.
	(fold_builtin_powi): Update to use tree_to_shwi.
	(fold_builtin_memory_op): Update to use wide-int.
	(fold_builtin_object_size): Likewise.
	* cfgloop.c
	(alloc_loop): Initialize nb_iterations_upper_bound and
	nb_iterations_estimate.
	(record_niter_bound): Update to use wide-int.
	(get_estimated_loop_iterations_int): Likewise.
	(get_estimated_loop_iterations): Likewise.
	(get_max_loop_iterations): Likewise.
	* cfgloop.h
	(struct nb_iter_bound): Change bound to widest_int.
	(struct loop): Change nb_iterations_upper_bound and
	nb_iterations_estimate to widest_int.
	(record_niter_bound): Switch to use widest_int.
	(get_estimated_loop_iterations): Likewise.
	(get_max_loop_iterations): Likewise.
	(gcov_type_to_double_int): Rename to gcov_type_to_wide_int and
	update for wide-int.
	* cgraph.c
	(cgraph_add_thunk): Update to use wide-int.
	* combine.c
	(try_combine): Update to use wide-int.
	(subst) : Likewise.
	* config/aarch64/aarch64.c
	(aapcs_vfp_sub_candidate): Update to use wi::.
	(aarch64_float_const_representable_p): Update to use wide_int.
	* config/arc/arc.c
	(arc_can_use_doloop_p): Update to use widest_int and wi::.
	* config/arm/arm.c
	(aapcs_vfp_sub_candidate): Update to use wi::.
	(vfp3_const_double_index): Usdate to use wide_int.
	* config/avr/avr.c
	(avr_out_round): Update to use wide-int.
	(avr_fold_builtin): Likewise.
	* config/bfin/bfin.c
	(bfin_local_alignment): Update to use wi::.
	(bfin_can_use_doloop_p): Update to use widest_int and wi::.
	* config/darwin.c
	(darwin_mergeable_constant_section): Update to use wi::.
	(machopic_select_rtx_section): Update to handle CONST_WIDE_INT.
	* config/epiphany/epiphany.c
	(epiphany_special_round_type_align): Update to use tree_to_uhwi.
	* config/i386/i386.c
	(ix86_data_alignment): Update to use wi::.
	(ix86_local_alignment): Update to use wi::.
	(ix86_emit_swsqrtsf): Update real_from_integer.
	* config/msp430/msp430.c
	(msp430_attr): Update to use wi::.
	* config/nds32/nds32.c
	(nds32_insert_attributes): Update to use wi::.
	* config/rs6000/predicates.md
	(any_operand): Add const_wide_int.
	(zero_constant): Likewise.
	(non_logical_cint_operand): Likewise.
	(input_operand): Likewise.
	(splat_input_operand): Likewise.
	* config/rs6000/rs6000.c
	(num_insns_constant): Handle CONST_WIDE_INT.
	(easy_altivec_constant): Update comment.
	(paired_expand_vector_init): Update to use CONSTANT_P.
	(rs6000_legitimize_address): Handle CONST_WIDE_INT.
	(rs6000_emit_move): Update checks.
	(rs6000_aggregate_candidate): Update to use wi::.
	(rs6000_expand_ternop_builtin): Update to use TREE_INT_CST_ELT.
	(rs6000_output_move_128bit): Handle CONST_WIDE_INT.
	(rs6000_assemble_integer): Likewise.
	(rs6000_hash_constant): Likewise.
	(output_toc): Likewise.
	(rs6000_rtx_costs): Likewise.
	(rs6000_emit_swrsqrt); Update real_from_integer.
	* config/rs6000/rs6000-c.c
	(altivec_resolve_overloaded_builtin): Update to use wi::.
	* config/rs6000/rs6000.h
	(TARGET_SUPPORTS_WIDE_INT): Add.
	* config/rs6000/rs6000.md
	Update to use const_scalar_int_operand.  Handle CONST_WIDE_INT.
	* config/sol2-c.c
	(solaris_pragma_align): Update to use cst_fits_uhwi_p.
	* config/sparc/sparc.c
	(sparc_fold_builtin): Update to use wide_int and wi::.
	* config/vax/vax.c
	(vax_float_literal): Update to use real_from_integer.
	* coretypes.h
	(struct hwivec_def): Add.
	(hwivec): Add.
	(const_hwivec): Add.
	* cse.c
	(hash_rtx_cb): Handle CONST_WIDE_INT.
	(equiv_constant): Handle CONST_WIDE_INT.
	* cselib.c
	(rtx_equal_for_cselib_1): Use CASE_CONST_UNIQUE.
	(cselib_hash_rtx): Handle CONST_WIDE_INT.
	* dbxout.c
	(stabstr_U): Update to use wide-int.
	(dbxout_type): Update to use cst_fits_shwi_p.
	* defaults.h
	(TARGET_SUPPORTS_WIDE_INT): Add default.
	* dfp.c
	(decimal_real_to_integer2): Update to use wide-int and rename to
	decimal_real_to_integer.
	* dfp.h
	(decimal_real_to_integer2): Remove.
	* doc/generic.texi
	(Constant expressions): Update for wide-int.
AUDIT, fix TREE_INT_CST_LOW and friends doc
	* doc/rtl.texi
	(const_double): Update for wide-int.
	(const_wide_int, CONST_WIDE_INT, CONST_WIDE_INT_VEC): New.
	(CONST_WIDE_INT_NUNITS, CONST_WIDE_INT_ELT): New.
	* doc/tm.texi.in
	(REAL_VALUE_TO_INT): Remove.
	(REAL_VALUE_FROM_INT): Remove.
	(TARGET_CAN_USE_DOLOOP_P): Use widest_int instead of double_int.
	(TARGET_SUPPORTS_WIDE_INT): Add.
	* doc/tm.texi: Regenerate.
	* dojump.c
	(prefer_and_bit_test): Update to use wide-int.
	* double-int.h (struct wi::int_traits): Add.
	* dwarf2out.c
	(get_full_len): Add.
	(dw_val_equal_p): Add case dw_val_class_wide_int.
	(size_of_loc_descr): Add case dw_val_class_wide_int.
	(output_loc_operands): Add case dw_val_class_wide_int.
	(output_loc_operands): Add case dw_val_class_wide_int.
	(insert_double): Remove.
	(insert_wide_int): Add.
	(add_AT_wide): Add.
	(print_die): Add case dw_val_class_wide_int.
	(attr_checksum): Add case dw_val_class_wide_int.
	(attr_checksum_ordered): Add case dw_val_class_wide_int.
	(same_dw_val_p): Add case dw_val_class_wide_int.
	(size_of_die): Add case dw_val_class_wide_int.
	(value_format): Add case dw_val_class_wide_int.
	(output_die): Add case dw_val_class_wide_int.
	(double_int_type_size_in_bits): Rename to
	offset_int_type_size_in_bits.  Use wide-int.
	(clz_loc_descriptor): Update to use wide-int.
	(mem_loc_descriptor): Likewise.  Handle CONST_WIDE_INT.
	(loc_descriptor): Update to use wide-int. Handle CONST_WIDE_INT.
	(round_up_to_align): Update to use wide-int.
	(field_byte_offset): Likewise.
	(insert_double): Rename to insert_wide_int.  Update to use wide-int.
	(add_const_value_attribute): Handle CONST_WIDE_INT.  Update
	CONST_DOUBLE handling.  Update to use wide-int.
	(add_bound_info): Update to use wide-int.
	(gen_enumeration_type_die): Use add_AT_wide.
	(hash_loc_operands): Add case dw_val_class_wide_int.
	(compare_loc_operands): Add case dw_val_class_wide_int.
	* dwarf2out.h
	(wide_int_ptr): Add.
	(dw_val_class): Add dw_val_class_wide_int.
	(struct dw_val_struct): Add val_wide.
	* emit-rtl.c
	(const_wide_int_htab): Add.
	(const_wide_int_htab_hash): Add.
	(const_wide_int_htab_eq): Add.
	(lookup_const_wide_int): Add.
	(const_double_htab_hash): Update for wide-int.
	(const_double_htab_eq): Likewise.
	(rtx_to_double_int): Conditionally compile for wide-int.
	(lookup_const_wide_int): Add.
	(immed_double_int_const): Rename to immed_wide_int_const and
	update for wide-int.
	(immed_double_const): Conditionally compile for wide-int.
	(init_emit_once): Update for wide-int.
	* explow.c
	(plus_constant): Update for wide-int.
	* expmed.c
	(mask_rtx): Update for wide-int.
	(lshift_value): Likewise.
	(expand_mult): Likewise.
	(choose_multiplier): Likewise.
	(expand_smod_pow2): Likewise.
	(make_tree): Likewise.
	* expr.c
	(convert_modes): Update for wide-int.
	(emit_group_load_1): Add note.
	(store_expr): Update comment.
	(get_inner_reference): Update for wide-int.
	(expand_constructor): Update comment.
	(expand_expr_real_2): Update for wide-int.
	(expand_expr_real_1): Likewise.
	(reduce_to_bit_field_precision): Likewise.
	(const_vector_from_tree): Likewise.
	* final.c
	(output_addr_const): Handle CONST_WIDE_INT.  Update for wide-int.
	* fixed-value.c
	(fixed_from_string): Update for wide-int.
	(fixed_to_decimal): Likewise.
	(fixed_convert_from_real): Likewise.
	(real_convert_from_fixed): Likewise.
	* fold-const.c
	(div_if_zero_remainder): Update for wide-int.
	(may_negate_without_overflow_p): Likewise.
	(negate_expr_p): Likewise.
	(fold_negate_expr): Likewise.
	(int_const_binop_1): Likewise.
	(const_binop): Likewise.
	(fold_convert_const_int_from_int): Likewise.
	(fold_convert_const_int_from_real): Likewise.
	(fold_convert_const_int_from_fixed): Likewise.
	(fold_convert_const_fixed_from_int): Likewise.
	(all_ones_mask_p): Likewise.
	(sign_bit_p): Likewise.
	(make_range_step): Likewise.
	(build_range_check): Likewise.
	(range_predecessor): Likewise.
	(merge_ranges): Likewise.
	(unextend): Likewise.
	(extract_muldiv_1): Likewise.
	(fold_div_compare): Likewise.
	(fold_single_bit_test_into_sign_test): Use GET_MODE_PRECISION
	instead of GET_MODE_BITSIZE.
	(fold_single_bit_test): Update for wide-int.
	(fold_sign_changed_comparison): Likewise.
	(try_move_mult_to_index): Likewise.
	(fold_plusminus_mult_expr): Likewise.
	(native_encode_int): Likewise.
	(native_interpret_int): Likewise.
	(fold_unary_loc): Likewise.
	(pointer_may_wrap_p): Likewise.
	(size_low_cst): Likewise.
	(mask_with_tz): Likewise.
	(fold_binary_loc): Likewise.
	(fold_ternary_loc): Likewise.
	(multiple_of_p): Likewise.
	(tree_call_nonnegative_warnv_p): Likewise.
	(fold_read_from_constant_string): Likewise.
	(fold_negate_const): Likewise.
	(fold_abs_const): Likewise.
	(fold_relational_const): Remove dead INT_CST_LT_UNSIGNED.
	(round_up_loc): Update for wide-int.
	(ptr_difference_const): Update to use cst_fits_shwi_p.
	* genemit.c
	(gen_exp): Add CONST_WIDE_INT case.
	* gengenrtl.c
	(excluded_rtx): Add CONST_WIDE_INT case.
	* gengtype.c
	(do_typedef): Update for wide-int.
	(open_base_files): Add wide-int.h.
	(main): Added storage classes.
	* gengtype-lex.l
	(CXX_KEYWORD): Added another keyword for c++.
	* gengtype-parse.c
	(require3): New.
	(string_seq): Added for c++ parsing.
	* genmodes.c
	(emit_max_int): Added code find longest int.
	* genpreds.c
	(write_tm_constrs_h): Added check for hval and lval use in CONST_WIDE_INT.
	* genrecog.c
	(validate_pattern): Add CONST_WIDE_INT case.
	(add_to_sequence): Likewise.
	* gensupport.c
	(struct std_pred_table): Add CONST_WIDE_INT case.
	* gimple.c
	(preprocess_case_label_vec_for_gimple): Use wide-int rep.
	* gimple-fold.c
	(get_base_constructor): Use wide-int rep.
	(fold_array_ctor_reference): Likewise.
	(fold_nonarray_ctor_reference): Likewise.
	(fold_const_aggregate_ref_1): Likewise.
	(gimple_val_nonnegative_real_p): Likewise.
	(gimple_fold_indirect_ref): Likewise.
	* gimple-pretty-print.c
	(dump_ssaname_info): Use wide-int rep.
	* gimple-ssa-strength-reduction.c
	(struct slsr_cand_d): Change index to be widest_int;
	(struct incr_info_d): Change incr to be widest_int.
	(alloc_cand_and_find_basis): Use wide-int rep.
	(stmt_cost): Likewise.
	(slsr_process_phi): Likewise.
	(restructure_reference): Likewise.
	(slsr_process_ref): Likewise.
	(create_mul_ssa_cand): Likewise.
	(create_mul_imm_cand): Likewise.
	(create_add_ssa_cand): Likewise.
	(create_add_imm_cand): Likewise.
	(slsr_process_add): Likewise.
	(slsr_process_cast): Likewise.
	(slsr_process_copy): Likewise.
	(dump_candidate): Likewise.
	(dump_incr_vec): Likewise.
	(replace_ref): Likewise.
	(cand_increment): Likewise.
	(cand_abs_increment): Likewise.
	(create_phi_basis): Likewise.
	(replace_mult_candidate): Likewise.
	(replace_unconditional_candidate): Likewise.
	(incr_vec_index): Likewise.
	(create_add_on_incoming_edge): Likewise.
	(create_phi_basis): Likewise.
	(replace_conditional_candidate): Likewise.
	(record_increment): Likewise.
	(record_phi_increments): Likewise.
	(phi_incr_cost): Likewise.
	(lowest_cost_path): Likewise.
	(optimize_cands_for_speed_p): Likewise.
	(total_savings): Likewise.
	(analyze_increments): Likewise.
	(ncd_with_phi): Likewise.
	(ncd_of_cand_and_phis): Likewise.
	(nearest_common_dominator_for_cands): Likewise.
	(insert_initializers): Likewise.
	(all_phi_incrs_profitable): Likewise.
	(replace_one_candidate): Likewise.
	(replace_profitable_candidates): Likewise.
	* gimplify.c
	(gimple_boolify): Use wide-int rep.
	* godump.c
	(go_output_typedef): Use wide-int rep.
	* graphite-clast-to-gimple.c
	(gmp_cst_to_tree): Use wide-int rep.
	* graphite-sese-to-poly.c
	(tree_int_to_gmp): Use wide-int rep.
	(build_loop_iteration_domains): Likewise.
	* hooks.c
	(hook_bool_dint_dint_uint_bool_true): Removed.
	(hook_bool_wint_wint_uint_bool_true): New.
	* ipa-devirt.c
	(hash_type_name): Use wide-int rep.
	* ipa-prop.c
	(compute_complex_assign_jump_func): Use wide-int rep.
	(get_ancestor_addr_info): Likewise.
	(ipa_modify_call_arguments): Likewise.
	* loop-doloop.c
	(doloop_modify): Use wide-int rep.
	(doloop_optimize): Likewise.
	* loop-iv.c
	(iv_number_of_iterations): Use wide-int rep.
	(zero_iter_simplify): Likewise.
	* loop-unroll.c
	(decide_unroll_constant_iterations): Use wide-int rep.
	(unroll_loop_constant_iterations): Likewise.
	(decide_unroll_runtime_iterations): Likewise.
	(unroll_loop_runtime_iterations): Likewise.
	(decide_peel_simple): Likewise.
	(peel_loop_simple): Likewise.
	(decide_unroll_stupid): Likewise.
	* lto-streamer-in.c
	(input_cfg): Use wide-int rep.
	(lto_input_tree_1): Likewise.
	* lto-streamer-out.c
	(hash_tree): Use wide-int rep.
	(output_cfg): Likewise.
	* machmode.def
	(MAX_BITS_PER_UNIT): New.
	* Makefile.in
	(wide-int.h, wide-int.o, wide-int-print.o signop.h) New.
	(.cc rules): New.
	* omp-low.c
	(scan_omp_1_op): Use wide-int rep.
	(lower_omp_for_lastprivate): Likewise.
	* optabs.c
	(expand_subword_shift): Use wide-int rep.
	(expand_doubleword_shift): Likewise.
	(expand_absneg_bit): Likewise.
	(expand_copysign_absneg): Likewise.
	(expand_copysign_bit): Likewise.
	* postreload.c
	(reload_cse_simplify_set): Use wide-int rep.
	* predict.c
	(predict_iv_comparison): Use wide-int rep.
	* pretty-print.h
	(pp_wide_int) New.
	* print-rtl.c
	(print_rtx): Add CONST_WIDE_INT case.
	* print-tree.c
	(print_node_brief): Use wide-int rep.
	(print_node): Likewise.
	* read-rtl.c
	(validate_const_wide_int): New.
	(read_rtx_code): Add CONST_WIDE_INT case.
	* real.c
	(real_to_integer2): Deleted.
	(real_to_integer): Use wide-int rep.
	(real_from_integer): Likewise.
	(ten_to_ptwo): Likewise.
	(ten_to_mptwo): Likewise.
	* real.h
	(real_to_integer2, REAL_VALUE_FROM_INT,
	REAL_VALUE_FROM_UNSIGNED_INT, REAL_VALUE_TO_INT): deleted.
	(real_to_integer, real_from_integer, decimal_real_to_integer):
	Now use wide-int.
	* recog.c
	(const_scalar_int_operand): New.
	(const_double_operand): Changed to support CONST_WIDE_INT.
	* rtlanal.c
	(commutative_operand_precedence): Use wide-int rep.
	(get_address_mode): Likewise.
	(split_double): Likewise.
	* rtl.c
	(DEF_RTL_EXPR): Now supports CONST_WIDE_INT.
	(rtx_size): Use wide-int rep.
	(rtx_alloc_stat_v): New.
	(rtx_alloc_stat): Now callse rtx_alloc_stat_v.
	(cwi_output_hex): New.
	(iterative_hash_rtx): Use wide-int rep.
	(cwi_check_failed_bounds): New.
	* rtl.def
	(CONST_WIDE_INT): Add.
	* rtl.h
	(struct hwivec_def): Add.
	(CWI_GET_NUM_ELEM): Add.
	(CWI_PUT_NUM_ELEM): Add.
	(struct rtx_def): Add num_elem.
	(struct rtvec_def): Add hwiv.
	(CASE_CONST_SCALAR_INT): Modify for TARGET_SUPPORTS_WIDE_INT.
	(CASE_CONST_UNIQUE): Likewise.
	(CASE_CONST_ANY): Likewise.
	(CONST_SCALAR_INT_P): Likewise.
	(CONST_WIDE_INT_P): Add.
	(CWI_ELT): Add.
	(HWIVEC_CHECK): Add.
	(cwi_check_failed_bounds): Add.
	(CWI_ELT): Add.
	(HWIVEC_CHECK): Add.
	(CONST_WIDE_INT_VEC) Add.
	(CONST_WIDE_INT_NUNITS) Add.
	(CONST_WIDE_INT_ELT) Add.
	(rtx_mode_t): New type.
	(wi) New namespace.
	(get_precision) Add.
	(decompose) Add.
	(wi::shwi) Add.
	(wi::min_value) Add.
	(wi::max_value) Add.
	(rtx_alloc_v) Add.
	* sched-vis.c
	(print_value): Now supports CONST_WIDE_INT.
	* simplify-rtx.c
	(mode_signbit_p): Now supports CONST_WIDE_INT.
	(simplify_binary_operation_1): Use wide-int rep.
	(simplify_const_unary_operation): Likewise.
	(simplify_binary_operation_1): Likewise.
	(simplify_const_binary_operation): Likewise.
	(simplify_const_relational_operation): Likewise.
	(simplify_immed_subreg): Likewise.
	* stmt.c
	(expand_case): Use wide-int rep.
	* stor-layout.c
	(place_field):
	(compute_record_mode): Use wide-int rep.
	(layout_type): Likewise.
	(set_min_and_max_values_for_integral_type): Likewise.
	(fixup_signed_type): Likewise.
	(fixup_unsigned_type): Likewise.
	* system.h
	(STATIC_CONSTANT_P): New.
	(STATIC_ASSERT): New.
	* target.def
	(iterations, iterations_max): Use wide-int rather than double-int.
	(hook_bool_dint_dint_uint_bool_true): Removed.
	(hook_bool_wint_wint_uint_bool_true): New.
	* target.h: Now includes wide-int rather than double-int.
	* targhooks.c
	(default_cxx_get_cookie_size): Uses INT_CST_LT rather than INT_CST_LT_UNSIGNED.
	(can_use_doloop_if_innermost): Now uses wide-int parameters.
	* tree-affine.c
	(double_int_ext_for_comb): Deleted.
	(wide_int_ext_for_comb): New function.
	(aff_combination_zero): Use wide-int rep.
	(aff_combination_const): Likewise.
	(aff_combination_elt): Likewise.
	(aff_combination_scale): Likewise.
	(aff_combination_add_elt): Likewise.
	(aff_combination_add_cst): Likewise.
	(aff_combination_add): Likewise.
	(aff_combination_convert): Likewise.
	(double_int_ext_for_comb): Deleted.
	(wide_int_ext_for_comb): Added.
	(tree_to_aff_combination): Use wide-int rep.
	(add_elt_to_tree): Likewise.
	(aff_combination_to_tree): Likewise.
	(aff_combination_remove_elt): Likewise.
	(aff_combination_add_product): Likewise.
	(aff_combination_expand): Likewise.
	(double_int_constant_multiple_p): Deleted.
	(wide_int_constant_multiple_p): Added.
	(aff_combination_constant_multiple_p): Use wide-int rep.
	(print_aff): Likewise.
	(get_inner_reference_aff): Likewise.
	(aff_comb_cannot_overlap_p): Likewise.
	* tree-affine.h
	(aff_comb_elt): Changed type of coef and offset to widest-int.
	* tree.c
	(init_ttree): Changed constructor of int_cst_node.
	(tree_code_size): Removed code for INTEGER_CST case.
	(tree_size): Added INTEGER_CST case.
	(get_int_cst_ext_nunits, build_new_int_cst, build_int_cstu): New function.
	(build_int_cst_type): Use wide-int.
	(double_int_to_tree): Use wide-int.
	(double_int_fits_to_tree_p): Deleted.
	(force_fit_type_double): Deleted.
	(force_fit_type): New function.
	(int_cst_hash_hash): Use wide-int rep.
	(int_cst_hash_eq): Use wide-int rep.
	(build_int_cst_wide): Deleted.
	(wide_int_to_tree): New function.
	(cache_integer_cst): Use wide-int rep.
	(build_low_bits_mask): Likewise.
	(cst_and_fits_in_hwi): Deleted.
	(real_value_from_int_cst): Use wide-int rep.
	(make_int_cst_stat): New function.
	(integer_zerop): Use wide_int rep.
	(integer_onep): Likewise.
	(integer_all_onesp): Likewise.
	(integer_pow2p): Likewise.
	(integer_nonzerop): Likewise.
	(tree_log2): Likewise.
	(tree_floor_log2): Likewise.
	(tree_ctz): Likewise.
	(size_in_bytes): Likewise.
	(mem_ref_offset): Likewise.
	(build_type_attribute_qual_variant): Likewise.
	(type_hash_eq): Likewise
	(tree_int_cst_equal): Likewise.
	(tree_int_cst_lt): Likewise.
	(tree_int_cst_compare): Likewise.
	(tree_fits_shwi_p): Likewise.
	(tree_fits_uhwi_p): Likewise.
	(tree_to_shwi): Likewise.
	(tree_to_uhwi): Likewise.
	(tree_int_cst_sign_bit): Likewise.
	(tree_int_cst_sgn): Likewise.
	(tree_int_cst_min_precision): Likewise.
	(simple_cst_equal): Likewise.
	(compare_tree_int): Likewise.
	(iterative_hash_expr): Likewise.
	(int_fits_type_p): Likewise.
	(get_type_static_bounds): Likewise.
	(tree_int_cst_elt_check_failed): Likewise.
	(build_common_tree_nodes): Reordered to set prec before filling in value.
	(int_cst_value): Use wide-int rep.
	(widest_int_cst_value): Likewise.
	(upper_bound_in_type): Likewise.
	(lower_bound_in_type): Likewise.
	(num_ending_zeros): Likewise.
	(drop_tree_overflow): Likewise.
	* tree-call-cdce.c
	(check_pow): Use wide-int version of call.
	(gen_conditions_for_pow_cst_base): Likewise.
	* tree-cfg.c
	(group_case_labels_stmt): Use wide-int rep.
	(verify_expr): Likewise.
	(verify_gimple_assign_binary): Likewise.
	(print_loop): Likewise.
	* tree-chrec.c
	(tree_fold_binomial): Use wide-int rep.
	* tree-core.h
	(tree_base): Add int_length.
	(tree_int_cst): Change rep of value.
	* tree-data-ref.c
	(dr_analyze_innermost): Use wide-int rep.
	(dr_may_alias_p): Likewise.
	(analyze_ziv_subscript): Likewise.
	* tree.def
	(INTEGER_CST): Modified comment.
	* tree-dfa.c
	(get_ref_base_and_extent): Use wide-int rep.
	* tree-dfa.h
	(get_addr_base_and_unit_offset_1): Use wide-int rep.
	* tree-dump.c
	(dequeue_and_dump): Use wide-int rep.
	* tree.h
	(NULL_TREE): Moved to earlier loc in file.
	(TREE_INT_CST_ELT_CHECK): New.
	(tree_int_cst_elt_check_failed): New.
	(TREE_INT_CST_ELT_CHECK): New.
	(TYPE_SIGN): New.
	(TREE_INT_CST): Deleted.
	(TREE_INT_CST_LOW): Use wide-int rep.
	(TREE_INT_CST_HIGH): Deleted.
	(TREE_INT_CST_NUNITS): New.
	(TREE_INT_CST_EXT_NUNITS): Likewise.
	(TREE_INT_CST_ELT): Likewise.
	(INT_CST_LT): Use wide-int rep.
	(INT_CST_LE): New.
	(tree_int_cst_elt_check): New (two forms).
	(cst_fits_shwi_p): New.
	(cst_fits_uhwi_p): New.
	(make_int_cst): New.
	(tree_to_double_int): Deleted.
	(build_int_cstu): Deleted.
	(tree_to_shwi): Use wide-int rep.
	(tree_to_uhwi): Likewise.
	(wi): New.
	* tree-inline.c
	(remap_gimple_op_r): Use wide-int rep.
	(copy_tree_body_r): Likewise.
	* tree-object-size.c
	(compute_object_offset): Use wide-int rep.
	(addr_object_size): Likewise.
	(compute_object_sizes): Likewise.
	* tree-predcom.c
	(dref): Change rep of offset.
	(dump_dref): Call wide-int printer.
	(aff_combination_dr_offset): Use wide-int rep.
	(determine_offset): Likewise.
	(split_data_refs_to_components): Likewise.
	(suitable_component_p): Likewise.
	(order_drefs): Likewise.
	(add_ref_to_chain): Likewise.
	(valid_initializer_p): Likewise.
	(determine_roots_comp): Likewise.
	* tree-pretty-print.c
	(dump_array_domain): Use wide-int rep.
	(dump_generic_node): Likewise.
	* tree-sra.c
	(build_user_friendly_ref_for_offset): Use wide-int rep.
	(sra_ipa_modify_expr): Likewise.
	* tree-ssa-address.c
	(addr_for_mem_ref): Use wide-int rep.
	(move_fixed_address_to_symbol): Likewise.
	(move_hint_to_base): Likewise.
	(move_pointer_to_base): Likewise.
	(move_variant_to_index): Likewise.
	(most_expensive_mult_to_index): Likewise.
	(addr_to_parts): Likewise.
	(copy_ref_info): Likewise.
	* tree-ssa-alias.c
	(ao_ref_init_from_ptr_and_size): Use wide-int rep.
	(indirect_ref_may_alias_decl_p): Likewise.
	(indirect_refs_may_alias_p): Likewise.
	(stmt_kills_ref_p_1):
	* tree-ssa.c
	(non_rewritable_mem_ref_base): Use wide-int rep.
	* tree-ssa-ccp.c
	(prop_value_d): Change rep of mask to wide-int.
	(dump_lattice_value): Use wide-int rep.
	(get_default_value): Likewise.
	(set_constant_value): Likewise.
	(set_value_varying): Likewise.
	(valid_lattice_transition): Likewise.
	(set_lattice_value): Likewise.
	(value_to_double_int): Deleted.
	(value_to_wide_int): New.
	(get_value_from_alignment): Use wide-int rep.
	(get_value_for_expr): Likewise.
	(do_dbg_cnt): Likewise.
	(ccp_finalize): Likewise.
	(ccp_lattice_meet): Likewise.
	(bit_value_unop_1): Likewise.
	(bit_value_binop_1): Likewise.
	(bit_value_unop): Likewise.
	(bit_value_binop): Likewise.
	(bit_value_assume_aligned): Likewise.
	(evaluate_stmt): Likewise.
	(ccp_fold_stmt): Likewise.
	(visit_assignment): Likewise.
	(ccp_visit_stmt): Likewise.
	* tree-ssa-forwprop.c
	(forward_propagate_addr_expr_1): Use wide-int rep.
	(constant_pointer_difference): Likewise.
	(associate_pointerplus): Likewise.
	(combine_conversions): Likewise.
	* tree-ssa-loop.h
	(struct tree_niter_desc): Change type of Max to wide-int.
	* tree-ssa-loop-im.c
	(mem_refs_may_alias_p): Use wide-int rep.
	* tree-ssa-loop-ivcanon.c
	(remove_exits_and_undefined_stmts): Use wide-int rep.
	(remove_redundant_iv_tests): Likewise.
	(canonicalize_loop_induction_variables): Likewise.
	* tree-ssa-loop-ivopts.c
	(alloc_iv): Use wide-int rep.
	(constant_multiple_of): Likewise.
	(strip_offset_1): Likewise.
	(add_autoinc_candidates): Likewise.
	(get_computation_aff): Likewise.
	(force_expr_to_var_cost): Likewise.
	(ptr_difference_cost): Likewise.
	(difference_cost): Likewise.
	(get_loop_invariant_expr_id): Likewise.
	(get_computation_cost_at): Likewise.
	(iv_elimination_compare_lt): Likewise.
	(may_eliminate_iv): Likewise.
	* tree-ssa-loop-niter.c
	(split_to_var_and_offset): Use wide-int rep.
	(determine_value_range): Likewise.
	(bound_difference_of_offsetted_base): Likewise.
	(bound_difference): Likewise.
	(inverse): Likewise.
	(number_of_iterations_ne_max): Likewise.
	(number_of_iterations_ne): Likewise.
	(number_of_iterations_lt_to_ne): Likewise.
	(assert_loop_rolls_lt): Likewise.
	(number_of_iterations_lt): Likewise.
	(number_of_iterations_le): Likewise.
	(number_of_iterations_cond): Likewise.
	(number_of_iterations_exit): Likewise.
	(finite_loop_p): Likewise.
	(derive_constant_upper_bound_assign): Likewise.
	(derive_constant_upper_bound): Likewise.
	(derive_constant_upper_bound_ops): Likewise.
	(do_warn_aggressive_loop_optimizations): Likewise.
	(record_estimate): Likewise.
	(record_nonwrapping_iv): Likewise.
	(double_int_cmp): Deleted.
	(wide_int_cmp): New.
	(bound_index): Use wide-int rep.
	(discover_iteration_bound_by_body_walk): Likewise.
	(maybe_lower_iteration_bound): Likewise.
	(estimate_numbers_of_iterations_loop): Likewise.
	(estimated_loop_iterations): Likewise.
	(estimated_loop_iterations_int): Likewise.
	(max_loop_iterations): Likewise.
	(max_loop_iterations_int): Likewise.
	(max_stmt_executions): Likewise.
	(estimated_stmt_executions): Likewise.
	(n_of_executions_at_most): Likewise.
	(scev_probably_wraps_p): Likewise.
	* tree-ssa-loop-prefetch.c
	(dump_mem_details): Use wide-int rep.
	(find_or_create_group): Likewise.
	(idx_analyze_ref): Likewise.
	(gather_memory_references_ref): Likewise.
	(prune_ref_by_group_reuse): Likewise.
	(issue_prefetch_ref): Likewise.
	* tree-ssa-math-opts.c
	(gimple_expand_builtin_pow): Use wide-int rep.
	(execute_cse_sincos): Likewise.
	* tree-ssanames.c
	(set_range_info): Use wide-int rep.
	(get_range_info): Likewise.
	(set_nonzero_bits): Likewise.
	(get_nonzero_bits): Likewise.
	* tree-ssanames.h
	(range_info_def): Fields min max and nonzero_bits now are wide-int.
	* tree-ssa-phiopt.c
	(jump_function_from_stmt): Use wide-int rep.
	(hoist_adjacent_loads): Likewise.
	* tree-ssa-pre.c
	(phi_translate_1): Use wide-int rep.
	* tree-ssa-reassoc.c
	(decrement_power): Use wide-int rep.
	(acceptable_pow_call): Likewise.
	* tree-ssa-sccvn.c
	(copy_reference_ops_from_ref): Use wide-int rep.
	(ao_ref_init_from_vn_reference): Likewise.
	(vn_reference_fold_indirect): Likewise.
	(vn_reference_maybe_forwprop_address): Likewise.
	(valueize_refs_1): Likewise.
	(vn_reference_lookup_3): Likewise.
	(simplify_binary_expression): Likewise.
	* tree-ssa-structalias.c
	(process_constraint): Use wide-int rep.
	(get_constraint_for_ptr_offset): Likewise.
	(get_constraint_for_1): Likewise.
	* tree-ssa-uninit.c
	(is_value_included_in): Use wide-int rep.
	* tree-streamer-in.c
	(unpack_ts_base_value_fields): Use wide-int rep.
	(streamer_alloc_tree): Likewise.
	* tree-streamer-out.c
	(pack_ts_int_cst_value_fields): Use wide-int rep.
	(streamer_write_tree_header): Likewise.
	(streamer_write_integer_cst): Likewise.
	* tree-switch-conversion.c
	(emit_case_bit_tests): Use wide-int rep.
	(build_constructors): Likewise.
	(array_value_type): Likewise.
	* tree-vect-data-refs.c
	(not_size_aligned): Use wide-int rep.
	(vect_prune_runtime_alias_test_list): Likewise.
	(vect_check_gather): Likewise.
	* tree-vect-generic.c
	(build_replicated_const): Use wide-int rep.
	(expand_vector_divmod): Likewise.
	* tree-vect-loop.c
	(vect_transform_loop): Use wide-int rep.
	* tree-vect-loop-manip.c
	(vect_do_peeling_for_loop_bound): Use wide-int rep.
	(vect_do_peeling_for_alignment): Likewise.
	* tree-vectorizer.h
	(NITERS_KNOWN_P): Use wide-int rep.
	* tree-vect-patterns.c
	(vect_recog_divmod_pattern): Use wide-int rep.
	* tree-vrp.c
	(operand_less_p): Use wide-int rep.
	(extract_range_from_assert): Likewise.
	(vrp_int_const_binop): Likewise.
	(zero_nonzero_bits_from_vr): Likewise.
	(ranges_from_anti_range): Likewise.
	(quad_int_cmp): Deleted.
	(quad_int_pair_sort): Likewise.
	(extract_range_from_binary_expr_1): Use wide-int rep.
	(extract_range_from_unary_expr_1): Likewise.
	(adjust_range_with_scev): Likewise.
	(masked_increment): Likewise.
	(register_edge_assert_for_2): Likewise.
	(check_array_ref): Likewise.
	(search_for_addr_array): Likewise.
	(maybe_set_nonzero_bits): Likewise.
	(union_ranges): Likewise.
	(intersect_ranges): Likewise.
	(simplify_truth_ops_using_ranges): Likewise.
	(simplify_bit_ops_using_ranges): Likewise.
	(range_fits_type_p): Likewise.
	(simplify_cond_using_ranges): Likewise.
	(simplify_conversion_using_ranges): Likewise.
	(simplify_float_conversion_using_ranges): Likewise.
	(vrp_finalize): Likewise.
	* value-prof.c
	(gimple_divmod_fixed_value_transform): Use wide-int rep.
	(gimple_stringops_transform): Likewise.
	* varasm.c
	(decode_addr_const): Use wide-int rep.
	(const_hash_1): Likewise.
	(const_rtx_hash_1): Likewise
	(output_constant): Likewise.
	(array_size_for_constructor): Likewise.
	(output_constructor_regular_field): Likewise.
	(output_constructor_bitfield): Likewise.
	* var-tracking.c
	(loc_cmp): Use wide-int rep.
	(emit_note_insn_var_location): Likewise.
	* wide-int.cc
	New file.
	* wide-int.h
	New file.
	* wide-int-print.cc
	New file.
	* wide-int-print.h
	New file.


ada:
	* gcc-interface/cuintp.c
	(UI_From_gnu): Update to use wide-int.
	* gcc-interface/decl.c
	(gnat_to_gnu_entity): Update to use TYPE_SIGN and tree_to_uhwi.
	(annotate_value): Update to use wide-int.
	* gcc-interface/utils.c
	(make_packable_type): Update to use tree_to_uhwi.
	(get_nonnull_operand): Update to use cst_fits_uhwi_p.


c:
	* c-decl.c
	(check_bitfield_type_and_width): Update to use signop.
	(finish_enum): Update to use wide-int.
	* c-parser.c
	(c_parser_cilk_clause_vectorlength): Update to use wi::.
	* c-typeck.c
	(build_c_cast): Update to use wide_int_to_tree.
	(set_nonincremental_init_from_string): Update to use wide-int.
	(c_tree_equal): Update to use wi::.


c-family:
	* c-ada-spec.c
	(ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Remove.
	(dump_generic_ada_node): Update to use wide-int.
	* c-common.c
	(shorten_compare): Likewise.
	(pointer_int_sum): Likewise.
	(c_common_nodes_and_builtins): Likewise.
	(match_case_to_enum_1): Likewise.
	(handle_alloc_size_attribute): Likewise.
	(get_nonnull_operand): Likewise.
	(check_function_arguments_recurse): Likewise.
	* c-format.c
	(get_constant): Likewise.
	* c-lex.c
	(narrowest_unsigned_type): Update to use wide-int.
	(narrowest_signed_type): Likewise.
	(interpret_integer): Likewise.
	(lex_charconst): Likewise.
	* c-pretty-print.c
	(pp_c_integer_constant): Update accessors.
	* cilk.c
	(declare_one_free_variable): Use INT_CST_LT instead of INT_CST_LT_UNSIGNED.


cp:
	* call.c
	(type_passed_as): Use INT_CST_LT instead of INT_CST_LT_UNSIGNED.
	(convert_for_arg_passing): Likewise.
	* class.c
	(end_of_class): Likewise.
	(include_empty_classes): Likewise
	* cvt.c
	(ignore_overflows): Use wide_int_to_tree.
	* decl.c
	(check_array_designated_initializer): Update to use wi::.
	(finish_enum_value_list): Update to use signop.
	(build_enumerator): Update to use wide-int.
	* init.c
	(build_new_1): Update to use wide-int.
	* mangle.c
	(write_integer_cst): Update to use wide-int.
	(write_array_type): Likewise.
	* parser.c
	(make_string_pack): Update to use tree_to_uhwi.
	* tree.c
	(cp_tree_equal): Update to use wide-int.
	* typeck2.c
	(process_init_constructor_array): Update to use wide-int.


fortran:
	* target-memory.c
	(gfc_interpret_logical): Use wide-int rep.
	* trans-array.c
	(gfc_conv_array_initializer): Use wide-int rep.
	* trans-common.c
	(build_common_decl): Use wide-int rep.
	* trans-const.c
	(gfc_conv_string_init): Use wide-int rep.
	(gfc_conv_mpz_to_tree): Likewise.
	(gfc_conv_tree_to_mpz): Likewise.
	* trans-decl.c
	(gfc_can_put_var_on_stack): Use wide-int rep.
	* trans-expr.c
	(gfc_conv_cst_int_power): Use wide-int rep.
	(gfc_string_to_single_character): Likewise.
	(gfc_optimize_len_trim): Likewise.
	* trans-intrinsic.c
	(trans_this_image): Use wide-int rep.
	(conv_intrinsic_cobound): Likewise.
	* trans-types.c
	(gfc_init_types): Use wide-int rep.
	(gfc_get_array_type_bounds): Likewise.


go:
	* go-gcc.cc
	(Gcc_backend::type_size): Use wide-int rep.


java:
	* boehm.c
	(mark_reference_fields): Use wide-int rep.
	(get_boehm_type_descriptor): Likewise.
	* expr.c
	(build_newarray): Use wide-int rep.
	(expand_java_pushc): Likewise.
	(build_field_ref): Likewise.
	* jcf-parse.c
	(get_constant): Use wide-int rep.
	* typeck.c
	(java_array_type_length): Use wide-int rep.


lto:
	* lto.c
	(compare_tree_sccs_1): Use wide-int rep.
	* lto-lang.c
	(handle_novops_attribute): Use wide-int rep.


objc:
	* objc-act.c
	(objc_decl_method_attributes): Use wide-int rep.
