## Copyright (C) 2003-2012, 2014-2017, 2019-2020 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 8.4.1.2 Subscripts

## 8.4.1.2.3 General rules

AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (1)])
AT_SKIP_IF(false)
AT_KEYWORDS([runsubscripts subscripts odo])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY """" X(5) """"
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [" "
],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:11:DISPLAY EC-BOUND-ODO (OCCURS ... DEPENDING ON data item out of bounds)
])
AT_CLEANUP

AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (2)])
AT_SKIP_IF(false)
AT_KEYWORDS([runsubscripts subscripts odo IF])
# verifies that the check is generated within conditions - simple IF
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           IF X(5) <> SPACE
              DISPLAY """" X(5) """".
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:11:IF EC-BOUND-ODO (OCCURS ... DEPENDING ON data item out of bounds)
])
AT_CLEANUP

AT_SETUP([Subscript bounds with OCCURS DEPENDING ON (3)])
AT_SKIP_IF(false)
AT_KEYWORDS([runsubscripts subscripts odo EVALUATE WHEN])
# verifies that the check is generated within conditions - WHEN
# complex test for correct place and not raised if guarded by check
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           EVALUATE TRUE
           WHEN N >= 5
            AND X(5) <> SPACE
              DISPLAY "1-" X(5)
           WHEN N >= 5
           WHEN X(5) <> SPACE
              DISPLAY "2-" X(5)
           END-EVALUATE
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:11:EVALUATE EC-BOUND-ODO (OCCURS ... DEPENDING ON data item out of bounds)
])
AT_CLEANUP


AT_SETUP([SEARCH ALL with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts odo])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
       77  SCREEN-AKT         PIC 9(02) VALUE 0.
       01  SCREEN-TAB.
           03 SCREEN-ENTRY    OCCURS 0  TO  20
                              DEPENDING ON  SCREEN-AKT
                              ASCENDING KEY SCREEN-NAME
                              INDEXED   BY  SCREEN-IDX.
             05 SCREEN-NAME     PIC X(02).

       PROCEDURE DIVISION.

           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'AB'
                 DISPLAY 'FOUND'
           END-SEARCH
           MOVE 1 TO SCREEN-AKT
           MOVE 'AB' TO  SCREEN-NAME (1)
           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'AB'
                 DISPLAY 'FOUND'
           END-SEARCH
           MOVE 2 TO SCREEN-AKT
           MOVE 'CD' TO  SCREEN-NAME (2)
           SEARCH ALL SCREEN-ENTRY
              AT END
                 DISPLAY 'END'
              WHEN SCREEN-NAME (SCREEN-IDX) = 'CD'
                 DISPLAY 'FOUND'
           END-SEARCH
           EXIT PROGRAM.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [END
FOUND
FOUND
], [])
AT_CLEANUP


AT_SETUP([CALL with OCCURS DEPENDING ON])
AT_KEYWORDS([runsubscripts subscripts ODO])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog-main.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  parm.
           03  parm-size PIC S999 COMP.
           03  parm-str.
               05  parm-char PIC X OCCURS 0 TO 100 TIMES
                        DEPENDING ON parm-size.

       PROCEDURE DIVISION.
           MOVE 10 TO parm-size
           MOVE "Hi, there!" TO parm-str
           CALL "prog" USING parm
           .
       END PROGRAM prog-main.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       LINKAGE SECTION.
       01  parm.
           03  parm-size PIC S999 COMP.
           03  parm-str.
               05  parm-char PIC X OCCURS 0 TO 100 TIMES
                        DEPENDING ON parm-size.

       PROCEDURE DIVISION USING parm.
           DISPLAY FUNCTION TRIM(parm-str) WITH NO ADVANCING
           .
       END PROGRAM prog.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [Hi, there!])
AT_CLEANUP

AT_SETUP([length of ODO w/- reference modification])
AT_KEYWORDS([runsubscripts subscripts])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  PLINE.
           03  PLINE-LEN PIC S9(4) COMP-5.
           03  PLINE-TEXT.
               04  FILLER    PIC X(1) OCCURS  1 TO 80
                                      DEPENDING ON PLINE-LEN.
       procedure division.
       a-main section.
             MOVE 5                    TO PLINE-LEN
             MOVE 'the first part in'  TO PLINE-TEXT
             MOVE 30                   TO PLINE-LEN
             IF PLINE-TEXT NOT = 'the f'
                DISPLAY 'text1 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 'the first part in'  TO PLINE-TEXT
             MOVE 4                    TO PLINE-LEN
             MOVE 'second'             TO PLINE-TEXT
             MOVE 14                   TO PLINE-LEN
             IF PLINE-TEXT NOT = 'secofirst part'
                DISPLAY 'text2 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 80                   TO PLINE-LEN
             MOVE SPACES               TO PLINE-TEXT
             MOVE 5                    TO PLINE-LEN
             MOVE 'the first part in'  TO PLINE-TEXT (2:)
             MOVE 30                   TO PLINE-LEN
             IF PLINE-TEXT NOT = ' the '
                DISPLAY 'text3 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             MOVE 'the first part in'  TO PLINE-TEXT (2:)
             MOVE 4                    TO PLINE-LEN
             MOVE 'second'             TO PLINE-TEXT (2:)
             MOVE 14                   TO PLINE-LEN
             IF PLINE-TEXT NOT = ' sec first par'
                DISPLAY 'text4 wrong: ' PLINE-TEXT
                END-DISPLAY
             END-IF
             STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [], [])
AT_CLEANUP

AT_SETUP([length of ODO Rules 7, 8A, and 8B])
AT_KEYWORDS([runsubscripts subscripts ODO])
AT_DATA([prog.cob], [
        identification division.
        program-id. prog.
        procedure division.
        call "prog1"
        call "prog2"
        call "prog3"
        goback.
        end program prog.

        identification division.
        program-id. prog1.
        data division.
        working-storage section.
        01      depl        pic 9.
        01      digtab.
         05     digitgrp.
          10    digits      occurs 1 to 9 depending on depl pic x.
        procedure division.
        display "Demonstrates 13.18.38.4 OCCURS General rules 7)"
        display "depl is completely separate"
        display "output should be ""12345    """
        move 9              to depl
        move space          to digtab
        move 5              to depl
        move "123456789"    to digtab
        move 9              to depl
        display             """" digtab """"
        goback.
        end program prog1.

        identification division.
        program-id. prog2.
        data division.
        working-storage section.
        01      digtab.
         05     depl        pic 9.
         05     digitgrp.
          10    digits      occurs 1 to 9 depending on depl pic x.
        procedure division.
        display "Demonstrates 13.18.38.4 OCCURS General rules 8a)"
        display "depl is not subordinate to digitgrp"
        display "output should be ""12345    """
        move 9              to depl
        move space          to digtab
        move 5              to depl
        move "123456789"    to digitgrp
        move 9              to depl
        display             """" digitgrp """"
        goback.
        end program prog2.

        identification division.
        program-id. prog3.
        data division.
        working-storage section.
        01      digtab.
         05     depl        pic 9.
         05     digitgrp.
          10    digits      occurs 1 to 9 depending on depl pic x.
        procedure division.
        display "Demonstrates 13.18.38.4 OCCURS General rules 8b)"
        display "depl is subordinate to digtab"
        display "output should be ""123"" followed by ""123456789"""
        move 9              to depl
        move space          to digtab
        move 5              to depl
        move "3123456789"   to digtab
        display             """" digitgrp """"
        move 9              to depl
        display             """" digitgrp """"
        goback.
        end program prog3.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [Demonstrates 13.18.38.4 OCCURS General rules 7)
depl is completely separate
output should be "12345    "
"12345    "
Demonstrates 13.18.38.4 OCCURS General rules 8a)
depl is not subordinate to digitgrp
output should be "12345    "
"12345    "
Demonstrates 13.18.38.4 OCCURS General rules 8b)
depl is subordinate to digtab
output should be "123" followed by "123456789"
"123"
"123456789"
], [])
AT_CLEANUP

AT_SETUP([Subscript out of bounds (1)])
AT_SKIP_IF(false)
AT_KEYWORDS([runsubscripts subscripts])
# COPY literal-1 NOT IMPLEMENTED
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY """" X(I) """"
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [" "
],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:11:DISPLAY EC-BOUND-SUBSCRIPT (Subscript out of bounds)
])

AT_CLEANUP

AT_SETUP([Subscript out of bounds (2)])
AT_SKIP_IF(false)
AT_KEYWORDS([runsubscripts subscripts])
# COPY literal-1 NOT IMPLEMENTED
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY """" X(I) """"
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [" "
],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:11:DISPLAY EC-BOUND-SUBSCRIPT (Subscript out of bounds)
])
AT_CLEANUP

AT_SETUP([Subscript by arithmetic expression])
AT_KEYWORDS([runsubscripts subscripts])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G             VALUE "1234".
         02 X           PIC X OCCURS 4.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE X((3 + 1) / 2) TO Z.
           IF Z NOT = "2"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           MOVE X(2 ** 2) TO Z.
           IF Z NOT = "4"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [], [])
AT_CLEANUP

AT_SETUP([Recursive subscripts])
AT_KEYWORDS([subscripts])
AT_DATA([prog.cob], [
       identification division.
       program-id. pmain.
       data division.
       working-storage section.
       01 filler.
        02 tabl-values pic x(9) value "234567890".
        02 v redefines tabl-values occurs 9 pic 9.
       procedure division.
       display v(1)                       " should be 2"
       display v(v(1))                    " should be 3"
       display v(v(v(1)))                 " should be 4"
       display v(v(v(v(1))))              " should be 5"
       display v(v(v(v(v(1)))))           " should be 6"
       display v(v(v(v(v(v(1))))))        " should be 7"
       display v(v(v(v(v(v(v(1)))))))     " should be 8"
       display v(v(v(v(v(v(v(v(1))))))))  " should be 9"

       display v(v(v(v(v(v(v(v(v(1)))))))))  " should be 0"
       move 1 to v(v(v(v(v(v(v(v(v(1)))))))))
       display v(v(v(v(v(v(v(v(v(1)))))))))  " should be 1"

       goback.
       end program pmain.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0], [2 should be 2
3 should be 3
4 should be 4
5 should be 5
6 should be 6
7 should be 7
8 should be 8
9 should be 9
0 should be 0
1 should be 1
], [])
AT_CLEANUP

AT_SETUP([Subscripted refmods])
AT_KEYWORDS([refmod refmods])
AT_DATA([prog.cob], [
       identification division.
       program-id. pmain.
       data division.
       working-storage section.
       01 filler.
        02 tabl-values pic x(9) value "123456789".
        02 v redefines tabl-values occurs 9 pic 9.
       procedure division.
       display tabl-values( 3:4 )           " should be 3456"
       display tabl-values( v(3):v(4) )     " should be 3456"
       goback.
       end program pmain.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./a.out], [0], [3456 should be 3456
3456 should be 3456
], [])
AT_CLEANUP

