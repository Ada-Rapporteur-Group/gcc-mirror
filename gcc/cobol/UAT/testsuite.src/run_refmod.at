## Copyright (C) 2003-2012, 2014-2015, 2017-2020 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 8.4.2.3 Reference-modification

## 8.4.2.3.3 General rules

AT_SETUP([Static reference modification])
AT_KEYWORDS([refmod])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       PROCEDURE        DIVISION.
           DISPLAY X(1:1) ":" X(1:2) ":" X(1:3) ":" X(1:4) ":" X(1:)
           END-DISPLAY.
           DISPLAY X(2:1) ":" X(2:2) ":" X(2:3) ":" X(2:)
           END-DISPLAY.
           DISPLAY X(3:1) ":" X(3:2) ":" X(3:)
           END-DISPLAY.
           DISPLAY X(4:1) ":" X(4:)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0],
[a:ab:abc:abcd:abcd
b:bc:bcd:bcd
c:cd:cd
d:d
])

AT_CLEANUP


AT_SETUP([Dynamic reference modification])
AT_KEYWORDS([refmod])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9.
       PROCEDURE        DIVISION.
           MOVE 1 TO I.
           DISPLAY X(I:1)
           END-DISPLAY.
           MOVE 4 TO I.
           DISPLAY X(I:1)
           END-DISPLAY.
           MOVE 1 TO I.
           DISPLAY X(1:I)
           END-DISPLAY.
           MOVE 4 TO I.
           DISPLAY X(1:I)
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [0],
[a
d
a
abcd
])

AT_CLEANUP

AT_SETUP([Offset underflow])
AT_SKIP_IF(false)
# AT_XFAIL_IF(test $(arch) = x86_64)
AT_KEYWORDS([refmod])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY X(I:1) NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./a.out], [134], [a],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:10:DISPLAY EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP

AT_SETUP([Offset overflow])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01.
          03 X          PIC X(4) VALUE "abcd".
          03 I          PIC 9 VALUE 5.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY X(I:1) NO ADVANCING.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [5],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:11:DISPLAY EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP


AT_SETUP([Length overflow (1)])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 5.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY X(1:I) NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [a],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:10:DISPLAY EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP

AT_SETUP([Length overflow (2)])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 5.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY X(3:I) NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [c],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:10:DISPLAY EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP

AT_SETUP([Length overflow with offset (1)])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 3.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           DISPLAY X(3:I) NO ADVANCING.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [c],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:10:DISPLAY EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP


AT_SETUP([Length overflow with offset (2)])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod IF])
# verifies that the check is generated within conditions - simple IF
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 3.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           IF X(3:I) <> SPACES
              DISPLAY X(3:I) NO ADVANCING.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:10:IF EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP

AT_SETUP([Length overflow with offset (3)])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod EVALUATE WHEN])
# verifies that the check is generated within conditions - WHEN
# complex test for correct place and not raised if guarded by check
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 3.
       PROCEDURE        DIVISION.
           >>TURN EC-ALL CHECKING ON
           EVALUATE TRUE
           WHEN I < 2
            AND X(3:I) <> SPACES
              DISPLAY "1-" X(3:I) NO ADVANCING
           WHEN I < 2
           WHEN X(3:I) <> SPACES
              DISPLAY "2-" X(3:I) NO ADVANCING
           END-EVALUATE
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [134], [],
[stderr-nolog])
AT_CHECK([cat stderr | grep -vi aborted], [0],
[a.out: fatal exception at prog.cob:10:EVALUATE EC-BOUND-REF-MOD (Reference modifier out of bounds)
])
AT_CLEANUP

AT_SETUP([Refmod sources are figurative constants])
AT_SKIP_IF(false)
AT_KEYWORDS([refmod figurative])
AT_DATA([prog.cob], [
        id division.
        program-id. prog.
        data division.
        working-storage section.
        01 varx pic x(8) VALUE '""""""""'.
        01 varp redefines varx pointer.
        procedure division.
        move "12345678" to varx
        display  """" varx """"
        move "999" to varx(4:3)
        display  """" varx """"
        move LOW-VALUE to varx(4:3).
        display  """" varx """"
        move ZERO to varx(4:3).
        display  """" varx """"
        move SPACE to varx(4:3).
        display  """" varx """"
        move QUOTE to varx(4:3).
        display  """" varx """"
        move HIGH-VALUE to varx(4:3).
        display  varp
        initialize varx all to value
        display  """" varx """"
        .
        end program prog.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./a.out], [0], ["12345678"
"12399978"
"123"
"12300078"
"123   78"
"123"""78"
0x3837ffffff333231
""""""""""
], [])
AT_CLEANUP
