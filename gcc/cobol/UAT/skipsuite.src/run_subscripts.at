## Copyright (C) 2003-2012, 2014-2017, 2019-2020 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 8.4.1.2 Subscripts

## 8.4.1.2.3 General rules


AT_SETUP([386 Value of DEPENDING ON N out of bounds])
AT_KEYWORDS([runsubscripts subscripts])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# COPY literal-1 NOT IMPLEMENTED

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9.
       PROCEDURE        DIVISION.
           MOVE 5 TO N.
           MOVE '12345' TO G
           DISPLAY X(3) WITH NO ADVANCING
           END-DISPLAY.
           MOVE 3 TO N.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [1], [3],
[libcob: prog.cob:15: error: OCCURS DEPENDING ON 'N' out of bounds: 3
note: minimum subscript for 'X': 4
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 7.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out2], [1], [],
[libcob: prog2.cob:10: error: OCCURS DEPENDING ON 'N' out of bounds: 7
note: maximum subscript for 'X': 6
])

AT_CLEANUP


AT_SETUP([enable / disable subscript check])
AT_KEYWORDS([runsubscripts subscripts debug exception-name
TURN BOUND NOBOUND])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X VALUE "!".
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx)
                   WITH NO ADVANCING
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
                   WITH NO ADVANCING
           .
])

AT_CHECK([$COMPILE prog.cob -o badprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog1], [1], [],
[libcob: prog.cob:13: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CHECK([$COBC -x prog.cob -o exprog1], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog1], [0], [!], [])

AT_CHECK([$COMPILE -fno-ec=EC-BOUND-SUBSCRIPT -o exprog2 prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog2], [0], [!])
AT_CHECK([$COMPILE -fno-ec=BOUND -o exprog3 prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./exprog3], [0], [!])

AT_CHECK([$COBC -x -fec=BoUnd-subscript prog.cob -o badprog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./badprog2], [1], [],
[libcob: prog.cob:13: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])

AT_CLEANUP


AT_SETUP([382 BOUND and NOBOUND directives])
AT_KEYWORDS([runsubscripts subscripts extensions directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# $SET not ISO
# CDF variable BOUND unique to Gnu?

# note: the >> TURN directive is checked in run_misc.at

AT_DATA([prog.cob], [
      $SET BOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_DATA([progn.cob], [
      $SET NOBOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. progn.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_DATA([progn2.cob], [
      $SET NO-BOUND
       IDENTIFICATION DIVISION.
       PROGRAM-ID. progn2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x VALUE "12345!".
           03  y PIC X OCCURS 5 TIMES.
           03  z PIC X.
       01  idx PIC 99 VALUE 6.

       PROCEDURE DIVISION.
           DISPLAY y (idx) WITH NO ADVANCING
           .
])

AT_CHECK([$COBC -x prog.cob], [0], [], [])
AT_CHECK([$COMPILE progn.cob], [0], [], [])
AT_CHECK([$COMPILE progn2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [1], [],
[libcob: prog.cob:14: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CHECK([$COBCRUN_DIRECT ./a.outn], [0], [!], [])
AT_CHECK([$COBCRUN_DIRECT ./a.outn2], [0], [!], [])
AT_CLEANUP

AT_SETUP([SSRANGE/NOSSRANGE directives (IBM, not ISO)])
AT_KEYWORDS([runsubscripts subscripts extensions directive])
AT_XFAIL_IF(true)
# WARNING: this testcase is "broken" as those SSRANGE may only be
#          defined before IDENTIFICATION DIVISION (iniatial $SET)
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x.
           03  y       PIC X OCCURS 5 TIMES VALUE SPACE.
           03  z       PIC X VALUE "!".
       01  idx         PIC 99 VALUE 6.

       PROCEDURE DIVISION.
      $SET NOSSRANGE
           DISPLAY y (idx)
      *> Note: MF says "sets BOUND"
      $SET SSRANGE
           DISPLAY y (idx)
           .
])
AT_CHECK([$COMPILE -DTEST-SUBSCRIPT prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./a.out], [1],
[!
], [libcob: prog.cob:17: error: subscript of 'y' out of bounds: 6
note: maximum subscript for 'y': 5
])
AT_CLEANUP

