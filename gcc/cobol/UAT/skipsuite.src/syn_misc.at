## Copyright (C) 2007-2012, 2014-2020 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart,
## Ron Norman
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite


AT_SETUP([491 Invalid conditional expression (2)])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Syntax Error Messages NOT IMPLEMENTED

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 WRKN  PIC S999 VALUE 123.
        01 WRKX  PIC X(8) VALUE 'House'.
        PROCEDURE DIVISION.
        MAIN.
            EVALUATE WRKN
              GREATER ZERO
              < 0
              > 0
            WHEN TRUE
              DISPLAY "WHAT IS IT?"
            END-EVALUATE.
            IF WRKN = 123 EQUAL 456
              DISPLAY "Strange brew! " WRKN
            END-IF.
            IF WRKN NOT EQUAL 123 NOT = 456
              DISPLAY "Strange brew! " WRKN
            END-IF.
            IF WRKN = 123 OR 456
              DISPLAY "Home brew! " WRKN
            END-IF.
            IF WRKX = "Red" OR "White"
              DISPLAY "Home wine! " WRKX
            END-IF.
            IF WRKX <= "Red" = "White"
              DISPLAY "Home wine! " WRKX
            END-IF.
            IF WRKX = "Red" NOT "White"
              DISPLAY "Home wine! " WRKX
            END-IF.
            IF WRKN = (123 - 12) OR
                   >= (456 + 16)
              DISPLAY "And another brew! " WRKN
            END-IF.
            STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:10: error: GREATER THAN operator may be misplaced
prog.cob:17: error: EQUALS operator may be misplaced
prog.cob:20: error: NOT EQUAL operator may be misplaced
prog.cob:29: error: LESS OR EQUAL operator may be misplaced
prog.cob:32: error: invalid expression
])

AT_CLEANUP


AT_SETUP([Invalid conditional expression (3)])
AT_KEYWORDS([misc expression condition])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED - Syntax diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
      ******************************************************************
       WORKING-STORAGE SECTION.
      *
       01 FLD1 PIC 9 VALUE 1.
       01 FLD2 PIC 9 VALUE 2.
       01 FLDX PIC 9 VALUE 5.
       01 FLDY PIC 9 VALUE 6.

       PROCEDURE DIVISION.
           IF 1 AND 2 > 1 THEN
                DISPLAY 'Test 1 is WRONG'
           ELSE
                DISPLAY 'Test 1 is OK'.

           IF FLD1 AND FLDX > FLD2 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLD1 OR FLDX > FLD2 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLD1 > 2 AND FLDX > FLD2 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLD2 IS NUMERIC AND FLD1 THEN
                DISPLAY 'Test 2 is OK'
           ELSE
                DISPLAY 'Test 2 is Wrong'.

           IF FLDX > FLD2 AND FLD1 AND 8 THEN
                DISPLAY 'Test 3 is OK ' FLDX ' > ' FLD2 ' & ' FLD1
           ELSE
                DISPLAY 'Test 3 is Wrong'.

           IF FLDX > FLD2 OR FLD1 OR 8 THEN
                DISPLAY 'Test 3 is OK'
           ELSE
                DISPLAY 'Test 3 is Wrong'.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:15: error: invalid conditional expression
prog.cob:20: error: invalid conditional expression
prog.cob:25: error: invalid conditional expression
prog.cob:35: error: invalid expression
])

AT_CLEANUP


AT_SETUP([Valid conditional expression])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  var         PIC 999.

       PROCEDURE       DIVISION.
           IF  var = 83  AND >  1 + 1
              CONTINUE
           END-IF
           IF  var = 83  AND >  2
              CONTINUE
           END-IF
           IF  var = 83  AND > (1 + 1)
              CONTINUE
           END-IF
           IF (var NOT = 1) OR (var NOT = 2)
               CONTINUE
           END-IF
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -fno-constant-folding prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([missing headers])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       SOURCE-COMPUTER. GNU-LINUX.
       SPECIAL-NAMES.
            SYMBOLIC NL IS 101
                     NL2   102
            NUMERIC SIGN TRAILING SEPARATE
            DECIMAL-POINT IS COMMA
            .

            SELECT PRINT-FILE ASSIGN "EXTRXW"
            ORGANIZATION LINE SEQUENTIAL
            .
       DATA DIVISION.
       FD  PRINT-FILE EXTERNAL.
       01  PRINT-REC          PIC X(64).

           DISPLAY "X"
           END-DISPLAY
           ACCEPT OMITTED
           END-ACCEPT
           GOBACK
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:2: error: PROGRAM-ID header missing
prog.cob:2: error: ENVIRONMENT DIVISION header missing
prog.cob:2: error: CONFIGURATION SECTION header missing
prog.cob:10: error: INPUT-OUTPUT SECTION header missing
prog.cob:10: error: FILE-CONTROL header missing
prog.cob:14: error: FILE SECTION header missing
prog.cob:17: error: PROCEDURE DIVISION header missing
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [0], [],
[prog.cob:2: warning: PROGRAM-ID header missing - assumed
prog.cob:2: warning: ENVIRONMENT DIVISION header missing - assumed
prog.cob:2: warning: CONFIGURATION SECTION header missing - assumed
prog.cob:10: warning: INPUT-OUTPUT SECTION header missing - assumed
prog.cob:10: warning: FILE-CONTROL header missing - assumed
prog.cob:14: warning: FILE SECTION header missing - assumed
prog.cob:17: warning: PROCEDURE DIVISION header missing - assumed
])

AT_CLEANUP


AT_SETUP([one line program])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [           DISPLAY "minimal".
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:1: error: PROGRAM-ID header missing
prog.cob:1: error: PROCEDURE DIVISION header missing
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [0], [],
[prog.cob:1: warning: PROGRAM-ID header missing - assumed
prog.cob:1: warning: PROCEDURE DIVISION header missing - assumed
])

AT_CLEANUP


AT_SETUP([empty program])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 999 VALUE 124.
       END PROGRAM prog.
])

# Note: we need to test for generating a valid C source (with normal/no flags)
#       here, not only for COBOL compilation
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBC prog.cob], [0], [], [])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 999 VALUE 124.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBC prog2.cob], [0], [], [])

AT_DATA([prog3.cob], [])

AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:1: error: PROGRAM-ID header missing
])

AT_CHECK([$COMPILE -frelax-syntax-checks prog3.cob], [0], [],
[prog3.cob:1: warning: PROGRAM-ID header missing - assumed
])
AT_CHECK([$COBC -frelax-syntax-checks prog3.cob], [0], [],
[prog3.cob:1: warning: PROGRAM-ID header missing - assumed [[-Wothers]]
])

AT_CLEANUP


AT_SETUP([INSPECT invalid size])
AT_KEYWORDS([misc refmod])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "ALPHABET ALPHA IS ASCII" not ISO

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       ALPHABET ALPHA IS ASCII.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01.
         02 X-POS       PIC 9 VALUE 3.
         02 X           PIC X(8) OCCURS 2.
       PROCEDURE        DIVISION.
           INSPECT X(1) REPLACING ALL SPACES BY "AA".
           INSPECT X(1) REPLACING ALL "ABC"  BY "AA".
           INSPECT X(1) REPLACING ALL "DEF"  BY SPACES.
           INSPECT X(1) CONVERTING SPACES TO "AA".
           INSPECT X(1) CONVERTING "ABC"  TO "AA".
           INSPECT X(1) (X-POS:2) CONVERTING "DEF"  TO SPACES.
           INSPECT X(1) CONVERTING "GHI"  TO ALPHA.
      *>   the following is allowed, see NC221A and ref-mod definition
           INSPECT X(1) CONVERTING "DEF"  TO X(2) (X-POS:3).
           INSPECT X(1) CONVERTING "DEF"  TO X(2) (X-POS:4).
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:14: error: REPLACING operands differ in size
prog.cob:15: error: REPLACING operands differ in size
prog.cob:17: error: CONVERTING operands differ in size
prog.cob:18: error: CONVERTING operands differ in size
prog.cob:20: error: CONVERTING operands differ in size
prog.cob:23: error: CONVERTING operands differ in size
])

AT_CLEANUP


AT_SETUP([INSPECT missing keyword])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "REPLACING" requires CHARACTERS, ALL, LEADING, OR FIRST by ISO

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(8).
       PROCEDURE        DIVISION.
           INSPECT X REPLACING "AB" BY "CD".
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: INSPECT missing ALL/FIRST/LEADING/TRAILING
])

AT_CLEANUP


AT_SETUP([INSPECT repeated keywords])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# TODO - NOT IMPLEMENTED - diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9(5).

       PROCEDURE DIVISION.
           *> Ok
           INSPECT "abcde" TALLYING x FOR CHARACTERS CHARACTERS

           *> Not ok
           INSPECT "abcde" TALLYING x FOR ALL LEADING
               TRAILING ALL ALL ALL TRAILING
           INSPECT "abcde" TALLYING x FOR x FOR LEADING "a"
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:14: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:15: error: missing value between ALL/LEADING/TRAILING words
prog.cob:16: error: TALLYING clause is incomplete
prog.cob:16: error: missing CHARACTERS/ALL/LEADING/TRAILING phrase after FOR phrase
])

AT_CLEANUP


AT_SETUP([INSPECT incomplete clause])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# TODO - NOT IMPLEMENTED - diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9(5).

       PROCEDURE DIVISION.
           INSPECT "abcde" TALLYING x FOR
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: TALLYING clause is incomplete
])
AT_CLEANUP


AT_SETUP([INSPECT multiple BEFORE/AFTER clauses])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT ISO - "BEFORE "A" BEFORE "B" - ISO only allows for one

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC X(10).

       PROCEDURE DIVISION.
           INSPECT x REPLACING CHARACTERS BY "x"
               BEFORE "A" BEFORE "b" AFTER "c"
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: syntax error, unexpected BEFORE
])
AT_CLEANUP


AT_SETUP([CRT STATUS])
AT_KEYWORDS([SPECIAL-NAMES misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# CRT STATUS???

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CRT STATUS IS MY-CRT-STATUS.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CRT STATUS IS MY-CRT-STATUS.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       77 MY-CRT-STATUS PIC 9(04).
       PROCEDURE        DIVISION.
           ACCEPT X END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: 'MY-CRT-STATUS' is not defined
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([SPECIAL-NAMES clause])
AT_KEYWORDS([misc extensions CURSOR CRT STATUS])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# CRT STATUS ???

# FIXME: actually this is the only place for some CRT STATUS checks...

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           CRT STATUS IS MY-CRT-STATUS.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CURSOR-POSITION IS SPECIAL-NAMES CURSOR.
           03  CURSOR-ROW         PIC 999.
           03  CURSOR-COL         PIC 999.
       77  MY-CRT-STATUS PIC 9(04).
       77  CRT-STATUS IS SPECIAL-NAMES CRT STATUS PIC 9(5).
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  CRT-STATUS IS SPECIAL-NAMES CRT STATUS PIC X(5).
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CURSOR-POSITION IS SPECIAL-NAMES CURSOR.
           03  CURSOR-ROW   PIC 999.
           03  CURSOR-COL   PIC 999.
       77  CRT-STATUS       PIC X(4) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog4.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  CURSOR-POSITION IS SPECIAL-NAMES CURSOR.
           03  CURSOR-ROW   PIC 999.
           03  CURSOR-COL   PIC 999.
       77  CRT-STATUS       PIC 9(5) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_DATA([prog5.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  CRT-STATUS   PIC 9(3) IS SPECIAL-NAMES CRT STATUS.
       PROCEDURE        DIVISION.
           ACCEPT OMITTED END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:14: error: duplicate CRT STATUS clause
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:6: error: 'CRT-STATUS' CRT STATUS must be 4 characters long
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog4.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog5.cob], [1], [],
[prog5.cob:6: error: 'CRT-STATUS' CRT STATUS must have at least 4 digits
])

AT_CLEANUP


AT_SETUP([CURRENCY SIGN])
AT_KEYWORDS([SPECIAL-NAMES misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Assuming SPECIAL NAMES is not implemented TODO

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY SIGN IS '*'.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY 'DOLLAR'.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY 'DOLLAR'
           WITH PICTURE SYMBOL '$'.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 SOME-CASH     PIC 9(04).99$.
       PROCEDURE        DIVISION.
           MOVE 123.4 TO SOME-CASH
           DISPLAY SOME-CASH END-DISPLAY.
           STOP RUN.
])

AT_DATA([prog4.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog4.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY '   '
           PICTURE SYMBOL '*'.
])

AT_DATA([prog5.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog5.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY ' T '
           PICTURE SYMBOL ' '.
])

AT_DATA([prog6.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog6.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY '+-'
           PICTURE SYMBOL 'TT'.
])

AT_DATA([prog7.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog7.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY SIGN IS 'T'.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 SOME-CASH     PIC 9(04).99T.
       PROCEDURE        DIVISION.
           MOVE 123.4 TO SOME-CASH
           DISPLAY SOME-CASH END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: invalid character '*' in currency symbol
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:7: error: currency symbol must be one character long
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [0], [],
[prog3.cob:7: warning: separate currency symbol and currency string is not implemented
])
AT_CHECK([$COMPILE_ONLY prog4.cob], [1], [],
[prog4.cob:7: warning: separate currency symbol and currency string is not implemented
prog4.cob:7: error: invalid CURRENCY SIGN '   '
prog4.cob:8: error: invalid character '*' in currency symbol
])
AT_CHECK([$COMPILE_ONLY prog5.cob], [1], [],
[prog5.cob:7: warning: separate currency symbol and currency string is not implemented
prog5.cob:8: error: invalid character ' ' in currency symbol
])
AT_CHECK([$COMPILE_ONLY prog6.cob], [1], [],
[prog6.cob:7: warning: separate currency symbol and currency string is not implemented
prog6.cob:7: error: invalid CURRENCY SIGN '+-'
prog6.cob:8: error: currency symbol must be one character long
])
AT_CHECK([$COMPILE_ONLY prog7.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([SWITCHES])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Assuming SPECIAL NAMES is not implemented TODO

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           SW1
             ON  IS SWIT1-ON
             OFF IS SWIT1-OFF
           .
           SWITCH B IS SWITCH-B
             ON  IS SWIT2-ON
             OFF IS SWIT2-OFF
           .
           SWITCH-25
             ON  IS SWIT25-ON
             OFF IS SWIT25-OFF
           .
           SWITCH-25
             ON  IS SWIT25-IS-ON
             OFF IS SWIT25-IS-OFF
           .
           SWITCH 25
             ON  IS SWIT25-SP-ON
             OFF IS SWIT25-SP-OFF
           .
           SWITCH Y
             ON  IS SWIT25-Y-ON
             OFF IS SWIT25-Y-OFF
           .
           SWITCH Z
             ON  IS SWIT26-ON
             ON  IS SWIT26-OFF
           .
           SWITCH-32
             ON  IS SWIT32-ON
           .
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  SWITCH       PIC 99 VALUE 12.
       PROCEDURE        DIVISION.
           ADD SWITCH 1 GIVING SWITCH
           END-ADD.
           IF SWITCH NOT = 13
              DISPLAY "SWITCH (variable) WRONG: "
                      SWITCH
              END-DISPLAY
           END-IF.
           IF SWIT1-ON
              DISPLAY "ON"
              END-DISPLAY
           ELSE
              DISPLAY "OFF"
              END-DISPLAY
           END-IF.
           IF SWIT2-ON
              DISPLAY " ON"
              END-DISPLAY
           ELSE
              DISPLAY " OFF"
              END-DISPLAY
           END-IF.
           SET SWITCH-B TO OFF
           IF SWIT2-ON
              CONTINUE
           END-IF.
           IF SWIT25-ON
              CONTINUE
           END-IF.
           IF SWIT26-ON
              CONTINUE
           END-IF.
           IF SWIT32-ON
              CONTINUE
           END-IF.
           IF SWIT32-OFF
              CONTINUE
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: invalid system-name 'SW1'
prog.cob:8: error: ON/OFF usage requires a SWITCH name
prog.cob:9: error: ON/OFF usage requires a SWITCH name
prog.cob:11: error: invalid system-name 'SWITCH B'
prog.cob:12: error: ON/OFF usage requires a SWITCH name
prog.cob:13: error: ON/OFF usage requires a SWITCH name
prog.cob:23: error: invalid system-name 'SWITCH 25'
prog.cob:24: error: ON/OFF usage requires a SWITCH name
prog.cob:25: error: ON/OFF usage requires a SWITCH name
prog.cob:27: error: invalid system-name 'SWITCH Y'
prog.cob:28: error: ON/OFF usage requires a SWITCH name
prog.cob:29: error: ON/OFF usage requires a SWITCH name
prog.cob:31: error: invalid system-name 'SWITCH Z'
prog.cob:32: error: ON/OFF usage requires a SWITCH name
prog.cob:33: error: ON/OFF usage requires a SWITCH name
prog.cob:49: error: 'SWIT1-ON' is not defined
prog.cob:56: error: 'SWIT2-ON' is not defined
prog.cob:63: error: 'SWITCH-B' is not defined
prog.cob:63: error: syntax error, unexpected OFF
prog.cob:70: error: 'SWIT26-ON' is not defined
prog.cob:76: error: 'SWIT32-OFF' is not defined
])
# FIXME: There should be an additional
#prog.cob:19: error: duplicate definition of 'SWITCH-25'
#prog.cob:15: note: 'SWITCH-25' previously defined here
#
AT_CHECK([$COMPILE_ONLY -std=acu-strict -fsystem-name=SW1 -fno-relax-syntax-checks prog.cob], [1], [],
[prog.cob:33: error: duplicate ON clause
prog.cob:76: error: 'SWIT32-OFF' is not defined
])
# FIXME: There should be an additional
#prog.cob:19: error: duplicate definition of 'SWITCH-25'
#prog.cob:15: note: 'SWITCH-25' previously defined here
#prog.cob:23: error: duplicate definition of 'SWITCH 25'
#prog.cob:15: note: 'SWITCH-25' previously defined here
#prog.cob:27: error: duplicate definition of 'SWITCH Y'
#prog.cob:15: note: 'SWITCH-25' previously defined here

AT_CLEANUP


AT_SETUP([unexpected mnemonic-name location])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Assuming SPECIAL NAMES is not implemented TODO
# Assuming MNEMONICs are not implemented TODO

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       SPECIAL-NAMES.
           stdin IS my-stdin
           .
       PROCEDURE      DIVISION.
           CALL "something" USING stdout
           CALL "something" USING stdin
           CALL "something" USING my-stdin
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: invalid mnemonic identifier
prog.cob:11: error: invalid mnemonic identifier
prog.cob:12: error: invalid mnemonic identifier
])

AT_CLEANUP


AT_SETUP([wrong device for mnemonic-name])
AT_KEYWORDS([misc ACCEPT DISPLAY SPECIAL-NAMES])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# SPecial names for IBM SYSOUT, SYSIN not implemented DIALOG

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77 var          PIC x.
       PROCEDURE       DIVISION.
           ACCEPT  var FROM SYSOUT
           DISPLAY var UPON SYSIN
           ACCEPT  var FROM SYSIN
           DISPLAY var UPON SYSOUT
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: 'SYSOUT' is not an input device
prog.cob:9: error: 'SYSIN' is not an output device
])

AT_CLEANUP


AT_SETUP([missing mnemonic-name declaration])
AT_KEYWORDS([misc ACCEPT SPECIAL-NAMES])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Assuming SPECIAL NAMES is not implemented TODO
# Assuming MNEMONICs are not implemented TODO
# Being lenient. compiler DIES at the ACCEPT TODO

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77 var          PIC x.
       PROCEDURE       DIVISION.
           ACCEPT var FROM mnemonic-name
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: unknown device 'mnemonic-name'; not defined in SPECIAL-NAMES
])

AT_CLEANUP


AT_SETUP([unknown device in dialect])
AT_KEYWORDS([misc ACCEPT DISPLAY SPECIAL-NAMES])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT/DISPLAY from/to COMMAND-LINE not yet implemented TODO
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       77 var          PIC x.
       PROCEDURE       DIVISION.
           ACCEPT var  FROM COMMAND-LINE
           DISPLAY var UPON COMMAND-LINE
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -fnot-reserved=COMMAND-LINE prog.cob], [1], [],
[prog.cob:8: error: unknown device 'COMMAND-LINE'; it may exist in another dialect
])

AT_CLEANUP


AT_SETUP([ACCEPT WITH ( NO ) UPDATE / DEFAULT])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X                 END-ACCEPT.
           ACCEPT X WITH    UPDATE  END-ACCEPT.
           ACCEPT X WITH    DEFAULT END-ACCEPT.
           ACCEPT X WITH NO UPDATE  END-ACCEPT.
           ACCEPT X WITH NO DEFAULT END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -faccept-update prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH ( NO ) UPDATE / DEFAULT])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X                 END-ACCEPT.
           ACCEPT X WITH    UPDATE  END-ACCEPT.
           ACCEPT X WITH    DEFAULT END-ACCEPT.
           ACCEPT X WITH NO UPDATE  END-ACCEPT.
           ACCEPT X WITH NO DEFAULT END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -faccept-update prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH AUTO / TAB])
AT_KEYWORDS([AUTO-SKIP AUTOTERMINATE misc extensions screen])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X                       END-ACCEPT.
           ACCEPT X WITH    AUTO          END-ACCEPT.
           ACCEPT X WITH    AUTO-SKIP     END-ACCEPT.
           ACCEPT X WITH    AUTOTERMINATE END-ACCEPT.
           ACCEPT X WITH    TAB           END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -faccept-auto prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH AUTO / TAB])
AT_KEYWORDS([AUTO-SKIP AUTOTERMINATE misc extensions screen])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       PROCEDURE        DIVISION.
           ACCEPT X                       END-ACCEPT.
           ACCEPT X WITH    AUTO          END-ACCEPT.
           ACCEPT X WITH    AUTO-SKIP     END-ACCEPT.
           ACCEPT X WITH    AUTOTERMINATE END-ACCEPT.
           ACCEPT X WITH    TAB           END-ACCEPT.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -faccept-auto prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH LOWER / UPPER])
AT_KEYWORDS([misc extensions screen])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       PROCEDURE        DIVISION.
           ACCEPT X WITH LOWER     END-ACCEPT.
           ACCEPT X WITH UPPER     END-ACCEPT.
           ACCEPT X      LOWER
           ACCEPT X      UPPER
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH LOWER / UPPER])
AT_KEYWORDS([misc extensions screen])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       PROCEDURE        DIVISION.
           ACCEPT X WITH LOWER     END-ACCEPT.
           ACCEPT X WITH UPPER     END-ACCEPT.
           ACCEPT X      LOWER
           ACCEPT X      UPPER
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([ACCEPT WITH SIZE])
AT_KEYWORDS([PROTECTED SIZE misc extensions screen])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# ACCEPT WITH is an extension, not ISO-IEC2014 DIALECT(?)

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       01 Y             PIC 9(04) BINARY VALUE 4.
       PROCEDURE        DIVISION.
           ACCEPT X WITH           SIZE    0 END-ACCEPT.
           ACCEPT X WITH           SIZE IS 1 END-ACCEPT.
           ACCEPT X WITH PROTECTED SIZE    2 END-ACCEPT.
           ACCEPT X WITH PROTECTED SIZE IS 3 END-ACCEPT.
           ACCEPT X                SIZE    Y END-ACCEPT.
           ACCEPT X                SIZE    0
           ACCEPT X                SIZE IS 1
           ACCEPT X      PROTECTED SIZE    2
           ACCEPT X      PROTECTED SIZE IS 3
           ACCEPT X                SIZE    Y
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([DISPLAY WITH SIZE])
AT_KEYWORDS([SIZE misc extensions screen])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# DISPLAY AT is an extension, not ISO-IEC2014 DIALECT(?)

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(05).
       01 Y             PIC 9(04) BINARY VALUE 7.
       PROCEDURE        DIVISION.
           DISPLAY X AT 0101 WITH SIZE    5 END-DISPLAY.
           DISPLAY X AT 0101 WITH SIZE IS 6 END-DISPLAY.
           DISPLAY X AT 0101 WITH SIZE IS Y END-DISPLAY.
           DISPLAY X AT 0101      SIZE    5 END-DISPLAY.
           DISPLAY X AT 0101      SIZE IS 6 END-DISPLAY.
           DISPLAY X AT 0101      SIZE IS Y END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([line overflow in fixed-form / free-form])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Testing source format violations. Premature. TODO

# We're testing trailing tabs and whitespace (should not lead to warning)
# along with comments after boundaries (col 72 / col 512)

# remark: some editors remove trailing spaces, the  workaround: add "_" and
# remove it later via sed; AT_DATA would not do that when using double [[  ]]

AT_DATA([prog_tmpl.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.                                           																																																																																																																																		_

his is a real comment
       PROCEDURE        DIVISION.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  This is commentary only
           CONTINUE.                                              *> comment after column 72
      *    This is a very long comment that exceeds column 72 but doesn't exceed 512 bytes, therefore not leading to a line overflow. As it is a comment line there is no "Source text after column 72" warning
           CONTINUE.                                                    CONTINUE.
           CONTINUE.                                                                        _
           STOP RUN.
])

# AT_DATA workaround via sed:
AT_CHECK([$SED -e 's/_$//' prog_tmpl.cob > prog.cob], [0], [], [])

AT_CHECK([$COBC -fsyntax-only -fixed -Wextra prog.cob], [0], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:11: warning: source text after program-text area (column 72) [[-Wdangling-text]]
])

AT_CHECK([$COBC -fsyntax-only -free -Wextra prog.cob], [1], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: error: unknown statement 'This'
])

AT_CHECK([$COBC -fsyntax-only -F -Wextra prog.cob], [1], [],
[prog.cob:7: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: warning: source text exceeds 512 bytes, will be truncated [[-Wothers]]
prog.cob:8: error: unknown statement 'This'
])

AT_CLEANUP


AT_SETUP([continuation Indicator - too many lines])
AT_KEYWORDS([misc fixed literals listing])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Premature continuation checkiing TODO

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    ' ' END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:538: error: buffer overrun - too many continuation lines
])

# extra test with listing as this is an edge case there
AT_CAPTURE_FILE([prog.lst])
AT_CHECK([$COMPILE_ONLY -t prog.lst prog.cob], [1], [],
[prog.cob:538: error: buffer overrun - too many continuation lines
])

AT_CLEANUP


AT_SETUP([continuation of COBOL words])
AT_KEYWORDS([misc fixed literals])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Gnu flags

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           GO
      -    BACK.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [0], [],
[prog.cob:6: warning: continuation of COBOL words is archaic in COBOL 2014
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:6: warning: continuation of COBOL words used
])

AT_CLEANUP


AT_SETUP([literal too long])
AT_KEYWORDS([misc literals literal-length continuation listing])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f


AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    '
      -    ' '.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY '    '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           '                                                                                                                                                                                                                                             '-
           ' ' END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: error: invalid literal: '                                   ...'
prog.cob:9: error: literal length exceeds 8191 characters
])

AT_CHECK([$COMPILE_ONLY -fliteral-length=160 prog.cob], [1], [],
[prog.cob:9: error: invalid literal: '                                   ...'
prog.cob:9: error: literal length exceeds 160 characters
])

AT_CHECK([$COMPILE_ONLY -free prog2.cob], [1], [],
[prog2.cob:9: error: invalid literal: '                                   ...'
prog2.cob:9: error: literal length 8299 exceeds 8191 characters
])

# extra test with listing as this is an edge case there
AT_CAPTURE_FILE([prog.lst])
AT_CHECK([$COMPILE_ONLY -t prog.lst prog.cob], [1], [],
[prog.cob:9: error: invalid literal: '                                   ...'
prog.cob:9: error: literal length exceeds 8191 characters
])

AT_CAPTURE_FILE([prog2.lst])
AT_CHECK([$COMPILE_ONLY -free -t prog2.lst prog2.cob], [1], [],
[prog2.cob:9: error: invalid literal: '                                   ...'
prog2.cob:9: error: literal length 8299 exceeds 8191 characters
])

AT_CLEANUP


AT_SETUP([line and floating comments])
AT_KEYWORDS([misc extensions indicator])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
      *    DISPLAY 'COMMENT'             END-DISPLAY
      /    DISPLAY 'COMMENTSLASH'        END-DISPLAY
*          DISPLAY 'MFCOMMENTASTERISK'   END-DISPLAY
/          DISPLAY 'MFCOMMENTSLASH'      END-DISPLAY
 *         DISPLAY 'NOMFCOMMENTASTERISK' END-DISPLAY
 /         DISPLAY 'NOMFCOMMENTSLASH'    END-DISPLAY
        *> DISPLAY 'FLOATING'            END-DISPLAY
 *>        DISPLAY 'NOFLOATING'          END-DISPLAY
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
      *    DISPLAY 'COMMENT'             END-DISPLAY
      /    DISPLAY 'COMMENTSLASH'        END-DISPLAY
      $    DISPLAY 'COMMENTDOLLAR'       END-DISPLAY
*          DISPLAY 'MFCOMMENTASTERISK'   END-DISPLAY
/          DISPLAY 'MFCOMMENTSLASH'      END-DISPLAY
 *         DISPLAY 'NOMFCOMMENTASTERISK' END-DISPLAY
 /         DISPLAY 'NOMFCOMMENTSLASH'    END-DISPLAY
        *> DISPLAY 'FLOATING'            END-DISPLAY
        |  DISPLAY 'ACUFLOATING'         END-DISPLAY
 |         DISPLAY 'NOACUFLOATING'       END-DISPLAY
 *>        DISPLAY 'NOFLOATING'          END-DISPLAY
           STOP RUN.
])

AT_DATA([prog3.cob], [
IDENTIFICATION   DIVISION.
PROGRAM-ID.      prog3.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
DATA             DIVISION.
WORKING-STORAGE  SECTION.
PROCEDURE        DIVISION.
      * DISPLAY 'NOCOMMENT'           END-DISPLAY
      / DISPLAY 'NOCOMMENTSLASH'      END-DISPLAY
      $ DISPLAY 'NOCOMMENTDOLLAR'     END-DISPLAY
*       DISPLAY 'NOMFCOMMENTASTERISK' END-DISPLAY
/       DISPLAY 'NOMFCOMMENTSLASH'    END-DISPLAY
 |      DISPLAY 'ACUFLOATING'         END-DISPLAY
 *>     DISPLAY 'FLOATING'            END-DISPLAY
      x DISPLAY 'WRONGINDICATOR'      END-DISPLAY
        STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[MFCOMMENTASTERISK
MFCOMMENTSLASH
NOMFCOMMENTASTERISK
NOMFCOMMENTSLASH
NOFLOATING
], [])

AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:11: error: invalid indicator '$' at column 7
prog2.cob:17: error: invalid symbol '|' - skipping word
])

# note: for checking the result we actually either need to run the program
#       or change it to string concatenation and raise a constant compile time warning
#       we do (historically) the first (for now)
#
AT_CHECK([$COMPILE -fmfcomment prog.cob], [0], [],
[])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[NOMFCOMMENTASTERISK
NOMFCOMMENTSLASH
NOFLOATING
], [])

AT_CHECK([$COMPILE_ONLY -fmfcomment prog2.cob], [1], [],
[prog2.cob:11: error: invalid indicator '$' at column 7
prog2.cob:17: error: invalid symbol '|' - skipping word
])

# COMPILE needed, see note above
AT_CHECK([$COMPILE -facucomment prog.cob -o prog1], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog1], [0],
[MFCOMMENTASTERISK
MFCOMMENTSLASH
NOMFCOMMENTASTERISK
NOMFCOMMENTSLASH
NOFLOATING
], [])

# COMPILE needed, see note above
AT_CHECK([$COMPILE -facucomment prog2.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[MFCOMMENTASTERISK
MFCOMMENTSLASH
NOMFCOMMENTASTERISK
NOMFCOMMENTSLASH
NOACUFLOATING
NOFLOATING
], [])


AT_CHECK([$COMPILE_ONLY -free prog3.cob], [1], [],
[prog3.cob:11: warning: spurious '$' detected - ignored
prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:12: error: syntax error, unexpected *
prog3.cob:13: error: syntax error, unexpected /
prog3.cob:14: error: invalid symbol '|' - skipping word
prog3.cob:16: error: syntax error, unexpected Identifier
])
AT_CHECK([$COMPILE_ONLY -free -fmfcomment prog3.cob], [1], [],
[prog3.cob:11: warning: spurious '$' detected - ignored
prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:12: error: syntax error, unexpected *
prog3.cob:13: error: syntax error, unexpected /
prog3.cob:14: error: invalid symbol '|' - skipping word
prog3.cob:16: error: syntax error, unexpected Identifier
])
AT_CHECK([$COMPILE_ONLY -free -facucomment prog3.cob], [1], [],
[prog3.cob:11: warning: spurious '$' detected - ignored
prog3.cob:9: error: syntax error, unexpected *
prog3.cob:10: error: syntax error, unexpected /
prog3.cob:12: error: syntax error, unexpected *
prog3.cob:13: error: syntax error, unexpected /
prog3.cob:16: error: syntax error, unexpected Identifier
])
# Check that invalid indicator and doesn't abort preprocessing
# and that errors in preprocessing doesn't abort compilation
AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:2: error: invalid indicator 'F' at column 7
prog3.cob:3: error: invalid indicator 'M' at column 7
prog3.cob:4: error: invalid indicator 'N' at column 7
prog3.cob:5: error: invalid indicator 'U' at column 7
prog3.cob:7: error: invalid indicator 'G' at column 7
prog3.cob:8: error: invalid indicator 'U' at column 7
prog3.cob:11: error: invalid indicator '$' at column 7
prog3.cob:16: error: invalid indicator 'x' at column 7
prog3.cob:6: error: PROGRAM-ID header missing
prog3.cob:6: error: PROCEDURE DIVISION header missing
prog3.cob:6: error: syntax error, unexpected DIVISION
])

AT_CLEANUP


AT_SETUP([word length])
AT_KEYWORDS([misc word-length])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FILLER        PIC 9(01) VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH30    VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-31   VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-32C  VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES      VALUE 3.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE VALUE 4.
       PROCEDURE        DIVISION.
       SOME-SPECIAL-PAR-WITH-LENGTH30.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH30   TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-31.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-31  TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-32C.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-32C TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE TO TRUE.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  FILLER        PIC 9(01) VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH30    VALUE 0.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-31   VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-32C  VALUE 1.
           88 SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES      VALUE 3.
       PROCEDURE        DIVISION.
       SOME-SPECIAL-PAR-WITH-LENGTH30.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH30   TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-31.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-31  TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-32C.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-32C TO TRUE.
       SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES.
           SET  SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES TO TRUE.
           STOP RUN.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 COUNTER       PIC 9 VALUE 0.
       PROCEDURE        DIVISION.

       00000000000000000000000000000000000000000000000000000000000
       SECTION.
       000000000000000000000000000000000000000000000000000000000000.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           00000000000000000000000000000000000000000000000000000000000
           WHEN 2
           PERFORM
           000000000000000000000000000000000000000000000000000000000000
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

       100000000000000000000000000000000000000000000000000000000001
       SECTION.
       20000000000000000000000000000000000000000000000000000000002.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           100000000000000000000000000000000000000000000000000000000001
           WHEN 2
           PERFORM
           20000000000000000000000000000000000000000000000000000000002
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=31 prog.cob], [1], [],
[prog.cob:11: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog.cob:12: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:13: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-31':
prog.cob:19: error: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-32C'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog.cob:20: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog.cob:21: error: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog.cob:22: error: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:23: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE':
prog.cob:24: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=45 prog.cob], [1], [],
[prog.cob:12: error: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:13: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog.cob:21: error: word length exceeds 45 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog.cob:22: error: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog.cob:23: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE':
prog.cob:24: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=60 prog.cob], [1], [],
[prog.cob:13: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog.cob:23: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
prog.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE':
prog.cob:24: error: word length exceeds maximum of 63 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-90-CHARS-WHO-NEEDS-THAT-LONG-NAMES-I-CANNOT-THINK-OF-SOMEONE'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=45 -frelax-syntax-checks prog2.cob], [0], [],
[prog2.cob:12: warning: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog2.cob:20: warning: word length exceeds 45 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog2.cob:21: warning: word length exceeds 45 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
])

AT_CHECK([$COMPILE_ONLY -free -fword-length=60 prog2.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -free -fword-length=31 -frelax-syntax-checks prog2.cob], [0], [],
[prog2.cob:11: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog2.cob:12: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-31':
prog2.cob:18: warning: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-32C'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-32C':
prog2.cob:19: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-32C'
prog2.cob:20: warning: word length exceeds 31 characters: 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
prog2.cob: in paragraph 'SOME-SPECIAL-PAR-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES':
prog2.cob:21: warning: word length exceeds 31 characters: 'SOME-SPECIAL-VAL-WITH-LENGTH-58C-WHO-NEEDS-THAT-LONG-NAMES'
])

AT_CHECK([$COMPILE_ONLY -fword-length=59 prog3.cob], [1], [],
[prog3.cob: in section '00000000000000000000000000000000000000000000000000000000000':
prog3.cob:11: error: word length exceeds 59 characters: '000000000000000000000000000000000000000000000000000000000000'
prog3.cob: in paragraph '000000000000000000000000000000000000000000000000000000000000':
prog3.cob:25: error: word length exceeds 59 characters: '100000000000000000000000000000000000000000000000000000000001'
])

AT_CLEANUP


AT_SETUP([Numeric literals])
AT_KEYWORDS([misc numeric-literal-length])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 COUNTER       PIC 9 VALUE 0.
       PROCEDURE        DIVISION.

      *> No literals at all
       00000000000000000000000000000000000000000000000000000000000
       SECTION.
       000000000000000000000000000000000000000000000000000000000000.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           00000000000000000000000000000000000000000000000000000000000
           WHEN 2
           PERFORM
           000000000000000000000000000000000000000000000000000000000000
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

       100000000000000000000000000000000000000000000000000000000001
       SECTION.
       20000000000000000000000000000000000000000000000000000000002.
           ADD 1 TO COUNTER END-ADD
           EVALUATE COUNTER
           WHEN 1
           PERFORM
           100000000000000000000000000000000000000000000000000000000001
           WHEN 2
           PERFORM
           20000000000000000000000000000000000000000000000000000000002
           WHEN 3
           MOVE 0 TO COUNTER
           END-EVALUATE.

           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
       PROCEDURE        DIVISION.

           *> Valid literals, depending on numeric literal size
           DISPLAY 1.0076, +100000.03, +1.0, -0078,
               +.1234567890123456789012345678901234
               .123456789012345678901234567890123450
           END-DISPLAY

           *> Invalid literals
           DISPLAY 1.03.0     END-DISPLAY
           DISPLAY --123      END-DISPLAY
           DISPLAY -123-      END-DISPLAY
           DISPLAY -123-456   END-DISPLAY
           DISPLAY -123-4.56  END-DISPLAY
           DISPLAY -12.3-456  END-DISPLAY
           DISPLAY -12.3-4.56 END-DISPLAY
           DISPLAY 1000003+   END-DISPLAY
           DISPLAY 1.000003+  END-DISPLAY
           DISPLAY .3+        END-DISPLAY
           DISPLAY 3.+        END-DISPLAY

           STOP RUN.
])

AT_DATA([prog3.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog3.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES. DECIMAL-POINT IS COMMA.
       PROCEDURE        DIVISION.

           *> Valid literals, depending on numeric literal size
           DISPLAY 1,0076, +100000,03, +1,0, -0078,
               +,1234567890123456789012345678901234
               ,123456789012345678901234567890123450
           END-DISPLAY

           *> Invalid literals
           DISPLAY 1,03,0     END-DISPLAY
           DISPLAY --123      END-DISPLAY
           DISPLAY -123-      END-DISPLAY
           DISPLAY -123-456   END-DISPLAY
           DISPLAY -123-4,56  END-DISPLAY
           DISPLAY -12,3-456  END-DISPLAY
           DISPLAY -12,3-4,56 END-DISPLAY
           DISPLAY 1000003+   END-DISPLAY
           DISPLAY 1,000003+  END-DISPLAY
           DISPLAY ,3+        END-DISPLAY
           DISPLAY 3,+        END-DISPLAY

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fliteral-length=1 -fnumeric-literal-length=1 -fword-length=60 prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog2.cob], [1], [],
[prog2.cob:17: error: syntax error, unexpected -, expecting [(]
prog2.cob:18: error: syntax error, unexpected -
prog2.cob:23: error: syntax error, unexpected +
prog2.cob:24: error: syntax error, unexpected +
prog2.cob:25: error: syntax error, unexpected +
prog2.cob:26: error: syntax error, unexpected +
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:17: error: syntax error, unexpected -, expecting [(]
prog3.cob:18: error: syntax error, unexpected -
prog3.cob:23: error: syntax error, unexpected +
prog3.cob:24: error: syntax error, unexpected +
prog3.cob:25: error: syntax error, unexpected +
prog3.cob:26: error: syntax error, unexpected +
])

AT_CLEANUP


AT_SETUP([national literals])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# TODO - NOT IMPLEMENTED - National literals

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           DISPLAY N"UTF-16 string".
           DISPLAY N'0123456789ABCDEF'.
           DISPLAY N"0123456789ABCDEF"-
                   N"0123456789ABCDEF".
           DISPLAY NC"0123456789ABCDEF"-
                   NC'0123456789ABCDEF'.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:5: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:6: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:7: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:8: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:9: warning: national-character literal used
prog.cob:9: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:10: warning: national-character literal used
prog.cob:10: warning: handling of national literal is unfinished; implementation is likely to be changed
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:5: error: national literal does not conform to COBOL 85
prog.cob:6: error: national literal does not conform to COBOL 85
prog.cob:7: error: national literal does not conform to COBOL 85
prog.cob:8: error: national literal does not conform to COBOL 85
prog.cob:9: error: national-character literal does not conform to COBOL 85
prog.cob:10: error: national-character literal does not conform to COBOL 85
])

AT_CLEANUP


AT_SETUP([binary-hexadecimal literals])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# TODO - NOT IMPLEMENTED - Hex literal continuation

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY BX"AB05CD0F"
           DISPLAY        BX"0123456789ABCDEF0123456789ABCDEF0123456789A
      -              "BCDEF" *> " Syntax highlighting hack

           DISPLAY BX"A"
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: invalid BX literal: '0123456789ABCDEF0123456789ABCDEF01 ...'
prog.cob:6: error: literal length 192 exceeds 64 characters
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:5: error: hexadecimal-boolean literal does not conform to COBOL 85
prog.cob:6: error: hexadecimal-boolean literal does not conform to COBOL 85
prog.cob:9: error: hexadecimal-boolean literal does not conform to COBOL 85
])

AT_CLEANUP


AT_SETUP([HP COBOL octal literals])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -W

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           *> Valid forms
           DISPLAY %17 %37777777777 %456

           *> invalid forms
           DISPLAY %11111111111111111111111
           DISPLAY %89

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -Wno-unfinished -fhp-octal-literals=ok prog.cob], [1], [],
[prog.cob:9: error: invalid % literal: '11111111111111111111111'
prog.cob:9: error: literal length 23 exceeds 22 characters
prog.cob:10: error: invalid % literal: '89'
prog.cob:10: error: literal contains invalid character '8'
prog.cob:10: error: literal contains invalid character '9'
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:6: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:6: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:9: error: HP COBOL octal literal does not conform to COBOL 2014
prog.cob:10: error: HP COBOL octal literal does not conform to COBOL 2014
])

AT_CLEANUP


AT_SETUP([adding/removing reserved words])
AT_KEYWORDS([misc extensions configuration])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  hello       PIC X.
       01  foo         PIC X.
       01  bars        PIC X.
       01  file        PIC X.
       01  background-color PIC X.

       PROCEDURE       DIVISION.
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -freserved=hello,foo,bars,background-color -fnot-reserved=file prog.cob], [1], [],
[prog.cob:7: error: 'hello' is a reserved word, but isn't supported
prog.cob:8: error: 'foo' is a reserved word, but isn't supported
prog.cob:9: error: 'bars' is a reserved word, but isn't supported
prog.cob:11: error: syntax error, unexpected BACKGROUND-COLOR
])
AT_CHECK([$COMPILE_ONLY -fnot-reserved=file prog.cob], [0], [])
AT_CLEANUP


AT_SETUP([adding aliases])
AT_KEYWORDS([misc extensions configuration reserved])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog.

       PROCEDURE DIVISION.
           FOO "Hello, world!"
           .
])

AT_CHECK([$COMPILE_ONLY -freserved=FOO=DISPLAY* -freserved=BARS:FOO prog.cob], [1], [],
[configuration warning: -freserved=FOO=DISPLAY*: ignored asterisk at end of alias target
configuration error:
alias target 'FOO' is not a default reserved word
])

AT_CHECK([$COMPILE_ONLY -freserved=FOO=DISPLAY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -freserved=FOO:DISPLAY prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -freserved=" FOO = DISPLAY  " prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([overriding default words])
AT_KEYWORDS([misc extensions configuration reserved])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog.

       PROCEDURE DIVISION.
           COMP-1 "Hello, world!"
           DISPLAY "Hello, world!".
])

AT_CHECK([$COMPILE_ONLY -freserved=COMP-1=DISPLAY prog.cob], [0], [], [])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog2.

       PROCEDURE DIVISION.
           COMP-1 "Hello, world!".
           DISPLAY "Hello, world!".
])

AT_CHECK([$COMPILE_ONLY -fnot-reserved=DISPLAY -freserved=COMP-1=DISPLAY prog2.cob], [1], [],
[prog2.cob:7: error: unknown statement 'DISPLAY'; it may exist in another dialect
])

AT_CLEANUP


AT_SETUP([CONF. SECTION paragraphs in wrong order])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# TODO - NOT IMPLEMENTED - Diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       REPOSITORY.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.
       SPECIAL-NAMES.

       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog2.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.
       REPOSITORY.
       SPECIAL-NAMES.

       END PROGRAM prog2.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog3.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       REPOSITORY.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.

       END PROGRAM prog3.

       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog4.

       ENVIRONMENT    DIVISION.
       CONFIGURATION  SECTION.
       REPOSITORY.
       SPECIAL-NAMES.
       SOURCE-COMPUTER. b.
       OBJECT-COMPUTER. a.

       END PROGRAM prog4.
])

# MF extension, supported by GnuCOBOL
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
# note: testing with lax configuration, otherwise there would be an error
AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:8: error: SOURCE-COMPUTER incorrectly after REPOSITORY used
prog.cob:22: error: SPECIAL-NAMES incorrectly after REPOSITORY used
prog.cob:32: error: SOURCE-COMPUTER incorrectly after REPOSITORY used
prog.cob:43: error: SPECIAL-NAMES incorrectly after REPOSITORY used
prog.cob:44: error: SOURCE-COMPUTER incorrectly after SPECIAL-NAMES used
])
AT_CLEANUP


AT_SETUP([NOT ON EXCEPTION with STATIC CALL convention])
AT_KEYWORDS([misc CALL-CONVENTION])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT ISO: "CALL STATIC"

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           CALL STATIC "stuff"
              ON EXCEPTION
                 CONTINUE
           END-CALL
           GOBACK.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog2.
       PROCEDURE      DIVISION.
           CALL "stuff"
              ON EXCEPTION
                 CONTINUE
           END-CALL
           GOBACK.
])

AT_DATA([prog3.cob], [
       >> CALL-CONVENTION STATIC
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog3.
       PROCEDURE      DIVISION.
           CALL "stuff"
              ON EXCEPTION
                 CONTINUE
           END-CALL
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:5: warning: ON EXCEPTION ignored because of STATIC CALL
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -static prog2.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY prog3.cob], [0], [],
[prog3.cob:6: warning: STATIC CALL convention ignored because of ON EXCEPTION
])
AT_CLEANUP


AT_SETUP([IF-ELSE statement list with invalid syntax])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED: DIAGNOSTIC MESSAGES

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  a-variable PIC 9.

       PROCEDURE DIVISION.
           IF a-variable = 1
               ACCEPT a-variable, not-a-variable
                   ON EXCEPTION
                       CONTINUE
               END-ACCEPT
           ELSE
               CONTINUE
           END-IF
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: syntax error, unexpected Identifier
prog.cob:14: error: syntax error, unexpected END-ACCEPT
prog.cob:15: error: syntax error, unexpected ELSE
prog.cob:17: error: syntax error, unexpected END-IF
])

AT_CLEANUP


AT_SETUP([MF reserved word directives])
AT_KEYWORDS([misc extensions ADDRSV ADDSYN MAKESYN OVERRIDE REMOVE])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# $SET??? DIALECT

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

           *> Valid
           $SET ADDRSV"DOG""CAT"

           *> Valid
           $SET ADD-SYN "VALUE" = "VA"
           *> Bread is not reserved.
           $SET ADDSYN "BREAD" = "BARA"
           *> ID is already reserved
           $SET ADDSYN "IDENTIFICATION" = "ID"

           *> Valid
           $SET MAKESYN(PROGRAM) = (FUNCTION)
           *> BREAD is not reserved.
           $SET MAKESYN "BREAD" = "PROGRAM"
           $SET MAKESYN "PROGRAM" = "BREAD"

           *> Valid
           $SET OVERRIDE "DIVISION" = "DIV" "JUST" = "JS"
           *> Bread is not reserved
           $SET OVERRIDE "BREAD"="BARA"
           *> ID is already reserved
           $SET OVERRIDE "IDENTIFICATION"="ID"

           *> Valid
           $SET REMOVE "BREAD" (BARA)REMOVE(DOG)

       DATA DIV.
       WORKING-STORAGE SECTION.
       *> Check ADDSYN and OVERRIDE work correctly
       01  just PIC XX VA "1" JS.
       *> Check ADDRSV
       01  cat PIC 9 VA 1.
       *> Check REMOVE
       01  dog PIC 9 VA 1.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:13: error: 'ID' is already reserved; you may want MAKESYN instead
prog.cob:18: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:19: error: 'BREAD' is not a reserved word; you may want ADDSYN or OVERRIDE instead
prog.cob:24: error: 'BREAD' is not a default reserved word, so cannot be aliased
prog.cob:26: error: 'ID' is already reserved; you may want MAKESYN instead
prog.cob:36: error: 'cat' is a reserved word, but isn't supported
])

AT_CLEANUP


AT_SETUP([TURN directive])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# >> TURN not ISO-IEC2014 DIALECT EXTENSION

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       *> Valid
       >> TURN ec-i-o f CHECKING ON
       *> Invalid
       >> TURN dd CHECKING ON
       >> TURN ec-all f CHECKING ON
       >> TURN EC-I-O-invalid-KEY not-exist CHECKING OFF
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT F ASSIGN "f.txt", SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD  f.
       01  f-rec        PIC X.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: invalid exception-name: DD
prog.cob:7: error: invalid exception-name: F
prog.cob:8: error: file 'not-exist' does not exist
])

AT_CLEANUP


AT_SETUP([STRING / UNSTRING with invalid syntax])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED: DIAGNOSTIC MESSAGES

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  a   PIC X.
       77  b   PIC X.
       77  c   PIC XXX.

       PROCEDURE DIVISION.
           STRING   DELIMITED BY SPACE INTO
           END-STRING
           STRING a DELIMITED BY SPACE c
           END-STRING
           STRING a DELIMITED BY SPACE INTO
           END-STRING
           STRING
                  DELIMITED BY SPACE
                  INTO c
           END-STRING
           STRING a DELIMITED BY SPACE

                  DELIMITED BY SIZE
                  INTO c
           END-STRING
           STRING a DELIMITED BY SPACE
                  b DELIMITED BY SIZE
                  INTO c
           END-STRING
      *
           UNSTRING   DELIMITED BY SPACE INTO a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE INTO
           END-UNSTRING
           UNSTRING   DELIMITED BY SPACE INTO a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE INTO a
           END-UNSTRING
           UNSTRING c DELIMITED BY SPACE
                      DELIMITED BY SIZE  INTO a
           END-UNSTRING
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: error: syntax error, unexpected DELIMITED
prog.cob:15: error: syntax error, unexpected END-STRING, expecting INTO
prog.cob:17: error: syntax error, unexpected END-STRING, expecting Identifier
prog.cob:19: error: syntax error, unexpected DELIMITED
prog.cob:24: error: syntax error, unexpected DELIMITED, expecting INTO
prog.cob:32: error: syntax error, unexpected DELIMITED
prog.cob:34: error: syntax error, unexpected Identifier, expecting INTO
prog.cob:37: error: syntax error, unexpected END-UNSTRING, expecting Identifier
prog.cob:38: error: syntax error, unexpected DELIMITED
prog.cob:43: error: syntax error, unexpected DELIMITED, expecting INTO
])
AT_CLEANUP


AT_SETUP([invalid INSPECT/TRANSFORM operands])
AT_KEYWORDS([misc INSPECT TRANSFORM])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED: DIAGNOSTIC MESSAGES

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN "A".

       DATA            DIVISION.
       FILE            SECTION.
       FD  f.
       01  f-rec PIC X.

       WORKING-STORAGE SECTION.
       01  not-display PIC 9(5) COMP.
       01  not-a-num   PIC X(5).

       PROCEDURE       DIVISION.
           INSPECT f TALLYING not-a-num FOR ALL 3
               REPLACING FIRST "abcde" BY not-display
           TRANSFORM f FROM 3 TO 2
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:20: error: 'f' is not a field
prog.cob:20: error: 'not-a-num' is not numeric
prog.cob:20: error: 3 is not an alphanumeric literal
prog.cob:20: error: invalid target for TALLYING
prog.cob:21: error: 'not-display' is not USAGE DISPLAY
prog.cob:20: error: REPLACING operands differ in size
prog.cob:20: error: invalid target for REPLACING
prog.cob:22: error: 'f' is not a field
prog.cob:22: error: 3 is not an alphanumeric literal
prog.cob:22: error: 2 is not an alphanumeric literal
prog.cob:22: error: invalid target for TRANSFORM
])
AT_CLEANUP


AT_SETUP([conflicting entry conventions])
AT_KEYWORDS([misc ENTRY-CONVENTION CALL-CONVENTION LINKAGE])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "CALL-CONVENTION" no ISO.

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       OPTIONS.
           ENTRY-CONVENTION COBOL.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.

       PROCEDURE     DIVISION EXTERN.
           CONTINUE
           .
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:11: warning: overriding convention specified in ENTRY-CONVENTION
])

AT_DATA([prog2.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog2.
       OPTIONS.
           ENTRY-CONVENTION COBOL.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       PROCEDURE     DIVISION WITH C LINKAGE.
           CONTINUE
           .
])
AT_CHECK([$COMPILE_ONLY prog2.cob], [0], [],
[prog2.cob:9: warning: overriding convention specified in ENTRY-CONVENTION
])

AT_DATA([prog3.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog3.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.

       PROCEDURE     DIVISION
           EXTERN
           WITH C LINKAGE.
           CONTINUE
       ENTRY 'ANOTHERSTATEMENT'.
           CONTINUE
       ENTRY EXTERN 'ANOTHERSTATEMENT2'.
           CONTINUE
       ENTRY 'ANOTHERSTATEMENT3' WITH C LINKAGE.
           CONTINUE
       ENTRY
           EXTERN
           'ANOTHERSTATEMENT4'
           WITH C LINKAGE.
           CONTINUE
           .
])
AT_CHECK([$COMPILE_ONLY prog3.cob], [1], [],
[prog3.cob:11: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
prog3.cob:22: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
])
AT_CLEANUP


AT_SETUP([conflicting call conventions])
AT_KEYWORDS([misc CALL-CONVENTION LINKAGE])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "ENTRY" not ISO

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       PROCEDURE     DIVISION.
           CALL EXTERN 'callee'.
           CALL 'callee' WITH C LINKAGE.
           CALL
              EXTERN
              'callee'
              WITH C LINKAGE
              .
           GOBACK.
])
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:10: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
])
AT_CHECK([$COMPILE_ONLY -std=cobol85 -freserved=EXTERN,C prog.cob], [1], [],
[prog.cob:5: error: CALL-/ENTRY-CONVENTION does not conform to COBOL 85
prog.cob:6: error: WITH ... LINKAGE does not conform to COBOL 85
prog.cob:8: error: CALL-/ENTRY-CONVENTION does not conform to COBOL 85
prog.cob:10: error: WITH ... LINKAGE does not conform to COBOL 85
prog.cob:10: error: CALL-CONVENTION and WITH LINKAGE are mutually exclusive
])
AT_CLEANUP


AT_SETUP([duplicate PROCEDURE DIVISION/ENTRY USING items])
AT_KEYWORDS([misc DIVISION ENTRY REFERENCE])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENT: Diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA DIVISION.
       LINKAGE SECTION.
       01  p                    PIC 9.
       01  o                    PIC X(5).
       PROCEDURE DIVISION USING p p o.
       ENTRY "sub" USING o p o.
])
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: duplicate USING BY REFERENCE item 'p'
prog.cob:9: error: duplicate USING BY REFERENCE item 'o'
])
AT_CLEANUP


AT_SETUP([ADD / SUBTRACT TABLE])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "ADD TABLE" not ISO

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  tab1.
           03  tab1-entry    OCCURS 5 PIC S999.
       01  tab2.
           03  tab2-entry    OCCURS 7 PIC S99.
           03  tab2b-entry   OCCURS 7.
               05  x         PIC S99.
       01  tab3.
           03  sub-tab-3  OCCURS 2.
               05 tab3-entry OCCURS 5 PIC S999.

       PROCEDURE       DIVISION.
           ADD      TABLE tab1-entry TO   tab2-entry.
           SUBTRACT TABLE tab2-entry FROM tab1-entry.
           ADD      TABLE tab1-entry TO   tab3-entry (1).
           SUBTRACT TABLE tab2-entry FROM tab3-entry (2).
           ADD      TABLE tab1-entry TO   x.
           SUBTRACT TABLE x          FROM tab1-entry.
           ADD      TABLE tab1-entry TO   tab2b-entry.
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:18: warning: ADD TABLE is not implemented
prog.cob:19: warning: SUBTRACT TABLE is not implemented
prog.cob:20: warning: ADD TABLE is not implemented
prog.cob:21: warning: SUBTRACT TABLE is not implemented
prog.cob:22: warning: ADD TABLE is not implemented
prog.cob:23: warning: SUBTRACT TABLE is not implemented
prog.cob:24: warning: ADD TABLE is not implemented
prog.cob:24: error: 'tab2b-entry' is not numeric
])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING invalid ref-mod / subscripts])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# COBOL85 test

# COBOL85 3.2.3 Syntax Rules 10+12 - "no subscripts. not reference-modified"
AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.
       01  FILLER.
           03 x OCCURS 2 PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL OF I (1:1).
           DISPLAY DEBUG-LINE.
       test-DEBUGo SECTION.
           USE FOR DEBUGGING ON ALL OF X (1).
           DISPLAY DEBUG-LINE.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i, x(2)
           STOP RUN.
])


AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:19: error: DEBUGGING target may not be reference modified
prog.cob: in section 'test-DEBUGo':
prog.cob:22: error: DEBUGGING target may not be subscripted
])

AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING duplicate targets])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# USE FOR DEBUGGING not ISO

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.
       01  j           PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON MAIN MAIN.
           DISPLAY DEBUG-LINE.
       test-DEBUG2 SECTION.
           USE FOR DEBUGGING ON ALL I
                                ALL REFERENCES OF J
                                ALL PROCEDURES.
           DISPLAY DEBUG-LINE.
       test-DEBUG3 SECTION.
           USE FOR DEBUGGING ON ALL PROCEDURES
                                J
                                ALL OF I.
           DISPLAY DEBUG-LINE.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG3':
prog.cob:26: error: duplicate USE DEBUGGING ON ALL PROCEDURES
prog.cob:27: error: duplicate DEBUGGING target: 'j'
prog.cob:28: error: duplicate DEBUGGING target: 'i'
prog.cob: in section 'test-DEBUG':
prog.cob:18: error: DEBUGGING target already specified with ALL PROCEDURES: 'MAIN'
prog.cob:18: error: duplicate DEBUGGING target: 'MAIN'
])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING implicit statements])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# USE FOR DEBUGGING not ISO

# see bug #693, WHEN created an implicit statement before

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTING.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSTFIL1 ASSIGN TO "TSTFIL1"
               ORGANIZATION LINE SEQUENTIAL.
           SELECT TSTFIL2 ASSIGN TO "TSTFIL2"
               ORGANIZATION LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD TSTFIL1.
       01 TSTREC1              PIC X(256).
       FD TSTFIL2.
       01 TSTREC2              PIC X(256).
       WORKING-STORAGE SECTION.
       01 OODB-RESULT                   PIC X(07).

       PROCEDURE DIVISION.
       DECLARATIVES.
       MY-TEST SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF OODB-RESULT.
       I-O-TEST-OODB-RESULT.
           EVALUATE OODB-RESULT
           WHEN SPACES
               DISPLAY "LINE 1"
           WHEN OTHER
               DISPLAY "LINE 2" END-DISPLAY
           END-EVALUATE.
           CLOSE TSTFIL1, TSTFIL2.
       END DECLARATIVES.

       MAIN SECTION.
       000-BEGIN.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([USE FOR DEBUGGING syntax-checks])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)

# TODO: still need tests/checks (3.2.3 Syntax Rules 9+11):
# 09 Identifier must not reference any data item defined in the Report
# Section except sum counters.
# 11 References to the special register DEBUG-ITEM are restricted to
# references from within a debugging section.

AT_XFAIL_IF(true)
# we currently fail to detect references into DECLARATIVES and
# references to debugging-procedures other than PERFORM --> both in prog2

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.
       01  j           PIC 9.

       PROCEDURE DIVISION.
       DECLARATIVES.
       test-DEBUG SECTION.
           USE FOR DEBUGGING ON ALL REFERENCES OF I
                                TEST-debug
                                MAIN.
           DISPLAY DEBUG-LINE.
           PERFORM MAIN. PERFORM TEST-DEBUG2. GO TO TEST-DEBUG2.
       test-DEBUG2 SECTION.
           USE FOR DEBUGGING ON ALL OF I
                                TEST-debug.
           DISPLAY DEBUG-LINE.
       END DECLARATIVES.

       MAIN SECTION.
           MOVE 1 TO i, j
           PERFORM TesT-DebuG
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: in section 'test-DEBUG':
prog.cob:22: warning: 'MAIN' is not in DECLARATIVES
prog.cob:22: error: 'TEST-DEBUG2' may only be referenced with PERFORM
prog.cob:19: error: DEBUGGING target invalid: 'test-DEBUG'
prog.cob: in section 'TEST-DEBUG2':
prog.cob:25: error: DEBUGGING target invalid: 'test-DEBUG'
prog.cob: in section 'MAIN':
prog.cob:31: warning: 'test-DEBUG' is in DECLARATIVES
])

AT_CLEANUP


AT_SETUP([Empty PERFORM with DEBUGGING MODE])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       ENVIRONMENT     DIVISION.
       CONFIGURATION   SECTION.
       SOURCE-COMPUTER.
            whatever   WITH DEBUGGING MODE.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  i           PIC 9.

       PROCEDURE DIVISION.
           PERFORM VARYING i FROM 1 BY 1
                   UNTIL i = 5
           END-PERFORM
           .
])

AT_CHECK([$COMPILE_ONLY -fmissing-statement=ok prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([whitespace handling])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -W

AT_DATA([prog1.cob], [
       IDENTIFICATION
           DIVISION
           .
           author.
           tester.
       PROGRAM-ID
           .
           prog1
           .
           REMARKS;. Should work.,,

       ENVIRONMENT
           DIVISION
           .
       CONFIGURATION
           SECTION
           .
       SOURCE-COMPUTER
           .
             whatever
           WITH
           DEBUGGING
           MODE
           .

      DDATA
      D   DIVISION
      D   .
       WORKING-STORAGE
          SECTION
          .
       01
           i
           PIC
           9
           .

       PROCEDURE
           DIVISION
           .
       >> SOURCE FORMAT IS FREE
IF
i
GREATER
THAN
OR
EQUAL

TO

5

THEN

GOBACK.
           STOP
           RUN
           .
])

AT_DATA([prog2.cob], [
       ID,;DIVISION;,.,;
           author,.;tester.
       PROGRAM-ID,;.;,prog2;,.;,
           REMARKS;. Should work.,,
       ENVIRONMENT,;DIVISION;,.,;
       CONFIGURATION;;,,SECTION;;,,.
       SOURCE-COMPUTER;;.,,whatever;;DEBUGGING,,MODE;,.

      DDATA;DIVISION,.
      DWORKING-STORAGE,SECTION;.
       01;i,PIC;9;.

       PROCEDURE;DIVISION,.;
           IF;,i;,GREATER,;THAN;,OR,;EQUAL ,;TO;;5;
           ,,,THEN;;;GOBACK.
           STOP,RUN;.,
])

AT_CHECK([$COMPILE_ONLY -Wno-obsolete prog1.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -Wno-obsolete prog2.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([STOP identifier])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9(5) VALUE 1.
       01  y           CONSTANT "ab".

       PROCEDURE       DIVISION.
           STOP x
           STOP y
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:12: warning: STOP identifier is obsolete in GnuCOBOL
prog.cob:12: warning: STOP literal is obsolete in GnuCOBOL
])
AT_CHECK([$COMPILE_ONLY -fstop-identifier=ok -fstop-literal=ok prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([01 CONSTANT])
AT_KEYWORDS([mirc reserved])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENteD - Diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM2      CONSTANT 3.
       01  CON3      CONSTANT ((1 + 2) * NUM2 - 4.
       01  CON4      CONSTANT (1 + 2) * NUM2 - 4).
       01  CON5      CONSTANT (1 + 2) // NUM2.
       01  CON6      CONSTANT (1 + 2 + 3 + (4)) / (NUM2).
      *
       PROCEDURE DIVISION.
       MAIN.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:7: error: missing right parenthesis
prog.cob:8: error: missing left parenthesis
prog.cob:9: error: '/' operator misplaced
])

AT_CLEANUP


AT_SETUP([78 VALUE])
AT_KEYWORDS([misc CONSTANT])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENteD - Diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       78  NUM2      VALUE   3.
       78  NEG1      VALUE   -1.
       78  CON3      VALUE   ((1 + 2) * NUM2 - 4.
       78  CON4      VALUE   (1 + 2) * NUM2 - 4).
       78  CON5      VALUE   (1 + 2) // NUM2.
       78  CON6      VALUE   (1 + 2 + 3 + (4)) / (NUM2).
      *
       PROCEDURE DIVISION.
       MAIN.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: missing right parenthesis
prog.cob:9: error: missing left parenthesis
prog.cob:10: error: '/' operator misplaced
])

AT_CLEANUP


AT_SETUP([level 78 NEXT / START OF])
AT_KEYWORDS([misc extensions constant length])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENteD - 78 level - NOT ISO


AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       78  POS0      VALUE NEXT.
       01  MYREC.
          05  FLD1   PIC 9(2).
          05  FLD2   PIC X(7).
             78  POS3    VALUE NEXT.
          05  FLD3   PIC X(2) OCCURS 5 TIMES.
             78  POS4    VALUE NEXT.
          05  FLD4   PIC X(4).
             78  POS-NEXT   VALUE NEXT.
       77  MYREC2 PIC X.
       01  MYREC3 EXTERNAL.
          05  FLD5   PIC X(4).
             78  POS5    VALUE NEXT.
          05  FLD6   PIC X(4).
       01  PICX      PIC XXX VALUE 'Abc'.
       78  HUN       VALUE 10 * (10 + LENGTH OF PICX) + 12.35-2+3.
       78  HUN2      VALUE HUN * (10 + LENGTH
                                       OF PICX) -4.
       78  DIV1      VALUE 100 / 3.
       78  STRT4     VALUE START OF FLD4.
       LINKAGE SECTION.
       01  XMYREC.
          05  XFLD1   PIC 9(2).
          05  XFLD2   PIC X(7).
             78  XPOS3    VALUE NEXT.
          05  XFLD3   PIC X(2) OCCURS 5 TIMES.
             78  XPOS4    VALUE NEXT.
          05  XFLD4   PIC X(4).
          05  XFLD5   PIC X(4).
       78  XSTRT4     VALUE START OF XFLD4.
      *
       PROCEDURE DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: VALUE of 'POS0': NEXT target is invalid
prog.cob:6: error: no previous data-item found
prog.cob:10: error: VALUE of 'POS3': NEXT target is invalid
prog.cob:10: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
prog.cob:12: error: VALUE of 'POS4': NEXT target is invalid
prog.cob:12: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
prog.cob:14: error: VALUE of 'POS-NEXT': NEXT target is invalid
prog.cob:14: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
prog.cob:25: error: VALUE of 'STRT4': START OF target 'FLD4' is invalid
prog.cob:25: error: target must be in FILE SECTION or LINKAGE SECTION or have the EXTERNAL clause
])

AT_CLEANUP


AT_SETUP([SYMBOLIC CONSTANT])
AT_KEYWORDS([misc SPECIAL-NAMES])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "SYMBOLIC CONSTANT" not ISO

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       SYMBOLIC CONSTANT
         con-1  IS 1
         25156c   "25156c".
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM2      PIC 9.
       01  SHORT-X   PIC X(5).
      *
       PROCEDURE DIVISION.
       MAIN.
           MOVE CON-1  TO NUM2.
           MOVE 25156C TO SHORT-X
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:18: warning: value size exceeds data size
prog.cob:18: note: value size is 6
prog.cob:13: note: 'SHORT-X' defined here as PIC X(5)
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:9: error: SYMBOLIC CONSTANT does not conform to COBOL 2014
prog.cob: in paragraph 'MAIN':
prog.cob:18: warning: value size exceeds data size
prog.cob:18: note: value size is 6
prog.cob:13: note: 'SHORT-X' defined here as PIC X(5)
])

AT_CLEANUP


AT_SETUP([Constant Expressions (1)])
AT_KEYWORDS([misc condition expression refmod IF EVALUATE])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       01  othervar  PIC X(115).
       01  A         PIC 9 VALUE 1.
       01  B         PIC 9 VALUE 2.
       01  C         PIC 9 VALUE 3.
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
               move othervar (1:var-len - 8)
                 to var (17 - var-len:var-len - 8)
           ELSE
               move othervar to var
           END-IF

           IF (2 = 3)
               move othervar to var
           ELSE
              IF 1 = 1
                 move var to othervar
              ELSE
                 move othervar (1:var-len - 8)
                   to var (17 - var-len:var-len - 8)
                 IF 1 = 1
                    move var to othervar
                 END-IF
              END-IF
              move A to B
              IF 1 = 1
                IF 2 = 1
                 move othervar (1:var-len - 8)
                   to var (17 - var-len:var-len - 8)
           .

           PERFORM WITH TEST BEFORE UNTIL 1 = 3
               move othervar to var
           END-PERFORM

           PERFORM WITH TEST BEFORE UNTIL 1 = 1
               move othervar (1:var-len - 8)
                 to var (17 - var-len:var-len - 8)
           END-PERFORM

           PERFORM WITH TEST AFTER UNTIL 1 = 3
               move othervar to var
           END-PERFORM

           PERFORM WITH TEST AFTER UNTIL 1 = 1
               move othervar to var
           END-PERFORM

           EVALUATE TRUE
           WHEN  var-len < 16
               move othervar (1:var-len - 8)
                 to var (17 - var-len:var-len - 8)
           WHEN  var-len > 16
               move othervar to var
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
               CONTINUE
           END-EVALUATE

           EVALUATE FALSE
           WHEN  var-len < 16
               move othervar (1:var-len - 9)
                 to var (16 - var-len:var-len - 9)
           WHEN  var-len > 16
               move othervar to var
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
               CONTINUE
           END-EVALUATE.

           IF 15 = var-len
               move othervar to var.

           IF var-len = 15
               move var      to othervar.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [1], [],
[prog.cob:15: warning: expression '115' LESS THAN '16' is always FALSE [[-Wconstant-expression]]
prog.cob:17: warning: offset of 'var' out of bounds: -98 [[-Wignored-error]]
prog.cob:22: warning: expression '2' EQUALS '3' is always FALSE [[-Wconstant-expression]]
prog.cob:25: warning: expression '1' EQUALS '1' is always TRUE [[-Wconstant-expression]]
prog.cob:29: warning: offset of 'var' out of bounds: -98 [[-Wignored-error]]
prog.cob:30: warning: expression '1' EQUALS '1' is always TRUE [[-Wconstant-expression]]
prog.cob:35: warning: expression '1' EQUALS '1' is always TRUE [[-Wconstant-expression]]
prog.cob:36: warning: expression '2' EQUALS '1' is always FALSE [[-Wconstant-expression]]
prog.cob:38: warning: offset of 'var' out of bounds: -98 [[-Wignored-error]]
prog.cob:41: warning: expression '1' EQUALS '3' is always FALSE [[-Wconstant-expression]]
prog.cob:41: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
prog.cob:45: warning: expression '1' EQUALS '1' is always TRUE [[-Wconstant-expression]]
prog.cob:45: warning: PERFORM NEVER since UNTIL is always TRUE [[-Wadditional]]
prog.cob:47: warning: offset of 'var' out of bounds: -98 [[-Wignored-error]]
prog.cob:50: warning: expression '1' EQUALS '3' is always FALSE [[-Wconstant-expression]]
prog.cob:50: warning: PERFORM FOREVER since UNTIL is always FALSE [[-Wadditional]]
prog.cob:54: warning: expression '1' EQUALS '1' is always TRUE [[-Wconstant-expression]]
prog.cob:54: warning: PERFORM ONCE since UNTIL is always TRUE [[-Wadditional]]
prog.cob:59: warning: expression '115' LESS THAN '16' is always FALSE [[-Wconstant-expression]]
prog.cob:61: warning: offset of 'var' out of bounds: -98 [[-Wignored-error]]
prog.cob:62: warning: expression '115' GREATER THAN '16' is always TRUE [[-Wconstant-expression]]
prog.cob:71: warning: expression '115' LESS THAN '16' is always FALSE [[-Wconstant-expression]]
prog.cob:73: error: offset of 'var' out of bounds: -99
prog.cob:74: warning: expression '115' GREATER THAN '16' is always TRUE [[-Wconstant-expression]]
prog.cob:82: warning: expression '15' EQUALS '115' is always FALSE [[-Wconstant-expression]]
prog.cob:85: warning: expression '115' EQUALS '15' is always FALSE [[-Wconstant-expression]]
])

AT_CLEANUP


AT_SETUP([Constant Expressions (3)])
AT_KEYWORDS([misc condition expression refmod undefined])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

# verify that we do ignore undefined errors where possible
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
               move spaces
                 to var (17 - var-len:var-len - 8)
           END-IF

           IF var-len < 16
              move notdefined to var
           END-IF

           IF var-len < 16
              perform notdefined
           END-IF

           IF var-len < 16
              if notdefined continue.

           STOP RUN.
])

# note: the last error message comes from program validation
#       and therefore cannot be raised earlier
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [0], [],
[[prog.cob:11: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-expression]
prog.cob:13: warning: offset of 'var' out of bounds: -98 [-Wignored-error]
prog.cob:16: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-expression]
prog.cob:17: warning: 'notdefined' is not defined [-Wignored-error]
prog.cob:20: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-expression]
prog.cob:24: warning: expression '115' LESS THAN '16' is always FALSE [-Wconstant-expression]
]])

# verify that we do only skip an undefined error when it actually was reported
AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
              move notdefined to var *> won't be seen with -Wno-ignore-error
           END-IF

       >> IF SKIP-FIRST-ERROR NOT DEFINED
      *> always reported here (if active) as that's the first error
           move notdefined to var
       >> END-IF

           IF var-len < 16
              move notdefined to var      *> never here, because of the warning/error above
           END-IF

           move var        to notdefined   *> only here if not the skip was active

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression prog2.cob], [1], [],
[[prog2.cob:12: warning: 'notdefined' is not defined [-Wignored-error]
prog2.cob:17: error: 'notdefined' is not defined
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression -Wno-ignored-error prog2.cob], [1], [],
[[prog2.cob:17: error: 'notdefined' is not defined
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression -DSKIP-FIRST-ERROR prog2.cob], [1], [],
[[prog2.cob:12: warning: 'notdefined' is not defined [-Wignored-error]
prog2.cob:24: error: 'notdefined' is not defined
]])
AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -Wno-constant-expression -Werror=ignored-error prog2.cob], [1], [],
[[prog2.cob:12: error: 'notdefined' is not defined [-Werror=ignored-error]
]])

AT_CLEANUP


AT_SETUP([Constant Expressions (4)])
AT_KEYWORDS([misc condition expression refmod])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

# verify that we do not ignore parsing errors as
# these are likely to raise issues in codegen

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
               move spaces
                 to var (17 - var-len:var-len - 8)
               IF IF.

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option prog.cob], [1], [],
[prog.cob:11: warning: expression '115' LESS THAN '16' is always FALSE [[-Wconstant-expression]]
prog.cob:13: warning: offset of 'var' out of bounds: -98 [[-Wignored-error]]
prog.cob:14: error: syntax error, unexpected IF
])

AT_CLEANUP


AT_SETUP([Constant Expressions (5)])
AT_KEYWORDS([misc condition expression unreachable])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  VAR       PIC X(200).
       01  OTHERVAR  PIC X(115).
       78  VAR-LEN   VALUE 115.

       PROCEDURE DIVISION.
       MAIN-10.
           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
               ALSO FALSE
               ALSO TRUE
            WHEN    TRUE
               ALSO VAR-LEN > 16 AND VAR-LEN < 200
               ALSO TRUE
                  MOVE OTHERVAR (1 : VAR-LEN - 9)
                    TO VAR (16 - VAR-LEN : VAR-LEN - 9)
                  DISPLAY "A: Should NOT be executed"
            WHEN  TRUE
               ALSO VAR-LEN < 16
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR-LEN > 16 AND VAR-LEN < 200"
            WHEN  TRUE
               ALSO VAR = SPACES
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE 3 EQUALS 7
           WHEN  VAR = SPACES
               DISPLAY "B: OK VAR IS NOT SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "B: FALSE VAR IS SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE FALSE
           WHEN  VAR = SPACES
               DISPLAY "C: FALSE VAR IS SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "C: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
           WHEN  VAR = SPACES
               DISPLAY "D: BAD VAR IS SPACES"
           WHEN  VAR NOT = SPACES
               DISPLAY "D: OK VAR IS NOT SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE VAR-LEN ALSO VAR
           WHEN  < 32 ALSO SPACES
               DISPLAY "E: OK VAR IS SPACES"
           WHEN  > 16 ALSO NOT SPACES
               DISPLAY "E: BAD VAR IS NOT SPACES"
           WHEN OTHER
               DISPLAY "E: OK OTHER option taken"
           END-EVALUATE.

           STOP RUN.
])

# Note: ideally this should not result in a difference compared to the next one

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -C -fno-remove-unreachable prog.cob], [1], [],
[prog.cob: in paragraph 'MAIN-10':
prog.cob:17: warning: expression '115' GREATER THAN '16' is always TRUE [[-Wconstant-expression]]
prog.cob:17: warning: expression '115' LESS THAN '200' is always TRUE [[-Wconstant-expression]]
prog.cob:20: error: offset of 'VAR' out of bounds: -99
prog.cob:23: warning: expression '115' LESS THAN '16' is always FALSE [[-Wconstant-expression]]
prog.cob:35: warning: expression '3' EQUALS '7' is always FALSE [[-Wconstant-expression]]
prog.cob:60: warning: expression '115' LESS THAN '32' is always FALSE [[-Wconstant-expression]]
prog.cob:62: warning: expression '115' GREATER THAN '16' is always TRUE [[-Wconstant-expression]]
])

AT_CHECK([$COMPILE_ONLY -fdiagnostics-show-option -C prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN-10':
prog.cob:17: warning: expression '115' GREATER THAN '16' is always TRUE [[-Wconstant-expression]]
prog.cob:17: warning: expression '115' LESS THAN '200' is always TRUE [[-Wconstant-expression]]
prog.cob:20: warning: offset of 'VAR' out of bounds: -99 [[-Wignored-error]]
prog.cob:23: warning: expression '115' LESS THAN '16' is always FALSE [[-Wconstant-expression]]
prog.cob:35: warning: expression '3' EQUALS '7' is always FALSE [[-Wconstant-expression]]
prog.cob:60: warning: expression '115' LESS THAN '32' is always FALSE [[-Wconstant-expression]]
prog.cob:62: warning: expression '115' GREATER THAN '16' is always TRUE [[-Wconstant-expression]]
])

AT_CLEANUP


AT_SETUP([Missing imperative statements])
AT_KEYWORDS([misc condition expression IF EVALUATE WHEN PERFORM])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  var       PIC X(200).
       01  othervar  PIC X(115).
       01  A         PIC 9 VALUE 1.
       01  B         PIC 9 VALUE 2.
       01  C         PIC 9 VALUE 3.
       78  var-len   value 115.

       PROCEDURE DIVISION.

           IF var-len < 16
           ELSE
               move othervar to var
           END-IF

           IF var-len > 16
           ELSE
               move othervar to var
           END-IF

           IF (2 = 3)
           ELSE
              IF 1 = 1
              ELSE
                 IF 1 = 1
                    move var to othervar
                 END-IF
              END-IF
           .

           EVALUATE TRUE
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
           END-EVALUATE

           PERFORM WITH TEST BEFORE UNTIL 1 <> 3
           END-PERFORM

           EVALUATE FALSE
           WHEN  A = B
           WHEN  B = A
           END-EVALUATE.

           EVALUATE TRUE
           WHEN  A = B
               move var      to othervar
           WHEN OTHER
           .

           EVALUATE TRUE
           WHEN  A = B
           WHEN  B = A
           .

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -w -fmissing-statement=error prog.cob], [1], [],
[prog.cob:18: error: IF without imperative statement used
prog.cob:23: error: IF without imperative statement used
prog.cob:32: error: IF without imperative statement used
prog.cob:33: error: IF without imperative statement used
prog.cob:39: error: WHEN OTHER without imperative statement used
prog.cob:42: error: inline PERFORM without imperative statement used
prog.cob:47: error: WHEN without imperative statement used
prog.cob:53: error: WHEN OTHER without imperative statement used
prog.cob:58: error: WHEN without imperative statement used
])

AT_CHECK([$COMPILE_ONLY -fno-constant-folding -fmissing-statement=warning prog.cob], [0], [],
[prog.cob:18: warning: IF without imperative statement used
prog.cob:23: warning: IF without imperative statement used
prog.cob:32: warning: IF without imperative statement used
prog.cob:33: warning: IF without imperative statement used
prog.cob:39: warning: WHEN OTHER without imperative statement used
prog.cob:42: warning: inline PERFORM without imperative statement used
prog.cob:47: warning: WHEN without imperative statement used
prog.cob:53: warning: WHEN OTHER without imperative statement used
prog.cob:58: warning: WHEN without imperative statement used
])

AT_CLEANUP


AT_SETUP([Fall-Through to WHEN OTHER])
AT_KEYWORDS([misc condition expression EVALUATE WHEN])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

# we currently don't do the necessary parsing steps for
# this test to pass - and likely need a different option
# than frelax-syntax-checks..

AT_XFAIL_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  A         PIC 9 VALUE 1.
       01  B         PIC 9 VALUE 2.

       PROCEDURE DIVISION.

           EVALUATE TRUE
           WHEN A = B
           WHEN OTHER
               DISPLAY 'other' END-DISPLAY
           END-EVALUATE

           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: error: fall-through to WHEN OTHER is not allowed
])

AT_CHECK([$COMPILE_ONLY -frelax-syntax-checks prog.cob], [1], [],
[prog.cob:12: warning: fall-through to WHEN OTHER
])

AT_CLEANUP


AT_SETUP([CONSTANT LENGTH / BYTE-LENGTH])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# First 05 definition missing USAGE.

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       environment division.
       data division.
       working-storage section.
       01  item-01.
           05  item-05-a       pointer.
           05  item-05-b       pic x(01).
       01 myk-01 constant global as length of item-01.
       01 myk-02 constant is global as length item-05-a.
       01 myk-03 constant global as length of pointer. *> extension
       01 myk-04 constant global as byte-length of item-01.
       01 myk-05 constant is global as byte-length item-05-a.
       01 myk-06 constant global as byte-length of pointer. *> extension
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([ANY LENGTH/NUMERIC with incorrect PIC])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "ANY LENGTH" and "ANY NUMBER" not ISO

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA           DIVISION.
       LINKAGE        SECTION.
       *> Valid
       01  valid-1    PIC X ANY LENGTH.
       01  valid-2    PIC N ANY LENGTH.
       01  valid-3    PIC 9 ANY NUMERIC.

       *> Invalid
       01  invalid-1  PIC A ANY LENGTH.
       01  invalid-2  PIC Z ANY LENGTH.
       01  invalid-3  PIC 9 ANY LENGTH.
       01  invalid-4  PIC X ANY NUMERIC.
       01  invalid-5  PIC XX ANY LENGTH.
       01  invalid-6  PIC NN ANY LENGTH.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:9: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:18: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:13: error: 'invalid-1' ANY LENGTH must be PIC X, PIC N or PIC 1
prog.cob:14: error: 'invalid-2' ANY LENGTH must be PIC X, PIC N or PIC 1
prog.cob:15: error: 'invalid-3' ANY LENGTH must be PIC X, PIC N or PIC 1
prog.cob:16: error: 'invalid-4' ANY NUMERIC must be PIC 9
prog.cob:17: error: 'invalid-5' ANY LENGTH has invalid definition
prog.cob:18: error: 'invalid-6' ANY LENGTH has invalid definition
prog.cob:8: error: 'valid-1' ANY LENGTH item must be a formal parameter
prog.cob:9: error: 'valid-2' ANY LENGTH item must be a formal parameter
prog.cob:10: error: 'valid-3' ANY LENGTH item must be a formal parameter
prog.cob:13: error: 'invalid-1' ANY LENGTH item must be a formal parameter
prog.cob:14: error: 'invalid-2' ANY LENGTH item must be a formal parameter
prog.cob:15: error: 'invalid-3' ANY LENGTH item must be a formal parameter
prog.cob:16: error: 'invalid-4' ANY LENGTH item must be a formal parameter
prog.cob:17: error: 'invalid-5' ANY LENGTH item must be a formal parameter
prog.cob:18: error: 'invalid-6' ANY LENGTH item must be a formal parameter
])

AT_CLEANUP


AT_SETUP([SET SOURCEFORMAT syntax checks])
AT_KEYWORDS([misc extensions directives])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# $SET is DIALECT extension, not in '14'

AT_DATA([prog.cob], [
       *> Valid
       $set sourceformat(free)
       $SET SOURCEFORMAT"FIXED"
       *> Invalid
       $SET SOURCEFORMAT"hi!"
       $SET SOURCEFORMAT()
       $SET sourceformat'mis-matched"
])

# FIXME: something is broken with the '"#OPTION here,
#        that should be generated as #OPTION 'mis-matched"
#        and in a second step not be generated at all

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: invalid SOURCEFORMAT directive option 'hi!'
prog.cob:7: error: invalid SOURCEFORMAT directive option ''
prog.cob:8: error: syntax error, unexpected Variable, expecting Literal
prog.cob:8: error: invalid SOURCEFORMAT directive option
prog.cob:8: error: invalid literal: '"#OPTION mis-matched ...'
prog.cob:8: error: missing terminating ' character
prog.cob:8: error: PROGRAM-ID header missing
prog.cob:8: error: PROCEDURE DIVISION header missing
prog.cob:8: error: syntax error, unexpected Literal
])
AT_CLEANUP


AT_SETUP([WHEN-COMPILED register in dialect])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       PROCEDURE DIVISION.
           DISPLAY WHEN-COMPILED
           .
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: 'WHEN-COMPILED' is not defined
])
AT_CHECK([$COMPILE_ONLY -fregister=WHEN-COMPILED prog.cob], [0], [], [])
AT_CHECK([$COMPILE_ONLY -freserved=WHEN-COMPILED -fregister=WHEN-COMPILED prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([LIN / COL register])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       PROCEDURE DIVISION.
           MOVE 1 TO LIN, COL
           .
])

# "strict" configuration:
AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: 'LIN' is not defined
prog.cob:6: error: syntax error, unexpected COL
])
# standard configuration:
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: error: 'LIN' is not defined
prog.cob:6: error: syntax error, unexpected COL
])
# explicit enabled
AT_CHECK([$COMPILE_ONLY -fregister=LIN,COL prog.cob], [0], [], [])
AT_CLEANUP


AT_SETUP([zero-length literals])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GNU -f

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC X.
       01  nat         PIC N.
       01  n           PIC 9.

       PROCEDURE       DIVISION.
           MOVE X'' TO x
           MOVE H'' TO x
           MOVE Z'' TO x
           MOVE L'' TO x
           MOVE N"" TO nat
           MOVE NX'' TO nat
           MOVE B"" TO n
           MOVE BX"" TO n
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:12: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:13: error: H literals must contain at least one character
prog.cob:14: error: invalid Z literal: ''
prog.cob:14: error: Z literals must contain at least one character
prog.cob:15: error: invalid L literal: ''
prog.cob:15: error: L literals must contain at least one character
prog.cob:16: warning: national literal has zero length; a SPACE will be assumed
prog.cob:16: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:17: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:18: warning: Boolean literal has zero length; B'0' will be assumed
prog.cob:19: warning: hexadecimal literal has zero length; X'00' will be assumed
])
AT_CHECK([$COMPILE_ONLY -fzero-length-literals=error prog.cob], [1], [],
[prog.cob:8: warning: handling of USAGE NATIONAL is unfinished; implementation is likely to be changed
prog.cob:12: error: zero-length literal used
prog.cob:12: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:13: error: H literals must contain at least one character
prog.cob:14: error: invalid Z literal: ''
prog.cob:14: error: Z literals must contain at least one character
prog.cob:15: error: invalid L literal: ''
prog.cob:15: error: L literals must contain at least one character
prog.cob:16: error: zero-length literal used
prog.cob:16: warning: national literal has zero length; a SPACE will be assumed
prog.cob:16: warning: handling of national literal is unfinished; implementation is likely to be changed
prog.cob:17: error: zero-length literal used
prog.cob:17: warning: hexadecimal literal has zero length; X'00' will be assumed
prog.cob:18: error: zero-length literal used
prog.cob:18: warning: Boolean literal has zero length; B'0' will be assumed
prog.cob:19: error: zero-length literal used
prog.cob:19: warning: hexadecimal literal has zero length; X'00' will be assumed
])
AT_CLEANUP


AT_SETUP([@OPTIONS parsing])
AT_KEYWORDS([misc OPTIONS])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# "@OPTIONS" DIALECT

# GnuCOBOL currently only skips these, see FR 305

AT_DATA([valid.cob], [
000100 @OPTIONS NOMAIN,APOST
000200 IDENTIFICATION  DIVISION.
000300 PROGRAM-ID. VALID.
])

AT_CHECK([$COMPILE_ONLY valid.cob], [0], [],
[valid.cob:3: warning: ignoring unknown directive: '@OPTIONS'
])

AT_CLEANUP


AT_SETUP([system routines with wrong number of parameters])
AT_KEYWORDS([misc CALL 91 C$TOUPPER CBL_GC_FORK])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Gnu "system routines) DIALECT TODO

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 VAR1  PIC 9.
       01 VAR2  PIC 9.
       01 VAR3  PIC 9.
       01 VAR4  PIC 9.
       PROCEDURE DIVISION.
        CALL X"91" USING VAR1 VAR2 VAR3 VAR4.
        CALL X"91" USING VAR1.
        CALL "C$TOUPPER" USING VAR1 VAR2 VAR3.
        CALL "CBL_GC_FORK" USING VAR1.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:11: warning: wrong number of CALL parameters for 'X"91"', 4 given, 3 expected
prog.cob:12: error: wrong number of CALL parameters for 'X"91"', 1 given, 3 expected
prog.cob:13: warning: wrong number of CALL parameters for 'C$TOUPPER', 3 given, 2 expected
prog.cob:14: warning: wrong number of CALL parameters for 'CBL_GC_FORK', 1 given, 0 expected
])

AT_CLEANUP


AT_SETUP([invalid use of condition-name])
AT_KEYWORDS([misc MOVE STRING UNSTRING COMPUTE])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENteD: Diagnostic messages

AT_DATA([prog.cob], [
       identification   division.
       program-id.      prog.
       data             division.
       working-storage  section.
       77 p        usage pointer.
       01 val      pic x(10).
          88 val-i1 value 'some'.
          88 val-i2 value 'val'.
       77 val2     pic x(50).
       77 target   pic x(50).
       01 vnum     pic 9.
          88 vnum-1 value  1.
          88 vnum-2 values 2 thru 5.
          88 vnum-9 value  9.
       01 filler.
          02 tentry pic x occurs 0 to 6 depending on vnum-1.
       procedure        division.
           string   val-i1 delimited by size  into target
           string   val2   delimited by val-i2 into target
           string   val2   delimited by size   into val-i1
                           with pointer val-i2
           unstring val-i1                     into target
           unstring val2   delimited by val-i1 into target
           unstring val2                       into val-i1
                           with pointer val-i2
           move val-i1
             to val-i2, tentry (vnum-9)
           compute vnum-1 = vnum
           compute vnum    = vnum-1 /
                             vnum-2
           go to val-i1
           set p to val-i1
           set p to address of val-i2.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:17: error: condition-name not allowed here: 'vnum-1'
prog.cob:19: error: condition-name not allowed here: 'val-i1'
prog.cob:20: error: condition-name not allowed here: 'val-i2'
prog.cob:21: error: condition-name not allowed here: 'val-i1'
prog.cob:23: error: condition-name not allowed here: 'val-i1'
prog.cob:24: error: condition-name not allowed here: 'val-i1'
prog.cob:25: error: condition-name not allowed here: 'val-i1'
prog.cob:28: error: condition-name not allowed here: 'vnum-9'
prog.cob:27: error: condition-name not allowed here: 'val-i1'
prog.cob:29: error: condition-name not allowed here: 'vnum-1'
prog.cob:30: error: condition-name not allowed here: 'vnum-1'
prog.cob:31: error: condition-name not allowed here: 'vnum-2'
prog.cob:33: error: condition-name not allowed here: 'val-i1'
prog.cob:34: error: condition-name not allowed here: 'val-i2'
prog.cob:32: error: 'val-i1 (MAIN SECTION:)' is not a procedure name
])
AT_CLEANUP


AT_SETUP([XML GENERATE syntax checks])
AT_KEYWORDS([misc extensions])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# XML not supported TODO

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  str.
           03  str-1 PIC XX.
           03  str-2 PIC X.
       66  renames-item RENAMES str-1 THRU str-2.
       01  bool-area.
           03  bool-item PIC 1(30) USAGE BIT.
           03  zoned-decimal PIC 99V99 PACKED-DECIMAL.
       01  just-item PIC X(30) JUST.
       01  table-area.
           03  table-entry PIC X(30) OCCURS 2 TIMES.
       01  long-str PIC X(200).

       01  float-item FLOAT-SHORT.
       01  pic-p-item PIC 99P(3).

       01  rec.
           03  child-1 PIC X(30).
           03  child-1a REDEFINES child-1 PIC 9(30).
           03  child-2 PIC X(30).
           03  child-3.
               05  child-3-1 PIC X OCCURS 5 TIMES.

       01  all-filler-rec.
           03  FILLER PIC XXXX.
           03  FILLER PIC 9999.

       01  invalid-sub-elt-rec.
           03  non-unique-name PIC X.
           03  valid-sub-rec.
               05  non-unique-name PIC X.
           03  bit-item PIC 1 USAGE BIT.
           03  ptr-item USAGE POINTER.

       01  with-attrs-does-nothing.
           03  FILLER PIC X.
           03  table-elt PIC X OCCURS 2 TIMES.
           03  with-attrs-group.
               05  with-attrs-group-child PIC X.
           03  with-attrs-child PIC X.

       PROCEDURE DIVISION.
           *> Receiving area is not alphanumeric or national.
           XML GENERATE bool-item FROM str
           *> Receiving area is JUSTIFIED RIGHT.
           XML GENERATE just-item FROM str
           *> Receiving area is subscripted or ref-mod'd.
           XML GENERATE table-entry (1) FROM str
           XML GENERATE long-str (1:100) FROM str

           *> Input record cannot be function identifier.
           XML GENERATE long-str FROM FUNCTION CHAR(4)
           *> Input record cannot be ref-mod'd.
           XML GENERATE long-str FROM str (2:1)
           *>  "       "   is not RENAMES (children may be RENAMES).
           XML GENERATE long-str FROM renames-item
           *> Non-ignored items of the input record must:
           *>  * alphabetic, alphanumeric, national, numeric or index.
           *>  * there must be at least one item.
           *>  * each non-FILLER name must be unique within the input record.
           XML GENERATE long-str FROM invalid-sub-elt-rec *> XXXXXXXXX ptr element is invalid
           XML GENERATE long-str FROM all-filler-rec

           *> COUNT IN field must be an integer.
           XML GENERATE long-str FROM str COUNT float-item
           *> COUNT IN field must not have P in PIC.
           XML GENERATE long-str FROM str COUNT pic-p-item

           *> ENCODING codepage must be unsigned integer.
           *> If receiving area is national, codepage must be 1200.
           *> "        "       "   alphanumeric, codepage must be 1208 or EBCDIC
           *>   page supported with XML.

           *> WITH ATTRIBUTES, generated immediate children must be
           *>  * elementary
           *>  * be non-FILLER
           *>  * not be OCCURS
           *>  * not be subject of a TYPE phrase.
           XML GENERATE long-str FROM with-attrs-does-nothing
               WITH ATTRIBUTES
               TYPE OF with-attrs-child IS ELEMENT

           *> NAMESPACE must be a valid URI.
           XML GENERATE long-str FROM str NAMESPACE "<>"
           *> NAMESPACE and -PREFIX must be alphanumeric or national.
           XML GENERATE long-str FROM str
              NAMESPACE bool-item NAMESPACE-PREFIX bool-item
           *>   "        "     "    may not be figurative constants.
           XML GENERATE long-str FROM str
               NAMESPACE SPACES NAMESPACE-PREFIX QUOTES
           *> NAMESPACE-PREFIX must be a valid XML name.
           XML GENERATE long-str FROM str
               NAMESPACE "http://www.w3.org/xml" NAMESPACE-PREFIX X"00"

           *> NAME items must reference input record or its children.
           XML GENERATE long-str FROM rec
               NAME OF child-1 IS "c1", long-str IS "c2", rec IS "r"
           *> NAME items cannot be reference modified or subscripted.
           XML GENERATE long-str FROM rec
               NAME OF child-1 (1:2) IS "c1"
           *> NAME items may not be ignored by the statement.
           XML GENERATE long-str FROM rec
               NAME OF child-1a IS "c1a"
           *> NAME literals must be valid XML names.
           XML GENERATE long-str FROM rec
               NAME OF child-1 IS X"00"

           *> TYPE items must be elementary and children of input record.
           XML GENERATE long-str FROM rec
               TYPE OF child-3 IS ELEMENT, long-str IS CONTENT,
                   rec IS CONTENT
           *> TYPE items cannot be ref-mod'd or subscripted.
           XML GENERATE long-str FROM rec
               TYPE OF child-1 (1:3) IS ATTRIBUTE,
                   child-3-1 (1) IS CONTENT
           *> TYPE items may not be ignored by the statement
           XML GENERATE long-str FROM rec
               TYPE OF child-1a IS ELEMENT
           *> TYPE ATTRIBUTE items must satisfy the conditions for WITH
           *>  ATTRIBUTES. (Covered by the above.)

           *> SUPPRESS WHEN items must be:
           *>  * elementary
           *>  * not ignored
           *>  * child of input record.
           XML GENERATE long-str FROM rec
               SUPPRESS child-3 WHEN SPACES, child-1a WHEN SPACES,
                   rec WHEN SPACES
          *> All SUPPRESS items must not be functions
           XML GENERATE long-str FROM rec
               SUPPRESS FUNCTION CHAR(5) WHEN SPACE
           *> All SUPPRESS items must not be ref-mod'd or subscripted.
           XML GENERATE long-str FROM rec
               SUPPRESS child-1 (1:3) WHEN ZERO,
                   child-3-1 (1) WHEN SPACES
           *> If non-WHEN SUPPRESS items may be groups. (No error message here.)
           XML GENERATE long-str FROM rec SUPPRESS child-3
           *> If SUPPRESS WHEN ZEROES, item is not DISPLAY-1.
           *> If SUPPRESS WHEN SPACES, item must be USAGE DISPLAY, DISPLAY-1 or
           *>   NATIONAL
           XML GENERATE long-str FROM bool-area
               SUPPRESS bool-item WHEN SPACES
           *> If SUPPRESS WHEN LOW-/HIGH-VALUES, item must be USAGE DISPLAY or
           *>   NATIONAL. If item is a zoned/national decimal item, it must be
           *>   an integer.
           XML GENERATE long-str FROM bool-area
               SUPPRESS bool-item WHEN LOW-VALUES,
                   zoned-decimal WHEN HIGH-VALUE
           *> (For generic WHEN phrases, invalid items above are ignored.)
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:12: warning: USAGE BIT is not implemented
prog.cob:37: warning: USAGE BIT is not implemented
prog.cob:49: error: JSON/XML GENERATE receiving item must be alphanumeric or national
prog.cob:51: error: JSON/XML GENERATE receiving item may not have JUSTIFIED clause
prog.cob:53: error: JSON/XML GENERATE receiving item may not be subscripted
prog.cob:54: error: JSON/XML GENERATE receiving item may not be reference modified
prog.cob:57: error: syntax error, unexpected intrinsic function name, expecting Identifier
prog.cob:59: error: JSON/XML GENERATE input record may not be reference modified
prog.cob:61: error: JSON/XML GENERATE input record may not have RENAMES clause
prog.cob:66: error: JSON/XML GENERATE input record has subrecords with non-unique names
prog.cob:67: error: all the children of 'all-filler-rec' are ignored in JSON/XML GENERATE
prog.cob:70: error: COUNT IN item 'float-item' must be numeric and an integer
prog.cob:72: error: COUNT IN item 'pic-p-item' may not have PICTURE with P in it
prog.cob:89: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:89: warning: WITH ATTRIBUTES specified, but no attributes can be generated
prog.cob:89: error: NAMESPACE must be a valid URI
prog.cob:92: error: NAMESPACE must be alphanumeric or national
prog.cob:92: error: NAMESPACE-PREFIX must be alphanumeric or national
prog.cob:97: error: NAMESPACE may not be a figurative constant
prog.cob:97: error: NAMESPACE-PREFIX may not be a figurative constant
prog.cob:98: error: NAMESPACE-PREFIX must be a valid XML name
prog.cob:104: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:102: error: NAME OF item must be the input record or a child of it
prog.cob:107: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:105: error: NAME OF item may not be reference modified
prog.cob:110: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:108: error: NAME OF item may not be an ignored item in JSON/XML GENERATE
prog.cob:114: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:111: error: NAME OF literal must be a valid XML identifier
prog.cob:118: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:115: error: TYPE OF item must be elementary
prog.cob:115: error: TYPE OF item must be a child of the input record
prog.cob:116: error: TYPE OF item must be elementary
prog.cob:116: error: TYPE OF item must be a child of the input record
prog.cob:122: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:119: error: TYPE OF item may not be reference modified
prog.cob:120: error: TYPE OF item may not be subscripted
prog.cob:131: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:123: error: TYPE OF item may not be an ignored item in JSON/XML GENERATE
prog.cob:135: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:133: error: SUPPRESS item with WHEN clause must be elementary
prog.cob:133: error: SUPPRESS item must be a child of the input record
prog.cob:132: error: SUPPRESS item may not be an ignored item in JSON/XML GENERATE
prog.cob:132: error: SUPPRESS item with WHEN clause must be elementary
prog.cob:136: error: syntax error, unexpected intrinsic function name, expecting EVERY or WHEN or Identifier
prog.cob:142: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:140: error: SUPPRESS item may not be subscripted
prog.cob:139: error: SUPPRESS item may not be reference modified
prog.cob:146: warning: OCCURS items in JSON/XML GENERATE is not implemented
prog.cob:147: error: SUPPRESS WHEN SPACE item must be USAGE DISPLAY or NATIONAL
prog.cob:153: error: SUPPRESS WHEN HIGH-VALUE item must be USAGE DISPLAY or NATIONAL
prog.cob:153: error: SUPPRESS WHEN HIGH-VALUE item must be an integer
prog.cob:152: error: SUPPRESS WHEN LOW-VALUE item must be USAGE DISPLAY or NATIONAL
])
AT_CLEANUP


AT_SETUP([BASED clause, ALLOCATE / FREE statements])
AT_KEYWORDS([misc BASED])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED: SCREEN SECTION
# INVALID "SCREEN-STORAGE SECTION"

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  str.
           03  str-1  PIC XX BASED.
       01  str-2 BASED.
           03  str-2a PIC X SYNC.
           03  str-2b PIC 9.
       01  one        PIC XX BASED.
       77  seven      PIC 9 BASED.
       77  var        PIC 9.
       77  ptr        USAGE POINTER.
       SCREEN-STORAGE SECTION.
       01  scrn      BASED.
           03  scrn-field pic x.

       PROCEDURE DIVISION.
           ALLOCATE one
           ALLOCATE seven INITIALIZED
           ALLOCATE seven CHARACTERS.
           ALLOCATE seven CHARACTERS RETURNING ptr.
           ALLOCATE 1 + 2 * 3 CHARACTERS RETURNING ptr.
           ALLOCATE 1 + one * 3 CHARACTERS RETURNING ptr.
           ALLOCATE one   CHARACTERS RETURNING ptr.
           ALLOCATE seven CHARACTERS INITIALIZED RETURNING ptr.
           ALLOCATE var
           FREE var
           FREE ADDRESS OF var
           FREE one
           FREE ADDRESS OF seven
           MOVE ADDRESS OF seven TO ptr
           FREE ptr
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: BASED only allowed at 01/77 level
prog.cob:16: error: PROCEDURE DIVISION header missing
prog.cob:16: error: syntax error, unexpected Identifier
prog.cob:17: error: unknown statement '01'
prog.cob:18: error: unknown statement '03'
prog.cob:20: error: syntax error, unexpected PROCEDURE
prog.cob:23: error: ALLOCATE CHARACTERS requires RETURNING clause
prog.cob:26: error: 'one' is not a numeric value
prog.cob:27: error: amount must be specified as a numeric expression
prog.cob:29: error: target of ALLOCATE is not a BASED item
prog.cob:30: error: target 1 of FREE is not a BASED data item
prog.cob:31: error: target 1 of FREE is not a BASED data item
])
AT_CLEANUP


AT_SETUP([CONTINUE statement])
AT_KEYWORDS([misc BASED])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# COBOL22?????

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  one        PIC X.
       77  seven      PIC 9 BASED.
       77  var        PIC 9.
       77  ptr        USAGE POINTER.
       PROCEDURE DIVISION.
           CONTINUE
           PERFORM VARYING var FROM 1 BY 1 UNTIL var = 4
              CONTINUE
           END-PERFORM
           CONTINUE AFTER 42 SECONDS      *> COBOL 202x
           CONTINUE AFTER 4 + 2 SECONDS
           CONTINUE AFTER var + 2 SECONDS
           CONTINUE AFTER '1' SECONDS
           CONTINUE AFTER ptr SECONDS
           CONTINUE AFTER one SECONDS
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:19: error: amount must be specified as a numeric expression
prog.cob:20: error: amount must be specified as a numeric expression
prog.cob:21: error: amount must be specified as a numeric expression
])

# MESSAGE ERROR
AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:16: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:17: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:18: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:19: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:20: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
prog.cob:21: error: AFTER phrase in CONTINUE statement does not conform to COBOL 2014
])
AT_CLEANUP


AT_SETUP([conflict markers])
AT_KEYWORDS([misc])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Conflict Marker support not implemented. Not COBOL2014. DIALECT

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *> Verify that we report conflict markers correctly
<<<<<<< HEAD
       01  one-1      PIC X.
======= there may be something here
       01  one-2      PIC X.
>>>>>>> some note
      *> Verify that we don't have an issue with unmatched conflict markers
       77  var        PIC 9.
<<<<<<< HEAD
       01  var2       PIC X.
=======
<<<<<<< HEAD
      *> Verify that we only report conflict markers at the start of lines.
 <<<<<<< HEAD
       01  one        PIC X.
 =======
       01  two        PIC 9.
 >>>>>>> some note
       PROCEDURE DIVISION.
           GOBACK.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:8: error: version control conflict marker in file
prog.cob:10: error: version control conflict marker in file
prog.cob:12: error: version control conflict marker in file
prog.cob:15: error: version control conflict marker in file
prog.cob:17: error: version control conflict marker in file
prog.cob:18: error: version control conflict marker in file
prog.cob:20: error: invalid indicator '<' at column 7
prog.cob:22: error: invalid indicator '=' at column 7
prog.cob:24: warning: ignoring invalid directive: '>> some'
])

AT_CHECK([$COMPILE_ONLY -free prog.cob], [1], [],
[prog.cob:8: error: version control conflict marker in file
prog.cob:10: error: version control conflict marker in file
prog.cob:12: error: version control conflict marker in file
prog.cob:15: error: version control conflict marker in file
prog.cob:17: error: version control conflict marker in file
prog.cob:18: error: version control conflict marker in file
prog.cob:24: warning: ignoring invalid directive
prog.cob:20: error: PROCEDURE DIVISION header missing
prog.cob:20: error: syntax error, unexpected <
prog.cob:22: error: syntax error, unexpected =
prog.cob:25: error: syntax error, unexpected PROCEDURE
])
AT_CLEANUP


AT_SETUP([SORT syntax])
AT_KEYWORDS([misc fundamental KEY])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED - Diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT SRTFIL ASSIGN TO "SRTFIL"
           ORGANIZATION LINE SEQUENTIAL.
           SELECT STFILE ASSIGN TO "STFILE"
           ORGANIZATION LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD SRTFIL.
       01 SRTREC               PIC X(256).
       SD STFILE.
       01 STFREC               PIC X(256).

       WORKING-STORAGE SECTION.
       01 G             VALUE "d4b2e1a3c5".
         02 TBL         OCCURS 5.
           03 X         PIC X.
           03 Y         PIC 9.
         02 TBL-ORD     OCCURS 5 ASCENDING YO.
           03 XO        PIC X.
           03 YO        PIC 9.

       PROCEDURE DIVISION.
           SORT TBL ASCENDING KEY X.
           SORT TBL DESCENDING.
           SORT TBL.
           SORT TBL-ORD ASCENDING.
           SORT TBL-ORD.
           SORT STFILE DESCENDING KEY SRTREC.
           SORT STFILE DESCENDING KEY SRTREC USING SRTFIL GIVING SRTFIL.
           SORT STFILE ASCENDING.
           SORT STFILE.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:32: error: table SORT requires KEY phrase
prog.cob:35: error: file sort requires USING or INPUT PROCEDURE
prog.cob:35: error: file sort requires GIVING or OUTPUT PROCEDURE
prog.cob:37: error: file sort requires KEY phrase
prog.cob:38: error: file sort requires KEY phrase
])
AT_CLEANUP


AT_SETUP([long literal in error message])
AT_KEYWORDS([misc literals])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# NOT IMPLEMENTED - Diagnostic messages

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      tutorial.
       PROCEDURE DIVISION.
           move low-values to
           ' 1  c d e f g h i j k l m n 0 q.'-
           ' 2  C D E F G H I J K L M N 0 Q.'-
           ' 3  c d e f g h i j k l m n 0 q.'-
           ' 4  C D E F G H I J K L M N 0 Q.'-
           ' 5  c d e f g h i j k l m n 0 q.'-
           ' 6  C D E F G H I J K L M N 0 Q.'-
           ' 7  c d e f g h i j k l m n 0 q.'-
           ' 8  C D E F G H I J K L M N 0 Q.'-
           ' 9  c d e f g h i j k l m n 0 q.'-
           '10  C D E F G H I J K L M N 0 Q.'-
           '11  c d e f g h i j k l m n 0 q.'-
           '12  C D E F G H I J K L M N 0 Q.'-
           '13  c d e f g h i j k l m n 0 q.'-
           '14  C D E F G H I J K L M N 0 Q.'-
           '15  c d e f g h i j k l m n 0 q.'.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:5: error: invalid MOVE target: literal " 1  c d e f g h i j k l m n 0 q. 2 ..."
])

AT_CLEANUP


AT_SETUP([literal missing terminating character])
AT_KEYWORDS([misc literals terminator])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
AT_XFAIL_IF(true)
# This is a check we SHOULD be making TODO

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      tutorial.
       PROCEDURE DIVISION.
           DISPLAY ' 1  c d e f g h i j k l m n 0 q.
      -            ' 2  C D E F G H I J K L M N 0 Q.
])

# FIXME: we should move this from scanner to pplex to preserve the spaces
# [prog.cob:5: error: invalid literal: ' 1  c d e f g h i j k l m n 0 q. ...'
AT_CHECK([$COMPILE_ONLY -w prog.cob], [1], [],
[prog.cob:5: error: invalid literal: ' 1 c d e f g h i j k l m n 0 q. 2  ...'
prog.cob:5: error: missing terminating ' character
prog.cob:5: error: syntax error, unexpected end of file
])

AT_CLEANUP


AT_SETUP([DISPLAY directive (1)])
AT_KEYWORDS([misc directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# COBOL2022 Feature TODO

# this format is COBOL 202x without UPON
# --> implied UPON LISTING which goes to stdout
# as there is no listing active
# TODO: extend the >> DISPLAY tests and actually support
#       the complete format...

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
       >>DISPLAY "OK"
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([DISPLAY directive (2)])
AT_KEYWORDS([misc extension directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# OpenCOBOL 2.x Feature DIALECT

# this is an OpenCOBOL/GnuCOBOL 2.x extension, with implied literal
# similar to $DISPLAY

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
       >>DISPLAY OK
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([DISPLAY directive (3)])
AT_KEYWORDS([misc extension directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Microfocus Feature DIALECT

# this is the classical MicroFocus format

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
      $DISPLAY OK
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([conditional / define directives (1)])
AT_KEYWORDS([misc directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# GnuCOBOL Feature DIALECT


AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
       >>DISPLAY "NOTOK"
       >>ELIF ACTIVATE2 DEFINED
       >>DISPLAY "OK"
       >>ELSE
       >>DISPLAY "NOTOK"
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -DACTIVATE2 prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([conditional / define directives (2)])
AT_KEYWORDS([misc directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# COBOL2002 Feature DIALECT

# COBOL 2002 format; checks that defines are applied at correct place

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >> IF X DEFINED
         >>DISPLAY "X defined"
       >> ELSE
         >> DISPLAY "X not defined"
         >> DEFINE X 1
       >> END-IF
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -D X prog.cob], [0],
[X defined
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[X not defined
])
AT_CLEANUP


AT_SETUP([conditional directives with lvl 78 (1)])
AT_KEYWORDS([misc extensions directive])

# MicroFocus format; checks that level 78 are applied

# FIXME - not done yet:
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Microfocus format DIALECT

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       78 Y            VALUE 'a'.
       PROCEDURE       DIVISION.
      $IF X DEFINED
      $DISPLAY X defined
      $ELIF Y DEFINED
      $DISPLAY X not defined, but Y via lvl 78
      $ELSE
      $DISPLAY X not defined
      $END
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY -D X prog.cob], [0],
[X defined
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[X not defined, but Y via lvl 78
])
AT_CLEANUP


AT_SETUP([conditional directives with lvl 78 (2)])
AT_KEYWORDS([misc extensions directive])
AT_SKIP_IF(false)
AT_XFAIL_IF(true)
# Microfocus format DIALECT

# MicroFocus format; checks that level 78 are applied with correct values

# FIXME - not done yet:
AT_XFAIL_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       78 Y            VALUE 1.
       78 Y2           VALUE 1.
       78 X            VALUE 2.
       78 Z            VALUE 354.
       PROCEDURE       DIVISION.
      $IF Y = Y2X
      $DISPLAY correct Y = Y2
      $ELSE
      $DISPLAY bad: Y should be = Y2
      $END
      $IF Y > X
      $DISPLAY BAD - Y is not > X
      $ELIF Y < X
      $DISPLAY correct Y < X
      $ELSE
      $DISPLAY BROKEN
      $END

      $IF X > Y
      $DISPLAY correct X > Y
      $ELIF X < Y
      $DISPLAY BAD - X is not < Y
      $ELSE
      $DISPLAY BROKEN
      $END
           CONTINUE
           .
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0],
[correct Y = Y2
correct Y < X
correct X > Y
])
AT_CLEANUP


AT_SETUP([NX literals])
AT_KEYWORDS([misc])
AT_XFAIL_IF(test national_hex != implmented)
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
           *> Valid form
           DISPLAY NX"265E"
           DISPLAY NX"0123456789ABCDEF"

           *> invalid form
           DISPLAY NX"GH"
                    NX"1".
])
# Technically, this test fails because of doubled double-quote in the
# stderr text, which serves the syntax highlighting in emacs
# autotest-mode.  As a matter of ISO Cobol, it is expected to fail
# because NX is unimplmeented.
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob:6: syntax error: National not implemented at '265E'
prog.cob:7: syntax error: National not implemented at '0123456789ABCDEF'
prog.cob:10: syntax error: symbol 'NX' not found at '""'
prog.cob:11: syntax error: hex literal '1' has an odd number (1) of characters at '1'
cobol1: error: failed compiling prog.cob
])
AT_CLEANUP


AT_SETUP([binary literals])
AT_KEYWORDS([misc extensions ])
AT_XFAIL_IF(test binary_literals != implmented)
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY B"101010"
           DISPLAY B"111111111111111111111111111111111111111111111111111
      -             "1111111111111" *> " Syntax highlighting hack

           DISPLAY B"23"
           DISPLAY B"111111111111111111111111111111111111111111111111111
      -             "111111111111111111111111111111111111111111111111111
      -             "11111111111111111111111111111111111111111111111111"
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[cobol1: warning: Boolean literals are not expected to work correctly
prog.cob:9: syntax error: symbol 'B' not found at '""'
prog.cob:10: error: input inconceivably long at '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
cobol1: error: failed compiling prog.cob
])
AT_CLEANUP


# cobc says this is a valid program.  Maybe, but it is pointless.
# The only utility for a program with a global declarative but no procedure body
# is if it has a contained program that could invoke its declaratives.
AT_SETUP([DECLARATIVES, but no program])
AT_KEYWORDS([misc parsing])
AT_XFAIL_IF([test "$COB_DIALECT" != "gnu"])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        PROCEDURE DIVISION.
        DECLARATIVES.
        GLOBAL-SECTION SECTION.
            USE ERROR OUTPUT.
        END DECLARATIVES.
      *> This should not generate a parsing error
        END PROGRAM prog.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./a.out], [0], [], [])
AT_CLEANUP

AT_SETUP([NOT ON EXCEPTION phrases before ON EXCEPTION])
AT_KEYWORDS([misc])
AT_XFAIL_IF([test "$COB_DIALECT" != "gnu"])
# The ISO spec *could* be read to insist that ON EXCEPTION must appear
# before NOT ON EXCEPTION, and that's what this test tests.  But in
# general conditional phrases are allowed in either order.  This test
# also expects ON EXCEPTION for DISPLAY, which ISO reqires only for
# SCREEN, which gcobol does not support.
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       ENVIRONMENT    DIVISION.
       INPUT-OUTPUT   SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN "f.txt"
               ORGANIZATION LINE SEQUENTIAL.

       DATA           DIVISION.
       FILE           SECTION.
       FD  f LINAGE 10.
       01  f-rec PIC X.

       PROCEDURE      DIVISION.
           WRITE f-rec FROM "x"
               NOT END-OF-PAGE
                   CONTINUE
               END-OF-PAGE
                   CONTINUE
           END-WRITE
           WRITE f-rec FROM "x"
               END-OF-PAGE
                   CONTINUE
               NOT END-OF-PAGE
                   CONTINUE
           END-WRITE
           WRITE f-rec FROM "x"
               NOT END-OF-PAGE
                   CONTINUE
           END-WRITE
           WRITE f-rec FROM "x"
               END-OF-PAGE
                   CONTINUE
           END-WRITE

           DISPLAY "blah"
               ON EXCEPTION
                   CALL "err"
                       NOT ON EXCEPTION
                           CONTINUE
                       ON EXCEPTION
                           CONTINUE.
           DISPLAY "blah"
               NOT ON EXCEPTION
                   CALL "err"
                       ON EXCEPTION
                           CONTINUE
                       NOT ON EXCEPTION
                           CONTINUE.
])
AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:22: error: NOT AT END-OF-PAGE before AT END-OF-PAGE does not conform to COBOL 85
prog.cob:44: error: NOT EXCEPTION before EXCEPTION does not conform to COBOL 85
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
AT_CLEANUP
