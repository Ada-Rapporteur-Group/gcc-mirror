#!/usr/bin/python

# This one builds a simple cobol program with many variables, and a simple
# C program that parallels the data structure of those variables.  It was part
# of an effort to figure out why it takes the GCC middle end so long to just
# build the .S for the variables.

import sys

fout = None

def xprint(str):
  global fout
  # print(str)
  fout.write(str)
  fout.write("\n")

def cobol_code():
  global fout
  nlines = int(sys.argv[1])

  fout = open("test.cbl", "w")

  xprint("        identification division.")
  xprint("        program-id. ncalls_cobol.")
  xprint("        data division.")
  xprint("        working-storage section.")
  xprint("        77 SQLADR picture x(24) value \"SQLADR_cobol\".")
  xprint("        77 var1   picture x(24).")
  xprint("        77 var2   picture x(24).")

  xprint("        procedure division.")

  for i in range(1, nlines+1):
    xprint("        call \"SQLADR_cobol\" using var1 var2".format(i))
#    xprint("        call SQLADR_cobol using var1 var2".format(i))

  xprint("        stop run.")
  xprint("        end program ncalls_cobol.")

  xprint("")

  xprint("        identification division.")
  xprint("        program-id. SQLADR_cobol.")
  xprint("        data division.")
  xprint("        working-storage section.")
  xprint("        77 cnt picture 999999 value 1.")
  xprint("        linkage section.")
  xprint("        77 var1 picture x(24).")
  xprint("        77 var2 picture x(24).")
  xprint("        procedure division using var1 var2.")
  xprint("        display cnt")
  xprint("        add 1 to cnt")
  xprint("        goback.")
  xprint("        end program SQLADR_cobol.")

  fout.close();

def c_code():
  global fout

  nlines = int(sys.argv[1])

  fout = open("ccc.c", "w")
  xprint("#include \"framework.c\"")
  xprint("int ncalls_c()")
  xprint("  {")
  for i in range(1, nlines+1):
    xprint("  THE_MEAT;")
  xprint("  }")
  xprint("")


  xprint("int main()")
  xprint("  {")
  xprint("  ncalls_c();")
  xprint("  }")

  fout.close();

cobol_code()
c_code()

