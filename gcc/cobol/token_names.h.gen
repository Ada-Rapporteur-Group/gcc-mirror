#! /usr/bin/awk -f

# From the generated parse.h, generate a map of token names in their
# COBOL form to their integer values.  While we're at it, generate an
# array of the same names to support keywork_str().

BEGIN {
  FS = "[ ,=]+"
  script = PROCINFO["argv"][2]
  input = PROCINFO["argv"][3]
  print "// generated by", script, input
  printf "// "
  system("date")
  print "tokens = {"
}

/^ +enum yytokentype/,/[}];/ {
  if( $0 ~ /enum yytokentype/ ) { next }
  if( $0 ~ /[{}]/ ) { next }
  if( $3 < 3 + 255 ) { next }

  orig = $2

  # remove conventional suffix
  gsub( /_(DIV|SECT|KW|kw)$/, "", $2 )

  gsub( /^CODESET/, "CODE-SET", $2 )
  gsub( /^IO/, "I-O", $2 )

  gsub(/_/, "-")
  upper = $2
  name = tolower($2)
  print "\t{ \"" name "\",", orig, "}, //", $3

  # Aliases
  if( name == "nulls" ) {
    name = "null"
    print "\t{ \"" name "\",", orig, "}, //", $3
  }
  if( name == "spaces" ) {
    name = "space"
    print "\t{ \"" name "\",", orig, "}, //", $3
  }
  if( name == "quotes" ) {
    name = "quote"
    print "\t{ \"" name "\",", orig, "}, //", $3
  }
  if( name == "thru" ) {
    name = "through"
    print "\t{ \"" name "\",", orig, "}, //", $3
  }   
  if( name == "zero" ) {
    print "\t{ \"" name "s\",", orig, "}, //", $3
    print "\t{ \"" name "es\",", orig, "}, //", $3
  }                      

  tok = $3 - (3 + 255)
  kw_array[tok] = upper
}

END {
  print "};\n"

  print "token_names = {" 
  for( tok in kw_array ) {
    print "\t\"" kw_array[tok] "\",", "//", tok, "(" tok + 3 + 255 ")"
  }
  print "};"
}
