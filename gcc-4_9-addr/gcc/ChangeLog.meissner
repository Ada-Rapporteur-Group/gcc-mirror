2013-09-20  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Add new
	comment, describing all constraints.  Fix wv constraint.  Sync up
	with patch posted on 9/20.

	Merge up to 202787.
	* REVISION: Update subversion id.

2013-09-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Delete
	getenv tests for -mallow-upper-{df,sf}.

	(redone ChangeLog.meissner)
	* config/rs6000/rs6000.md (f32_lv): Use %x for VSX registers.
	(f32_sv): Likewise.
	(Ftrad): New mode attributes for combining scalar double and
	single precision floating insns into one expander.
	(Fvsx): Likewise.
	(Ff): Likewise.
	(Fv): Likewise.
	(Fs): Likewise.
	(Ffre): Likewise.
	(FFRE): Likewise.
	(zero_extendsidi2_lfiwzx): Use wu constraint instead of wm, to
	deal with loads/stores to the Altivec registers.
	(extendsidi2_lfiwax): Likewise.
	(abs<mode>2, SF/DF modes): Combine SF and DF insns.  Move VSX
	scalar double precision insns back to rs6000.md.  Add both
	expanders, and insns for both types.
	(abs<mode>2_fpr, SF/DF modes):
	(nabs<mode>2_fpr, SF/DF modes): Likewise.
	(neg<mode>2, SF/DF modes): Likewise.
	(smax<mode>3, SF/DF modes): Likewise.
	(smax<mode>3_vsx, SF/DF modes): Likewise.
	(smin<mode>3, SF/DF modes): Likewise.
	(smin<mode>3_vsx, SF/DF modes): Likewise.
	(add<mode>3, SF/DF modes): Likewise.
	(add<mode>3_fpr, SF/DF modes): Likewise.
	(sub<mode>3, SF/DF modes): Likewise.
	(sub<mode>3_fpr, SF/DF modes): Likewise.
	(mul<mode>3, SF/DF modes): Likewise.
	(mul<mode>3_fpr, SF/DF modes): Likewise.
	(div<mode>3, SF/DF modes): Likewise.
	(div<mode>3_fpr, SF/DF modes): Likewise.
	(fre<Fs>, SF/DF modes): Likewise.
	(sqrt<mode>2, SF/DF modes): Likewise.
	(rsqrt<mode>2, SF/DF modes): Likewise.
	(cmp<mode>_fpr, SF/DF modes): Likewise.
	(abssf2): Delete SF insns combined into a single SF/DF expander.
	(fnabs SFmode): Likewise.
	(addsf3): Likewise.
	(subsf3): LIkewise.
	(mulsf3): Likewise.
	(divsf3): Likewise.
	(fres): Likewise.
	(fmasf4_fpr): Likewise.
	(fmssf4_fpr): Likewise.
	(nfmasf4_fpr): Likewise.
	(nfmssf4_fpr): Likewise.
	(extendsfdf2_fpr): Use wy constraint for SF values in Altivec
	registers.
	(sqrtsf2): Delete SF insns combined into a single SF/DF expander.
	(rsqrtsf_internal1): Likewise.
	(truncdfsf2_fpr): Use wy constraint for SF in Altivec registers.
	(copysign<mode>3_fcpsgn): Combine SF/DF, and support either in
	Altivec registers.
	(smaxsf3): Delete SF insns combined into a single SF/DF expander.
	(sminsf3): Likewise.
	(movsfcc): Likewise.
	(mov<mode>cc): Combine SF/DF insns.
	(fselsfsf4): Delete SF-only insns.
	(fseldfsf4): Likewise.
	(fsel<mode>sf4): Merge SF/DF insns.
	(fsel<mode>df4): Likewise.
	(negdf2): Delete DF only insns, after combining SF/DF modes.
	(negdf2_fpr): Likewise.
	(absdf2): Likewise.
	(absdf2_fpr): Likewise.
	(nabsdf2_fpr): Likewise.
	(adddf3): Likewise.
	(adddf3_fpr): Likewise.
	(subdf3): Likewise.
	(subdf3_fpr): Likewise.
	(muldf3): Likewise.
	(muldf3_fpr): Likewise.
	(divdf3): Likewise.
	(divdf3_fpr): Likewise.
	(fred_fpr): Likewise.
	(rsqrtdf_internal1): Likewise.
	(fmadf4_fpr): Likewise.
	(fmsdf4_fpr): Likewise.
	(nfmadf4_fpr): Likewise.
	(nfmsdf4_fpr): Likewise.
	(sqrtdf2): Likewise.
	(sqrtdf2_fpr): Likewise.
	(smaxdf3): Likewise.
	(smindf3): Likewise.
	(movdfcc): Likewise.
	(fseldfdf4): Likewise.
	(fselsfdf4): Likewise.
	(lfiwax): Remove ! constraint from power6x transfer.  Use wu for
	power8 direct moves.
	(lfiwzx): Likewise.
	(floatsi<mode>2_lfiwax_mem): Add wu constraint for power8 direct
	moves.
	(floatunssi<mode>2_lfiwzx_mem): Likewise.
	(lrint<mode>di2): Use TARGET_<MODE>_FPR to simplify tests.
	(btrunc<mode>2): Use TARGET_<MODE>_FPR to simplify tests.  Add
	support for using Altivec registers and VSX instructions.  Combine
	define_expand, define_insn.
	(ceil<mode>2): Likewise.
	(floor<mode>2): Likewise.
	(btrunc<mode>2_fpr): Delete insn, fold expander into insn.
	(ceil<mode>2_fpr): Likewise.
	(floor<mode>2): Likewise.
	(mov<mode>_hardfloat, SF/SD modes): Add support for putting SF
	registers in Altivec registers.
	(mov<mode>_hardfloat32, DF/DD modes): Make VSX operations use
	constraint that only recognizes Altivec registers, use traditional
	instructions for moves that target just the floating point
	registers.
	(mov<mode>_hardfloat64, DF/DD modes): Likewise.
	(movdi_internal64): Likewise.
	(cmpsf_internal1): Delete SF/DF only insns.
	(cmpdf_internal1): Likewise.
	(fma<mode>4_fpr): Combine SF/DF multiply-add insns.  Add support
	for using ISA 2.06/2.07 instructions for registers in the Altivec
	registers.
	(fms<mode>4_fpr): Likewise.
	(fnma<mode>4_fpr): Likewise.
	(fnms<mode>4_fpr): Likewise.

	* config/rs6000/vector.md (VEC_R): Add PTI mode to types getting
	reload functions.

	* config/rs6000/constraints.md (wa constraint): Rearrange w<x>
	constraints to be in alphabetical order.  Add documentation
	string.
	(wd constraint): Likewise.
	(wf constraint): Likewise.
	(wg constraint): Likewise.
	(wn constraint): Likewise.
	(ws constraint): Likewise.
	(wt constraint): Likewise.
	(wu constraint): New constraint for SF mode in Altivec registers.
	(wv constraint): Repurpose for DF mode in Altivec registers.
	(ww constraint): New constraint for doing float conversion
	operations under VSX.
	(wv constraint): New constraint for VSX register to hold SF
	values.

	* config/rs6000/rs6000-builtin.def (xsrdpim): Change insn name
	(xsrdpip): Likewise.
	(xsrdpiz): Likewise.

	* config/rs6000/rs6000.opt (-mvsx-scalar-float): New debug switch
	to disable use of ISA 2.07 SF instructions.
	(-mvsx-scalar-double): Change initialization from -1 to 1.
	(-mvsx-scalar-memory): Rename debug switch to -mupper-regs-df.
	(-mupper-regs-df): New debug switch to control whether the altivec
	registers can hold DF values if -mvsx.
	(-mupper-regs-sf): New debug switch to control whether the altivec
	registers can hold SF values if -mp8-vector.

	* config/rs6000/rs6000.c (rs6000_vector_reload): Delete, fold into
	reg_addr structure.
	(reload_fpr_gpr): Likewise.
	(reload_gpr_vsx): Likewise.
	(reload_vsx_gpr): Likewise.
	(addr_mask_type): New type for address masks.
	(reg_addr): New static array to hold various reload information
	based on type, combining reload helper insn functions, with
	address masks to describe what type of addresses each type
	supports in different register classes.
	(ADDR_VALID_FPR): Address mask to say if a type is valid in
	certain register classes.
	(ADDR_VALID_AV): Likewise.
	(ADDR_VALID_VSX): Likewise.
	(ADDR_VALID_MASK): Likewise.
	(ADDR_INDEXED_GPR): Address mask to say if indexed memory
	operations are allowed for a type in a register class.
	(ADDR_INDEXED_FPR): Likewise.
	(ADDR_INDEXED_AV): Likewise.
	(ADDR_INDEXED_VSX): Likewise.
	(ADDR_INDEXED_NOSTRICT): Likewise.
	(ADDR_INDEXED_MASK): Likewise.
	(ADDR_OFFSET_GPR): Address mask to say if offset addressing is
	available for a type in a register class.
	(ADDR_OFFSET_FPR): Likewise.
	(ADDR_OFFSET_NOSTRICT): Likewise.
	(ADDR_OFFSET_MASK): Likewise.
	(ADDR_MULTIPLE_GPR): Address mask to say if a type takes more than
	one hard register in a register class.
	(ADDR_MULTIPLE_FPR): Likewise.
	(ADDR_MULTIPLE_AV): Likewise.
	(ADDR_MULTIPLE_VSX): Likewise.
	(ADDR_MULTIPLE_MASK): Likewise.
	(ADDR_UPDATE_GPR): Address mask to say if PRE_INCREMENT,
	PRE_DECREMENT, and PRE_MODIFY are allowed for a given type in a
	register class.
	(ADDR_UPDATE_FPR): Likewise.
	(ADDR_UPDATE_NOSTRICT): Likewise.
	(ADDR_UPDATE_MASK): Likewise.
	(ADDR_AND_AV): Address mask for whether an altivec load/store can
	be done.
	(ADDR_AND_NOSTRICT): Likewise.
	(ADDR_AND_MASK): Likewise.
	(ADDR_FUSION_GPR): Address mask to say whether instruction fusion
	should be done for a mode in a register class.
	(ADDR_FUSION_NOSTRICT): Likewise.
	(ADDR_FUSION_MASK): Likewise.
	(ADDR_GPR_MASK): Address masks for a given register class.
	(ADDR_FPR_MASK): Likewise.
	(ADDR_AV_MASK): Likewise.
	(ADDR_VSX_MASK): Likewise.
	(ADDR_NOSTRICT_MASK): Likewise.
	(rs6000_register_move_cost): Add forward declaration.
	(mode_allowed_in_vsx_p): Helper functions to determine if a given
	mode is allowed in a certain register class.
	(mode_allowed_in_altivec_p): Likewise.
	(mode_allowed_in_vsx_or_altivec_p): Likewise.
	(mode_allowed_in_fpr_p): Likewise.
	(rs6000_hard_regno_nregs_internal): Use address mask helper
	functions instead of VECTOR_MEM_VSX_P, which does not work as well
	with a mixture of traditional and VSX loads.
	(rs6000_hard_regno_mode_ok): Likewise.
	(rs6000_debug_addr_mask): New debug function to print address
	masks in a readable fashion.
	(rs6000_debug_reg_global): Print wu, ww, and wv constraints.  Deal
	with reload support function insns being moved into reg_addr
	array.  Call rs6000_debug_addr_mask to print address masks.  Print
	what type of floating point is being used.
	(rs6000_init_address_modes): New function to initialize address
	masks for all types and register classes, and the secondary reload
	support insns.
	(rs6000_init_hard_regno_mode_ok): Use ssize_t instead of int for
	signed iterators.  Add support for putting SF values in Altivec
	registers if -mp8-vector.  Rework support for putting SF values in
	Altivec registers if -mvsx.  Sort setting up constraints.
	Initialize new wu, ww, wy constraints.  Repurpose wv constraint.
	Call rs6000_init_address_modes to set up secondary reload helper
	insns.
	(rs6000_debug_legitimate_address_p): Print whether we are before,
	in the middle or, or after reload.
	(rs6000_secondary_reload_direct_move): Use reg_array for getting
	secondary reload helper insns.  Only call register_operand, if the
	value is a SUBREG.
	(rs6000_secondary_reload): Likewise.
	(rs6000_opt_masks): Add -mupper-regs-df, -mupper-regs-sf.

	* config/rs6000/vsx.md (vsx_add<mode>3): Drop DF scalar mode
	support, only support V4SF and V2DF vectors.
	(vsx_sub<mode>3): Likewise.
	(vsx_mul<mode>3): Likewise.
	(vsx_div<mode>3): Likewise.
	(vsx_fre<mode>2): Likewise.
	(vsx_neg<mode>2): Likewise.
	(vsx_abs<mode>2): Likewise.
	(vsx_nabs<mode>2): Likewise.
	(vsx_smax<mode>3): Likewise.
	(vsx_smin<mode>3): Likewise.
	(vsx_sqrt<mode>3): Likewise.
	(vsx_rsqrte<mode>): Likewise.
	(vsx_fma<mode>4): Likewise.
	(vsx_fms<mode>4): Likewise.
	(vsx_nfma<mode>4): Likewise.
	(vsx_nfms<mode>4): Likewise.
	(vsx_sminsf3): Delete, moved to rs6000.md.
	(vsx_smaxsf3): Likewise.
	(vsx_fmadf4): Likewise.
	(vsx_fmsdf4): Likewise.
	(vsx_nfmadf4): Likewise.
	(vsx_nfmsdf4): Likewise.
	(vsx_cmpdf_internal1): Likewise.
	(vsx_copysign<mode>3): Drop DF scalar mode, only do V4SF/V2DF.
	(vsx_btrunc<mode>2): Likewise.
	(vsx_floor<mode>2): Likewise.
	(vsx_ceil<mode>2): Likewise.

	* config/rs6000/rs6000.h (TARGET_SF_SPE): New macro to allow
	TARGET_<MODE>_SPE tests to see if SPE <MODE> is supported.
	(TARGET_DF_SPE): Likewise.
	(TARGET_SF_FPR): New macro to allow TARGET_<MODE>_FPR tests if
	<MODE> is supported in FPR or VSX registers.
	(TARGET_DF_FPR): Likewise.
	(TARGET_SF_INSN): New macro to allow TARGET_<MODE>_INSN tests to
	say whether the operation is supported in any floating point
	system.
	(TARGET_DF_INSN): Likewise.
	(enum r6000_reg_class_enum): Add wu, ww, wz constraints.
	Repurpose wv constraint.  Sort other constraints.

	* doc/md.texi  (PowerPC and IBM RS6000): Improve documentation for
	wa, wd, wf, wg, wl, wm, wr, ws, wt, wx, wz constraints.  Add
	documentation for wu, ww, and wy constraints.  Repurpose wv
	constraint.

===============================================================================

2013-09-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Delete
	getenv tests for -mallow-upper-{df,sf}.

2013-09-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 202754.
	* REVISION: Update subversion number.

	* config/rs6000/rs6000.md (mul<mode>3_fpr): Set type to dmul.
	(sqrt<mode>2): Set fp_type to fp_sqrt_s/fp_sqrt_d.

2013-09-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 202720.
	* REVISION: Update subversion id.

2013-09-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (div<mode>3, SFDF modes): Set fp_type
	attribute as appropriate.

2013-09-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 202632.
	* REVISION: Update subversion id.

2013-09-13  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 202581.
	* REVISION: Update subversion id.

	* config/rs6000/rs6000.c (reload_funcs): Delete #if 0 code.
	(rs6000_init_address_modes): Allow update addressing on multiword
	itesm if offset addressing is available.
	(rs6000_legitimate_address_p): Undo code to use address masks to
	determine if can do update addressing.
	(mode_allows_update_p): Delete, not used at present.

2013-09-06  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 202296.
	* REVISION: Update subversion id.

2013-08-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_R): Add PTImode to types with
	reload functions.

	* config/rs6000/rs6000.c (rs6000_vector_reload): Delete separate
	arrays holding different reload insns, and combine them into one
	structure.  Add a mask of the allowable address forms for each type.
	(reload_fpr_gpr): Likewise.
	(reload_gpr_vsx): Likewise.
	(reload_vsx_gpr): Likewise.
	(struct rs6000_reg_addr): Likewise.
	(reg_addr): Likewise.
	(ADD_VALID_*): Likewise.
	(ADDR_INDEXED_*): Likewise.
	(ADDR_OFFSET_*): Likewise.
	(ADDR_MULTIPLE_*): Likewise.
	(ADDR_UPDATE_*): Likewise.
	(ADDR_AND_*): Likewise.
	(ADDR_GPR_MASK): Likewise.
	(ADDR_FPR_MASK): Likewise.
	(ADDR_AV_MASK): Likewise.
	(ADDR_VSX_MASK): Likewise.
	(ADDR_NOSTRICT_MASK): Likewise.
	(rs6000_register_move_cost): Add forward declaration.
	(mode_allowed_in_vsx_p): Inline helper functions to say whether a
	mode is allowed in certain registers.
	(mode_allowed_in_altivec_p): Likewise.
	(mode_allowed_in_vsx_or_altivec_p): Likewise.
	(mode_allowed_in_fpr_p): Likewise.
	(mode_allows_update_p): Inline helper function to say whether
	update forms are allowed for the address.
	(rs6000_hard_regno_nregs_internal): Use the inline helper
	functions to say whether a mode can go in a hard register.
	(rs6000_debug_addr_mask): New debug function to decode the address
	mask bits.
	(rs6000_debug_reg_global): Switch to using reg_addr array for
	reload functions.  Call rs6000_debug_addr_mask for each type.
	(rs6000_init_address_modes): New function to set up the address
	masks for each type.
	(rs6000_init_hard_regno_mode_ok): Switch to using the reg_addr
	array to hold secondary reload information.  Call
	rs6000_init_address_modes.
	(rs6000_option_override_internal): Add temporary support to turn
	on -mupper-regs-{df,sf} if an evnronment variable is set.  Do not
	submit this part of the code.
	(rs6000_legitimate_address_p): Use mode_allows_update_p to
	determine if PRE_INC, PRE_DEC, and PRE_MODIFY are supported.
	(rs6000_debug_legitimate_address_p): Print whether we are before,
	in, or after reload.
	(rs6000_secondary_reload_direct_move): Use the reg_addr array
	instead of separate reload function arrays.
	(rs6000_secondary_reload): Likewise. Only call register_operand if
	the address is a SUBREG.

	* config/rs6000/rs6000.md (f32_lv): Use %x for VSX registers.
	(f32_sv): Likewise.

2013-08-21  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wa constraint): Add documentation
	to all w* constraints.  Make the documentation agree with
	md.texi.  Sort the w* constraints to be in alphabetical order.
	Add wu, wv, and wy constraints for supporting using the upper
	registers for DFmode under power7 and SFmode under power8.
	(wd constraint): Likewise.
	(wf constraint): Likewise.
	(wg constraint): Likewise.
	(wl constraint): Likewise.
	(wm constraint): Likewise.
	(wn constraint): Likewise.
	(wr constraint): Likewise.
	(ws constraint): Likewise.
	(wt constraint): Likewise.
	(wu constraint): Likewise.
	(wv constraint): Likewise.
	(wx constraint): Likewise.
	(wy constraint): Likewise.
	(wz constraint): Likewise.
	* doc/md.texi (PowerPC and IBM RS6000): Likewise.

	* config/rs6000/rs6000-builtin.def (xsrdpim): Use floor, ceil,
	btrunc insns, instead of vsx_<name>.

	* config/rs6000/rs6000.opt (-mvsx-scalar-float): New debug swtich
	to allow/disallow single precision VSX scalar instructions.
	(-mvsx-double-float): Change initial value to 1 from -1.
	(-mvsx-scalar-memory): Make this an alias of -mupper-regs-df.
	(-mupper-regs-df): New debug switches to control whether DFmode
	and SFmode can use the upper registers on power7/power8
	respectively.
	(-mupper-regs-sf): Likewise.

	* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Add support
	for -mupper-regs-sf and -mupper-regs-df.
	(rs6000_init_hard_regno_mode_ok): Likewise.
	(rs6000_opt_masks): Likewise.
	(rs6000_debug_reg_global): Print wu, and wy constraints.
	Print which type of floating point unit and registers are
	available for DFmode/SFmode.

	* config/rs6000/vsx.md (vsx_add<mode>3): Move all scalar DF VSX
	support to rs6000.md.  Make SF/DFmode insns common where
	possible.  Add support for power8 scalar float instructions using
	the upper registers.  Don't use VSv and VStype_simple mode
	attributes on the insns that only handle vectors after moving
	scalar support to rs6000.md.  Merge some expanders into the
	define_insn if there is only one option.
	(vsx_sub<mode>3): Likewise.
	(vsx_mul<mode>3): Likewise.
	(vsx_div<mode>3): Likewise.
	(vsx_fre<mode>2): Likewise.
	(vsx_neg<mode>2): Likewise.
	(vsx_abs<mode>2): Likewise.
	(vsx_nabs<mode>2): Likewise.
	(vsx_smax<mode>3): Likewise.
	(vsx_smaxsf3): Likewise.
	(vsx_smin<mode>3): Likewise.
	(vsx_sminsf3): Likewise.
	(vsx_sqrt<mode>2): Likewise.
	(vsx_rsqrte<mode>2): Likewise.
	(vsx_fmadf4): Likewise.
	(vsx_fmsdf4): Likewise.
	(vsx_fms<mode>4): Likewise.
	(vsx_nfmadf4): Likewise.
	(vsx_nfma<mode>4): Likewise.
	(vsx_nfmadf4): Likewise.
	(vsx_cmpdf_internal1): Likewise.
	(vsx_copysign<mode>3): Likewise.
	(vsx_btrunc<mode>2): Likewise.
	(vsx_floor<mode>2): Likewise.
	(vsx_ceil<mode>2): Likewise.
	* config/rs6000/rs6000.md (Ftrad): Likewise.
	(Fvsx): Likewise.
	(Ff): Likewise.
	(Fv): Likewise.
	(Fs): Likewise.
	(Ffre): Likewise.
	(FFRE): Likewise.
	(abs<mode>2): Likewise.
	(abs<mode>2_fpr): Likewise.
	(nabs<mode>2_fpr): Likewise.
	(neg<mode>2): Likewise.
	(neg<mode>2_fpr): Likewise.
	(smax<mode>3): Likewise.
	(smax<mode>3_vsx): Likewise.
	(smin<mode>3): Likewise.
	(smin<mode>3_fpr): Likewise.
	(smin/smax peephole): Likewise.
	(add<mode>3): Likewise.
	(add<mode>3_fpr): Likewise.
	(sub<mode>3): Likewise.
	(sub<mode>3_fpr): Likewise.
	(mul<mode>3): Likewise.
	(mul<mode>3_fpr): Likewise.
	(div<mode>3): Likewise.
	(div<mode>3_fpr): Likewise.
	(fre<Fs>): Likewise.
	(sqrt<mode>2): Likewise.
	(rsqrt<mode>2): Likewise.
	(cmp<mode>_fpr): Likewise.
	(negsf2): Likewise.
	(abssf2): Likewise.
	(negative abssf2 unnamed pattern): Likewise.
	(addsf3): Likewise.
	(subsf3): Likewise.
	(mulsf3): Likewise.
	(divsf3): Likewise.
	(fres): Likewise.
	(fmasf4_fpr): Likewise.
	(fmssf4_fpr): Likewise.
	(nfmasf4_fpr): Likewise.
	(nfmssf4_fpr): Likewise.
	(sqrtsf2): Likewise.
	(rsqrtsf_internal1): Likewise.
	(copysign<mode>3_fcpsgn): Likewise.
	(smaxsf3): Likewise.
	(sminsf3): Likewise.
	(sminsf3/smaxsf3 splitter): Likewise.
	(negdf2): Likewise.
	(negdf2_fpr): Likewise.
	(absdf2): Likewise.
	(absdf2_fpr): Likewise.
	(nabsdf2_fpr): Likewise.
	(adddf3): Likewise.
	(adddf3_fpr): Likewise.
	(subdf3): Likewise.
	(subdf3_fpr): Likewise.
	(muldf3): Likewise.
	(muldf3_fpr): Likewise.
	(divdf3): Likewise.
	(divdf3_fpr): Likewise.
	(fred_fpr): Likewise.
	(rsqrtdf_internal1): Likewise.
	(fmadf4_fpr): Likewise.
	(fmsdf4_fpr): Likewise.
	(nfmadf4_fpr): Likewise.
	(nfmsdf4_fpr): Likewise.
	(sqrtdf2): Likewise.
	(sqrtdf2_fpr): Likewise.
	(smaxdf3): Likewise.
	(smindf3): Likewise.
	(smaxdf3, smindf3 splitter): Likewise.
	(lrint<mode>di2): Likewise.
	(btrunc<mode>2): Likewise.
	(btranc<mode>2_fpr): Likewise.
	(ceil<mode>2): Likewise.
	(ceil<mode>2_fpr): Likewise.
	(floor<mode>2): Likewise.
	(floor<mode>2_fpr): Likewise.
	(cmpsf_internal1): Likewise.
	(cmpdf_internal1): Likewise.
	(fma<mode>4_fpr): Likewise.
	(fms<mode>4_fpr): Likewise.
	(nfma<mode>4): Likewise.
	(nfma<mode>4_fpr): Likewise.
	(fnms<mode>4): Likewise.
	(nfmssf4_fpr): Likewise.
	(zero_extendsidi2_lfiwzx): Restrict using VSX load/stores to
	Altivec registers.  Add support for power8 32-bit VSX memory
	operations.
	(extendsidi2_lfiwax): Likewise.
	(lfiwax): Likewise.
	(floatsi<mode>2_lfiwax_mem): Likewise.
	(lfiwzx): Likewise.
	(floatunssi<mode>2_lfiwzx_mem): Likewise.
	(mov<mode>_hardfloat, SFmode/SDmode): Likewise.
	(mov<mode>_hardfloat32, DFmode/DDmode): Likewise.
	(mov<mode>_hardfloat64, DFmode/DDmode): Likewise.
	(movdi_internal64): Likewise.
	(mov<mode>cc): Merge SF/DF conditional move patterns.
	(fsel<mode>sf4): Likewise.
	(fsel<mode>df4): Likewise.
	(fselsfsf4): Likewise.
	(fselsfdf4): Likewise.
	(fseldfsf4): Likewise.
	(fseldfdf4): Likewise.

	* config/rs6000/rs6000.h (TARGET_SF_SPE): Define new macros to
	simplify testing what kind of SFmode/DFmode floating point unit we
	have.
	(TARGET_DF_SPE): Likewise.
	(TARGET_SF_FPR): Likewise.
	(TARGET_DF_FPR): Likewise.
	(TARGET_SF_INSN): Likewise.
	(TARGET_DF_INSN): Likewise.
	(res6000_reg_class_enum): Add wu, and wy constraints.  Sort
	elements.

2013-08-19  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch from 201798.
	* REVISION: New file, track subversion id.

