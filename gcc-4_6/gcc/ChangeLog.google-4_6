2012-05-30   Cary Coutant  <ccoutant@google.com>

	* gcc/dwarf2out.c (index_location_lists): Don't index location
	lists that have already been indexed.

2012-05-30  Dehao Chen  <dehao@google.com>

	* predict.c (predict_extra_loop_exit): New function to predict for
	extra loop exits resulted from short-circuit conditions.

2012-05-29   Sterling Augustine  <saugustine@google.com>
	     Cary Coutant  <ccoutant@google.com>

	* gcc/dwarf2out.c (remove_loc_list_addr_table_entries): New function.
	(is_class_die): Return TRUE for DW_TAG_structure_type.
	(resolve_addr): Remove address table entries when replacing a
	location list.

2012-05-24  Sterling Augustine  <saugustine@google.com>
	    Cary Coutant  <ccoutant@google.com>

	Fission bugfixes and improvements.

	* opts.c (finish_options): -gfission implies -gpubnames.
	(common_handle_option): Pass empty arg string to set_debug_level.
	* common.opt (gno-fission): New option.
	(gfission): Remove JoinedOrMissing, add RejectNegative.
	(gno-pubnames, gpubnames): New options.
	* target.def (want_debug_pub_sections): Change default to false.
	* gcc.c (check_live_switch): Check -g options for -gno- options.

	* c-family/c-pretty-print.c (pp_c_specifier_qualifier_list): Add
	support for gnu_v3 style.
	* c-family/c-pretty-print.h (pp_c_flag_gnu_v3): New enum constant.
	* cp/error.c (dump_decl): Add support for gnu_v3 style.
	(decl_as_string): Likewise.
	(lang_decl_name): Likewise.
	* cp/cp-lang.c (cxx_dwarf_name): Likewise.
	* cp/cp-tree.h (enum overload_flags): Add TFF_MATCH_GNU_V3_DEMANGLER.

	* dwarf2out.c (dwarf_stack_op_name): Add DW_OP_GNU_const_index.
	(size_of_loc_descr): Likewise.
	(output_loc_operands): Likewise.
	(output_loc_operands_raw): Likewise.
	(dw_addr_op): New function.
	(new_addr_loc_descr): Call dw_addr_op.
	(want_pubnames): New function.
	(add_AT_pubnames): Add DW_AT_GNU_pubnames/pubtypes only if
	generating .debug_pubnames/pubtypes sections.
	(add_pubname_string): Check for -gpubnames option.
	(add_pubname): Likewise.
	(add_pubtype): Likewise.
	(output_pubnames): Likewise.
	(mem_loc_descriptor): Call new_addr_loc_desc for TLS vars.
	(loc_list_from_tree): Likewise.
	(gen_subprogram_die): Output pubnames for all inlined functions.
	(output_addr_table): Handle DW_OP_GNU_const_index.  Add missing
	newline.
	(hash_loc_operands): Add DW_OP_GNU_const_index.
	(compare_loc_operands): Likewise.

	* testsuite/g++.old-deja/g++.pt/memtemp77.C: Revert earlier change
	to expected results.
	* testsuite/g++.dg/ext/pretty3.C: Likewise.
	* testsuite/g++.dg/warn/Wuninitializable-member.C: Likewise.
	* testsuite/g++.dg/warn/pr35711.C: Likewise.
	* testsuite/g++.dg/pr44486.C: Likewise.

2012-05-24   Rong Xu  <xur@google.com>

	Backport from google/gcc-4_7 r187856.
	Google ref b/5733865.

	2012-05-24   Rong Xu  <xur@google.com>

	  * l-ipo.c (create_unique_name): Make temp names demanglable.

2012-05-18   Jing Yu  <jingyu@google.com>

	Backport from trunk r187586:
	2012-05-16  Igor Zamyatin  <igor.zamyatin@intel.com>

	* configure.ac: Stack protector enabling for Android targets.
	* configure: Regenerate.

2012-05-18   Teresa Johnson  <tejohnson@google.com>

	Backport from google/main r187660:
	2012-05-18   Teresa Johnson  <tejohnson@google.com>

	* doc/invoke.texi: Update the documentation with new params.
	* loop-unroll.c (loop_has_FP_comp): Remove function.
	(max_unroll_with_branches): New function.
	(decide_unroll_constant_iterations, decide_unroll_runtime_iterations):
        Add heuristic to avoid increasing branch mispredicts when unrolling.
	(limit_code_size, decide_peel_simple, decide_unroll_stupid): Retrieve
        number of branches from niter_desc instead of via function that walks
        loop.
	* loop-iv.c (get_simple_loop_desc): Invoke new analyze_loop_insns
        function, and add guards to enable this function to work for the
        outermost loop.
	* cfgloop.c (insn_has_fp_set, analyze_loop_insns): New functions.
        (num_loop_branches): Remove.
	* cfgloop.h (struct niter_desc): Added new fields to cache additional
        loop analysis information.
        (num_loop_branches): Remove.
	(analyze_loop_insns): Declare.
	* params.def (PARAM_MIN_ITER_UNROLL_WITH_BRANCHES): New param.
        (PARAM_UNROLL_OUTER_LOOP_BRANCH_BUDGET): Ditto.

2012-05-15   Teresa Johnson  <tejohnson@google.com>

	Backport from google/main r187536:
	2012-05-15   Teresa Johnson  <tejohnson@google.com>

	* libgcov.c (__gcov_sampling_period): Rename variable from "*rate*"
	to "*period*".
	(gcov_sampling_period_initialized): Ditto.
	(__gcov_set_sampling_period): Rename from __gcov_set_sampling_rate.
	Check __gcov_has_sampling.
	(__gcov_has_sampling): New variable.
	(__gcov_sampling_enabled): New function.
	(__gcov_init): Rename variables from "*rate*" to "*period*".
	* doc/invoke.texi (profile-generate-sampling-period): Rename
	from profile-generate-sampling-rate.
	* tree-profile.c (gcov_sampling_period_decl): Rename from
	gcov_sampling_rate_decl.
	(gcov_has_sampling_decl): New variable.
	(insert_if_then, add_sampling_wrapper): Rename variables from "*rate*"
	to "*period*".
	(gimple_init_instrumentation_sampling): Ditto, and add handling
	for gcov_has_sampling_decl.
	* params.def (profile-generate-sampling-period): Rename
	from profile-generate-sampling-rate.

2012-05-11  Han Shen  <shenhan@google.com>

	Backport from mainline.
	2012-05-01  Richard Earnshaw  <rearnsha@arm.com>

	* arm/linux-eabi.h (GLIBC_DYNAMIC_LINKER_DEFAULT): Avoid ifdef
	comparing enumeration values.  Update comments.

	2012-04-26  Michael Hope  <michael.hope@linaro.org>
		    Richard Earnshaw  <rearnsha@arm.com>

	* config/arm/linux-eabi.h (GLIBC_DYNAMIC_LINKER_SOFT_FLOAT): Define.
	(GLIBC_DYNAMIC_LINKER_HARD_FLOAT): Define.
	(GLIBC_DYNAMIC_LINKER_DEFAULT): Define.
	(GLIBC_DYNAMIC_LINKER):	Redefine to use the hard float path.

2012-05-09  Teresa Johnson  <tejohnson@google.com>

	Backport from trunk r187297:
	2012-05-08   Teresa Johnson  <tejohnson@google.com>

	* libgcov.c (gcov_clear, __gcov_reset): New functions.
	(__gcov_dump): Ditto.
	(gcov_dump_complete): New global variable.
	(gcov_exit): Export hidden to enable use in L_gcov_dump.
	(__gcov_flush): Outline functionality now in gcov_clear.
	* Makefile.in (L_gcov_reset, L_gcov_dump): Define.
	* gcov-io.h (__gcov_reset, __gcov_dump): Declare.
	* doc/gcov.texi: Add note on using __gcov_reset and __gcov_dump.

2012-05-08   Sterling Augustine  <saugustine@google.com>
	     Cary Coutant  <ccoutant@google.com>

	* gcc/dwarf2out.c (debug_ref_section): Remove.
	(struct dw_loc_list_struct): Add begin_index, end_index fields.
	(DEBUG_REF_SECTION): Remove.
	(DEBUG_NORM_MACINFO_SECTION, DEBUG_DWO_MACINFO_SECTION): New macros.
	(DEBUG_MACINFO_SECTION): Define condtionally on
	dwarf_split_debug_info.
	(DEBUG_DWO_LOC_SECTION): New macro.
	(DEBUG_REF_SECTION_LABEL): Remove.
	debug_ref_section_label: Remove.
	(dwarf_attr_name): Replace DW_AT_GNU_ref_base with
	DW_AT_GNU_ranges_base.
	(dwarf_form_name): Remove DW_FORM_GNU_ref_index.
	(AT_index): Adjust comment.
	(addr_index_table): Adjust comment.
	(ref_index_table): Remove.
	(add_ref_table_entry): Remove.
	(add_AT_range_list): Save offset for direct references.
	(size_of_die): Always use offset size for range list references.
	(value_format): Use section offset for range list and location list
	references.
	(new_loc_list): Initialize begin_index and end_index.
	(output_loc_list): Handle special format for .debug_loc.dwo sections.
	(output_range_list_offset): Output plain offset for range list
	reference when splitting dwarf info.
	(output_loc_list_offset): Output plain offset for location list
	reference when splitting dwarf info.
	(output_attr_index_or_value): Remove case dw_val_class_range_list.
	(output_die): Call output_range_list_offset for range list references.
	(add_top_level_skeleton_die_attrs): Remove DW_AT_GNU_ref_base.
	(add_enumerator_pubname): Remove SEP parameter; add correct pubtype
	entry for anonymous enums.
	(add_pubtype): Add correct pubtype entry for anonymous enums.
	(gen_enumeration_type_die): Likewise.
	(dwarf2out_init): Create .debug_loc.dwo section; remove
	debug_ref_section.
	(output_ref_table): Remove.
	(index_location_lists): Set begin_index and end_index for each item
	in a location list.
	(dwarf2out_finish): Add DW_AT_macro_info to the compile_unit DIE
	instead of the skeleton.  Don't call index_location_lists when not
	splitting dwarf info.  Add DW_AT_GNU_ranges_base attribute to
	compile_unit DIE.  Move generation of loc_section_label to
	dwarf2out_init.  Remove .debug_ref section.

2012-05-08   Rong Xu  <xur@google.com>

	* ipa-inline.c (fixed_arg_function_p):
	(better_inline_comdat_function_p): match lipo_gen in stream LIPO.

2012-05-07  Jing Yu  <jingyu@google.com>
	
	Backport r186560 and r185958 from gcc trunk
	2012-05-03  Enkovich Ilya  <ilya.enkovich@intel.com>

	 * config/linux-android.h (ANDROID_STARTFILE_SPEC): Fix
	shared case.
	(ANDROID_ENDFILE_SPEC): Likewise.
	* config/i386/linux.h (TARGET_OS_CPP_BUILTINS): Add Android
	builtins.
	(LINUX_TARGET_CC1_SPEC): New.
	(CC1_SPEC): Support Android.
	(LINUX_TARGET_LINK_SPEC): New.
	(LINK_SPEC): Support Android.
	(LIB_SPEC): New.
	(STARTFILE_SPEC): New.
	(LINUX_TARGET_ENDFILE_SPEC): New.
	(ENDFILE_SPEC): Support Android.
	* config/i386/linux64.h: Likewise.

2012-05-03  Dehao Chen  <dehao@google.com>

	* predict.c (predict_iv_comparison): Add the comparison of induction
	variable against its initial value. (Reenable r185948)

2012-05-02   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 187010.

2012-05-01   Rong Xu  <xur@google.com>

	Backport r187028 from google-main.

	2012-05-01   Rong Xu  <xur@google.com>

		* gcc/cp/rtti.c (get_tinfo_decl): generate tinfo for aux 
		modules in LIPO.

2012-02-21   Ahmad Sharif  <asharif@google.com>

	Backport from mainline r185231.
	2012-03-12  Richard Guenther  <rguenther@suse.de>

	* gthr.h (__GTHREAD_MUTEX_INIT_FUNCTION): Adjust specification.
	* gthr-posix.h (__GTHREAD_MUTEX_INIT_FUNCTION): Define.
	(__gthread_mutex_init_function): New function.
	* gthr-single.h (__GTHREAD_MUTEX_INIT_FUNCTION): Define.

	PR gcov/49484
	* libgcov.c: Include gthr.h.
	(__gcov_flush_mx): New global variable.
	(init_mx, init_mx_once): New functions.
	(__gcov_flush): Protect self with a mutex.
	(__gcov_fork): Re-initialize mutex after forking.
	* unwind-dw2-fde.c: Change condition under which to use
	__GTHREAD_MUTEX_INIT_FUNCTION.

2012-04-25   Rong Xu  <xur@google.com>

	* gcc/gcc.c (ripa_lto_spec): Support -S in streaming LIPO.
	(cc1_options): Ditto.

2012-04-25   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 186419.

2012-04-20   Sterling Augustine  <saugustine@google.com>

	* gcc/dwarf2out.c (output_skeleton_debug_sections): Fix off-by-one
	error.

2012-04-20   Rong Xu  <xur@google.com>

	* gcc/ipa.c (cgraph_externally_visible_p): Not localize hidden symbols
	in streaming LIPO.
	(varpool_externally_visible_p): Ditto.

2012-04-17  Teresa Johnson  <tejohnson@google.com>

	Backport from google/main rev r186550

	2012-04-17   Teresa Johnson  <tejohnson@google.com>

	Google ref b/5910724.
	* libgcc/libgcov.c (gcov_cur_module_id): Guard definition under
	#ifndef __GCOV_KERNEL__.

2012-04-11  Teresa Johnson  <tejohnson@google.com>

	Revert r182255 since it is subsumed by r186333.

2012-04-11   Teresa Johnson  <tejohnson@google.com>

	Backport r186176 from trunk.

	2012-04-05  Teresa Johnson  <tejohnson@google.com>
		    H.J. Lu  <hongjiu.lu@intel.com>

	* config/i386/i386.h (ix86_tune_indices): Add
	X86_TUNE_LCP_STALL.
	* config/i386/i386.md (move immediate to memory peephole2):
	Add cases for HImode move when LCP stall avoidance is needed.
	* config/i386/i386.c (initial_ix86_tune_features): Initialize
	X86_TUNE_LCP_STALL entry.

2012-04-04   Ahmad Sharif  <asharif@google.com>

	Backport from mainline r179661, r179662.

	2011-10-07  Andrew Stubbs  <ams@codesourcery.com>

	gcc/
	* config/arm/predicates.md (shift_amount_operand): Remove constant
	range check.
	(shift_operator): Check range of constants for all shift operators.

	gcc/testsuite/
	* gcc.dg/pr50193-1.c: New file.
	* gcc.target/arm/shiftable.c: New file.

2012-04-04  Dehao Chen  <dehao@google.com>
	* predict.c (predict_iv_comparison): Revert r185948, which causes
	regression to major applications.

2012-03-29  Dehao Chen  <dehao@google.com>

	* predict.c (predict_iv_comparison): Add the comparison of induction
	variable against its initial value.

2012-03-23   Cary Coutant  <ccoutant@google.com>

	* dwarf2out.c (resolve_addr): Remove address table entry for symbol
	when removing location list entry.

2012-03-21  Sriraman Tallam  <tmsriram@google.com>

	* params.def (PARAM_MAX_FUNCTION_SIZE_FOR_AUTO_CLONING): Bump
	default value to 5000.

2012-03-21  Sriraman Tallam  <tmsriram@google.com>

	* gcc/common.opt (fcallgraph-profiles-sections): Restore deleted
	option fcallgraph-profiles-sections.
	* gcc/final.c (rest_of_handle_final): Restore
	check for option fcallgraph-profiles-sections.
	* gcc/cgraphbuild.c (cgraph_callee_edges_final_cleanup): Restore
	check for option fcallgraph-profiles-sections.
	* testsuite/lib/target-supports-dg.exp
	(dg-require-linker-function-reordering-plugin): New proc.
	* testsuite/lib/target-supports.exp
	(check_linker_function_reordering_plugin_supported): New proc.
	* testsuite/g++.dg/tree-prof/callgraph-profiles.C: Check if
	linker supports plugins. Check if the final binary has the
	functions ordered as expected.

2012-03-21   Harshit Chopra  <harshit@google.com>
	Backport from google/main r183548, r183888.

	2012-01-25   Harshit Chopra  <harshit@google.com>

	Introduce a new option -mpatch-functions-for-instrumentation to
	generate Nops at function prologue and epilogue for dynamic
	instrumentation.
	* gcc/config/i386/i386-protos.h: Added function and macro definitions
	for function patch sections used globally.
	* gcc/config/i386/i386.c (check_should_patch_current_function): Check
	if the current function should be patched with Nops.
	(ix86_output_function_prologue): Output Nops for function prologue.
	(ix86_output_function_nops_prologue_epilogue): Helper function which
	outputs Nops for function prologue and epilogue.
	(ix86_elf_asm_named_section): Generate the name of the function patch
	section.
	(ix86_output_call_insn): Generate nops for sibling calls.
	* gcc/config/i386/i386.md: Generate nops for returns.
	* gcc/config/i386/i386.opt: Commandline options to control nops
	generation for function patching.
	* gcc/params.def (DEFPARAM): Define parameter to control generation
	of nops based on number of instructions in a function
	* gcc/testsuite/gcc.target/i386/patch-functions-1.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-2.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-3.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-4.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-5.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-6.c: New testcase
	* gcc/testsuite/gcc.target/i386/patch-functions-7.c: New testcase

	2012-02-03   Harshit Chopra  <harshit@google.com>
  
	Restricting the tests to run for 64-bit target since function patching
	is only supported for 64-bit targets.
	
	* gcc.target/i386/patch-functions-1.c: Restrict to 64-bit targets.
	* gcc.target/i386/patch-functions-2.c: Likewise
	* gcc.target/i386/patch-functions-3.c: Likewise
	* gcc.target/i386/patch-functions-4.c: Likewise
	* gcc.target/i386/patch-functions-5.c: Likewise
	* gcc.target/i386/patch-functions-6.c: Likewise
	* gcc.target/i386/patch-functions-7.c: Likewise

2012-03-20   Cary Coutant  <ccoutant@google.com>

	* dwarf2out.c (size_of_loc_descr): Use val_index instead of
	v.val_unsigned.
	(output_loc_operands): Likewise.

2012-03-19  Sterling Augustine  <saugustine@google.com>
	    Cary Coutant  <ccoutant@google.com>

	* dwarf2out.c (dwarf_stack_op_name): Add DW_OP_GNU_addr_index.
	(new_loc_descr): Initialize val_index.
	(size_of_loc_descr): Add DW_OP_GNU_addr_index.
	(output_loc_operands): Likewise.
	(output_loc_operands_raw): Likewise.
	(build_cfa_loc): Initialize val_index.
	(new_addr_loc_descr): New function.
	(add_AT_flag): Initialize val_index.
	(add_AT_int): Likewise.
	(add_AT_unsigned): Likewise.
	(add_AT_double): Likewise.
	(add_AT_vec): Likewise.
	(add_AT_data8): Likewise.
	(add_AT_string): Likewise.
	(add_AT_die_ref): Likewise.
	(add_AT_fde_ref): Likewise.
	(add_AT_loc): Likewise.
	(add_AT_loc_list): Likewise.
	(add_addr_table_entry): Change if to assert.
	(remove_addr_table_entry): New function.
	(add_AT_addr): Add force_direct parameter; adjust all callers.
	Initialize val_index.
	(add_AT_file): Initialize val_index.
	(add_AT_vms_delta): Likewise.
	(add_AT_lbl_id): Add force_direct parameter; adjust all callers.
	Initialize val_index.
	(add_AT_lineptr): Initialize val_index.
	(add_AT_macptr): Likewise.
	(add_AT_offset): Likewise.
	(add_AT_range_list): Add force_direct parameter; adjust all callers.
	Initialize val_index.
	(size_of_die): Check for AT_index.
	(value_format): Likewise.
	(output_attr_index_or_value): Likewise.
	(output_die): Fix format warning.
	(add_top_level_skeleton_die_attrs): Don't add DW_AT_stmt_list here.
	(get_skeleton_type_unit): New function.
	(output_skeleton_debug_sections): Add comp_unit parameter; adjust
	caller; don't generate debug_skeleton_info_section_label or
	debug_skeleton_abbrev_section_label here; call get_skeleton_type_unit.
	(output_comdat_type_unit): Remove assert; call get_skeleton_type_unit.
	(add_ranges_by_labels): Add force_direct parameter; adjust callers.
	(address_of_int_loc_descriptor): Initialize val_index.
	(mem_loc_descriptor): Initialize val_index; call new_addr_loc_descr.
	(implicit_ptr_descriptor): Don't generate DW_OP_GNU_implicit_pointer
	when splitting debug info.  Initialize val_index.
	(loc_descriptor): Initialize val_index; call new_addr_loc_descr.
	(loc_list_from_tree): Likewise.
	(add_const_value_attribute): Likewise.
	(dwarf2out_init): Generate debug_skeleton_info_section_label and
	debug_skeleton_abbrev_section_label here.
	(output_indirect_string): Check for DW_FORM_strp instead of label
	and refcount.
	(output_addr_table): Check for removed entries, handle
	dw_val_class_loc.
	(resolve_addr_in_expr): Handle DW_OP_GNU_addr_index.
	(resolve_addr): Remove entry from addr_table if necessary.
	(hash_loc_operands): Add DW_OP_GNU_addr_index.
	(compare_loc_operands): Likewise.
	(dwarf2out_finish): Put DW_AT_low_pc, DW_AT_high_pc, DW_AT_ranges,
	DW_AT_stmt_list, DW_AT_macptr in skeleton comp_unit DIE; write
	skeleton debug sections if regular debug section emitted.

2012-03-18  Sriraman Tallam  <tmsriram@google.com>

	* cgraphbuild.c (remove_cgraph_callee_edges): Replace
	flag_callgraph_profiles_sections with flag_reorder_functions.
	* final.c (rest_of_handle_final): Ditto.
	* configure: Regenerate.
	* config.in: undef FRPLUGINSONAME.
	* congifure.ac: Define FRPLUGINSONAME.
	* config.host: Set host_function_reordering_plugin_soname.
	* gcc.c: Invoke function_reordering linker plugin with
	-freorder-functions=* option.
	(set_func_reorder_linker_plugin_spec): New function.
	(main): Call set_func_reorder_linker_plugin_spec when
	-freorder-functions=* option is seen.
	* common.opt (fcallgraph-profiles-sections):  Remove.
	(freorder-functions=): New option.
	* testsuite/g++.dg/tree-prof/callgraph-profiles.C: Replace
	-fcallgraph-profiles-sections with -freorder-functions=callgraph.
	* opts.c (finish_options): Turn on -ffunction-sections when
	-freorder-functions= is used.
	* doc/invoke.texi (freorder-functions=): Document option
	-freorder-functions=.

2012-03-18   Rong Xu  <xur@google.com>

        This patch implements LIPO profile-use compilation that
        leverages LTO's IR streaming support. It supports C/C++
        and Fortran. It is currently disabled by default and can
        be turned on by -fripa=streaming option.

	* doc/invoke.texi: Document new flags.
        * lto-symtab.c (Entry_BB_profile_count): New function.
        (coverage.h): New include.
        (lto_symtab_register_decl): Support for streamed lipo.
        (lto_symtab_resolve_symbols): Ditto.
        (lto_symtab_merge_decls_1): Ditto.
        * cgraph.c (cgraph_can_remove_if_no_direct_calls_and_refs_p): Ditto.
        * gcc.c (RIPA_AUX_MOD_SPEC): New Define for streaming LIPO.
        (ripa_aux_mod_spec): Ditto.
        (ripa_lto_spec): Ditto.
        (ripa_asm_options): Ditto.
        (ripa_invoke_as): Ditto.
        (ripa_pri_mod_invoke_as) Ditto.:
        (processing_spec_function_ripa_aux_mode): Ditto.
        (ripa_ir_files): Ditto.
        (primary_module_id): Ditto.
        (ripa_gen_lto_cmd_func): Ditto.
        (ripa_build_aux_mod_func): Ditto.
        (spec_list static_specs): Support for streaming LIPO.
        (static_spec_functions): Ditto.
        (execute): Ditto.
        (create_at_file): Ditto.
        (give_switch): Ditto.
        (ripa_dump_cmd_line): New function.
        * toplev.c (l-ipo.h): New include.
        (lto_done_symtab_merge): New Define for streaming LIPO.
        (primary_module_exported): Ditto.
        (compile_file): Support for streaming LIPO.
        (do_compile): Ditto.
        (toplev_main): Ditto.
        * cgraphunit.c: (cgraph_expand_function): Ditto.
        (ipa_passes): Ditto.
        (cgraph_optimize): Ditto.
        * cp/lang-specs.h: Ditto.
        * fortran/lang-specs.h: Ditto.
        * lto-cgraph.c (lto_output_node): Ditto.
        (lto_output_varpool_node): Ditto.
        (input_node): Ditto.
        (input_varpool_node): Ditto.
        * lto-streamer-out.c (l-ipo.h): New include.
        (lto_write_ripa_info): New function.
        (output_function): Support for streaming LIPO.
        (produce_asm_for_decls): Ditto.
        * opts.c: (common_handle_option): Ditto.
        * lto-streamer-in.c (input_function): Ditto.
        (lto_register_var_decl_in_symtab): Ditto.
        (lto_read_tree): Ditto.
        (check_and_set_ripa_module_info): New function.
        (input_ripa_info): Ditto.
        * lto-section-in.c (lto_section_name): Support for streaming LIPO.
        * lto/lto.c (read_cgraph_and_symbols): Ditto.
        * lto-streamer.c (lto_get_section_name): Ditto.
        * lto-streamer.h (lto_section_type): Ditto.
        (lto_file_decl_data): Ditto.
        (l-ipo.h): New include.
        * ipa.c (cgraph_can_have_cross_module_ref_in_lipo_p): New function.
        (varpool_can_have_cross_module_ref_in_lipo_p): Ditto.
        (cgraph_externally_visible_p): Support for streaming LIPO.
        (varpool_externally_visible_p): Ditto.
        * coverage.c (get_da_file_name): Ditto.
        (read_counts_file): Ditto.
        (coverage_init): Ditto.
        (create_mgf_file): New function.
        (write_mgf_file): Ditto.
        * tree-sra.c (ipa_early_sra_gate): Support for streaming LIPO.
        (modify_function): Ditto.
        * value-prof.c (gimple_value_profile_transformations): Ditto.
        (init_node_map): Ditto.
        (del_node_map): Ditto.
        (cgraph_init_gid_map): Ditto.
        (gimple_indirect_call_to_profile): Ditto.
        * l-ipo.c (cgraph_is_aux_decl_external): Ditto.
        (promote_static_var_func)): Ditto.
        (process_module_scope_static_var): Ditto.
        (cgraph_process_module_scope_statics): Ditto.
        (tree-pretty-print.h): New include.
        * l-ipo.h (L_IPO_COMP_MODE): Support for streaming LIPO.
        (primary_module_exported): New Decls.
        (L_IPO_STREAM_COMP_MODE): New macro.
        (L_IPO_STREAM_FE_COMP_MODE_AUX): New macro.
        (L_IPO_STREAM_FE_COMP_MODE_PRIM): New macro.
        (L_IPO_STREAM_FE_COMP_MODE): New macro.
        (L_IPO_STREAM_IN_LTO_P): New macro.
        * common.opt: New flags.

2012-03-12  Sterling Augustine  <saugustine@google.com>
	    Cary Coutant  <ccoutant@google.com>

	* gcc.c (ASM_FINAL_SPEC): For -gfission, call objcopy.
	(static_spec_functions): Add replace-extension.
	(replace_extension_spec_func): New function.
	* dwarf2out.c (debug_skeleton_info_section)
	(debug_skeleton_abbrev_section, debug_ref_section, debug_addr_section)
	(debug_skeleton_line_section, debug_str_offsets_section): New
	variables.
	(struct indirect_string_node): Add index field.
	(DEBUG_DWO_INFO_SECTION, DEBUG_DWO_ABBREV_SECTION, DEBUG_REF_SECTION)
	(DEBUG_ADDR_SECTION, DEBUG_DWO_LINE_SECTION)
	(DEBUG_NORM_STR_OFFSETS_SECTION, DEBUG_DWO_STR_OFFSETS_SECTION)
	(DEBUG_STR_OFFSETS_SECTION, DEBUG_DWO_STR_SECTION)
	(DEBUG_NORM_STR_SECTION): New debug section macros.
	(DEBUG_STR_SECTION): Change definition for -gfission.
	(DEBUG_STR_SECTION_FLAGS): Don't set SECTION_MERGE for -gfission.
	(DEBUG_SKELETON_LINE_SECTION_LABEL, DEBUG_SKELETON_INFO_SECTION_LABEL)
	(DEBUG_SKELETON_ABBREV_SECTION_LABEL, DEBUG_REF_SECTION_LABEL)
	(DEBUG_ADDR_SECTION_LABEL): New section label macros.
	(SKELETON_COMP_DIE_ABBREV, SKELETON_TYPE_DIE_ABBREV): New macros.
	(debug_skeleton_info_section_label, debug_skeleton_abbrev_section_label)
	(debug_ref_section_label, debug_addr_section_label)
	(debug_skeleton_line_section_label): New section label variables.
	(dwarf_attr_name): Add new attribute names.
	(dwarf_form_name): Add new form names.
	(AT_index): New function.
	(set_AT_index): New function.
	(index_string_table): New variable.
	(AT_string_form): Use DW_FORM_GNU_str_index for -gfission.
	(add_addr_table_entry): New function.
	(add_AT_addr): Record index for indirect references with -gfission.
	(add_AT_lbl_id): Likewise.
	(add_ref_table_entry): New function.
	(add_AT_range_list): Use indirect reference for -gfission.
	(break_out_comdat_types): Don't add DW_AT_GNU_pubnames/pubtypes
	attributes here.
	(size_of_die): Account for indirect forms with -gfission.
	(value_format): Use indirect forms for -gfission.
	(output_die_abbrevs): New function.
	(output_abbrev_section): Refactor code into output_die_abbrevs.
	(output_range_list_offset): New function.
	(output_loc_list_offset): New function.
	(output_attr_index_or_value): New function.
	(output_die): Call output_attr_index_or_value to output possibly
	indirect forms.  Output indirect strings for -gfission.
	(add_AT_pubnames): New function.
	(add_top_level_skeleton_die_attrs): New function.
	(skeleton_type_unit): New variable.
	(output_skeleton_debug_sections): New function.
	(output_comdat_type_unit): Write to .debug_types.dwo for -gfission.
	(output_pubnames): Add assembly label to beginning of section; use
	label for skeleton info section with -gfission.
	(output_aranges): Use label for skeleton info section with -gfission.
	(output_line_info ): Add prologue_only parameter.
	(dwarf2out_init): Create new sections for -gfission.
	(output_index_strings): New function.
	(output_ref_table): New function.
	(output_addr_table): New function.
	(index_location_lists): New function.
	(dwarf2out_finish): For -gfission, write skeleton debug sections,
	write pubnames tables unconditionally, and write indirect sections.
	* opts.c (common_handle_option): Add OPT_gfission.
	* common.opt: Add -gfission option.

2012-03-09   Rong Xu  <xur@google.com>

	Backport from rev 185150.

	2012-03-09   Rong Xu  <xur@google.com>

		* opts-global.c (lipo_save_cl_args): save -std option.
		Google ref b/6117980.

2012-03-08   Rong Xu  <xur@google.com>

	* gcc/tree-inline.c (copy_cfg_body): fix the bug in r184378.
	  Google ref b/6105259.

2012-03-01   Jing Yu  <jingyu@google.com>

	Revert r184493 (init/fini backport patch set) because of
	intermittent unit test failure.

2012-02-21   Jing Yu  <jingyu@google.com>

	Google Ref 47894
	Backport from mainline r177933, r175181, r177963, r178116, r183299.

	2011-08-20  H.J. Lu  <hongjiu.lu@intel.com>
	PR other/46770
	* config.gcc (tm_file): Add initfini-array.h if
	.init_arrary/.fini_array are supported.
	* crtstuff.c: Don't generate .ctors nor .dtors sections if
	USE_INITFINI_ARRAY is defined.
	* output.h (default_elf_init_array_asm_out_constructor): New.
	(default_elf_fini_array_asm_out_destructor): Likewise.
	* varasm.c (elf_init_array_section): Likewise.
	(elf_fini_array_section): Likewise.
	(get_elf_initfini_array_priority_section): Likewise.
	(default_elf_init_array_asm_out_constructor): Likewise.
	(default_elf_fini_array_asm_out_destructor): Likewise.
	* config/initfini-array.h: New.

	2011-06-18  H.J. Lu  <hongjiu.lu@intel.com>
	PR other/49325
	* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Properly check if
	.init_array can be used with .ctors on targets.
	* configure: Regenerated.

	2011-08-22  H.J. Lu  <hongjiu.lu@intel.com>
	* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Error if __ELF__ isn't
	defined.
	* configure: Regenerated.

	2011-08-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
	PR target/50166
	* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Check count in main.
	* configure: Regenerate.

	2012-01-19  Jakub Jelinek  <jakub@redhat.com>
	PR bootstrap/50237
	* config/initfini-array.h: Guard content of the header
	with #ifdef HAVE_INITFINI_ARRAY.
	* configure.ac: Move gcc_AC_INITFINI_ARRAY much later into the
	file.
	Add initfini-array.h to tm_file here.
	* acinclude.m4 (gcc_AC_INITFINI_ARRAY): For non-ia64 do a
	linker test.
	* config.gcc: Don't add initfini-array.h to tm_file here.
	* configure: Regenerated.

2012-02-21   Jing Yu  <jingyu@google.com>

	Revert r184369 and r184386
	* config.gcc (tm_file): Remove initfini-array.h
	* crtstuff.c: Restore generation of .ctors and .dtors
	* output.h (default_elf_init_array_asm_out_constructor): Delete
	(default_elf_fini_array_asm_out_destructor): Likewise.
	* varasm.c (elf_init_array_section): Likewise.
	(elf_fini_array_section): Likewise.
	(get_elf_initfini_array_priority_section): Likewise.
	(default_elf_init_array_asm_out_constructor): Likewise.
	(default_elf_fini_array_asm_out_destructor): Likewise.
	* config/initfini-array.h: Delete

2012-02-20   Rong Xu  <xur@google.com>

	* tree-inline.c (copy_cfg_body): fix unused variable warning.
	* testsuite/gcc.dg/tree-prof/scaling_overflow.c: New test.

2012-02-19  Ollie Wild  <aaw@google.com>

	* initfini-array.h: Moved to config/initfini-array.h.
	* config/initfini-array.h: New.

2012-02-18   Rong Xu  <xur@google.com>

	* gcc/tree-inline.c (copy_cfg_body): (1) Avoiding overflow when
        converting double to long long. (2) only including the count
        for those basic blocks that will be copied.

2012-02-17   Jing Yu  <jingyu@google.com>

	Google Ref 47894
	2011-12-07  H.J. Lu  <hongjiu.lu@intel.com>
	Backport from mainline r177933.
	2011-08-20  H.J. Lu  <hongjiu.lu@intel.com>

	PR other/46770
	* config.gcc (tm_file): Add initfini-array.h if
	.init_arrary/.fini_array are supported.
	* crtstuff.c: Don't generate .ctors nor .dtors sections if
	USE_INITFINI_ARRAY is defined.
	* output.h (default_elf_init_array_asm_out_constructor): New.
	(default_elf_fini_array_asm_out_destructor): Likewise.
	* varasm.c (elf_init_array_section): Likewise.
	(elf_fini_array_section): Likewise.
	(get_elf_initfini_array_priority_section): Likewise.
	(default_elf_init_array_asm_out_constructor): Likewise.
	(default_elf_fini_array_asm_out_destructor): Likewise.
	* config/initfini-array.h: New.

2012-02-14  Jing Yu  <jingyu@google.com>

	Google ref 42402-p2
	* config/arm/arm.h: Emit GNU-stack note for all arm targets by
	default.

2012-02-13   Xinliang David Li  <davidxl@google.com>

	* Backport r184175 from google/main: Implement
	new option fripa-inc-path-sub=

2012-02-13   Xinliang David Li  <davidxl@google.com>

	* tree-optimize.c (execute_fixup_cfg): Using double type in
	scaling to avoid count overflow during out-of-line copy
	fixup.

2012-02-02   Rong Xu  <xur@google.com>

	* tree-inline.c (copy_cfg_body): Curb the scaling factor to
        avoid counter overflow.

2012-02-02  Dmitry Vyukov  <dvyukov@google.com>

	Backport ThreadSanitizer (tsan) instrumentation pass from google/main.

        * tree-tsan.c: New file.
        * tree-tsan.h: New file.
        * tree-pass.h: Add tsan pass.
        * passes.c: Add tsan pass.
        * toplev.c (compile_file): Call tsan_finish_file.
        * common.opt: Add -ftsan, -ftsan-ignore flags.
        * doc/invoke.texi: Document the new flags.
        * Makefile.in: Add tree-tsan.c.
        * testsuite/gcc.dg/tsan.h: New file.
        * testsuite/gcc.dg/tsan-mop.c: New file.
        * testsuite/gcc.dg/tsan-stack.c: New file.
        * testsuite/gcc.dg/tsan-ignore.c: New file.
        * testsuite/gcc.dg/tsan-ignore.h: New file.
        * testsuite/gcc.dg/tsan-ignore.ignore: New file.

2012-02-01  Easwaran Raman  <eraman@google.com>

	* expr.c (do_tablejump): Add default_probability as the
	sixth parameter and use it to generate REG_BR_PROB note.
	(try_tablejump): Add default_probability as a parameter.
	* cfgbuild.c (non_zero_profile_counts): New function.
	(compute_outgoing_frequencies): If edges have profile counts
	set, don't replace them with guessed values.
	* expr.h (try_tablejump): Add additional parameter to the
	declaration.
	* stmt.c (tree-flow.h): Include.
	(case_node): Add new fields count and subtree_count.
	(add_case_node): Pass count as a paramater and initialize
	count field of case_node.
	(case_probability): New macro.
	(expand_case): Propagate profile information from the tree
	level to RTL during switch case expansion.
	(balance_case_nodes): Compute subtree_count for case nodes.
	(emit_case_nodes): Set branch probabilities for generated
	branches.

2012-02-01  Dehao Chen  <dehao@google.com>

	* predict.c (predict_iv_comparison): Add new parameter, ensure that
	the loop_iv_base and compare_base are identical.

2012-01-31  Dehao Chen  <dehao@google.com>

	* predict.c (strips_small_constant): New
	(get_base_value): New
	(find_ssa_name_in_assign_stmt): New
	(is_comparison_with_loop_invariant_p): New
	(expr_coherent_p): New
	(predict_iv_comparison): New
	(predict_loops): Add heuristic for loop-nested branches that compare an
	induction variable to a loop bound variable.
	* predict.def (PRED_LOOP_IV_COMPARE): New macro

2012-01-23   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 182961.

2012-01-20   Sterling Augustine  <saugustine@google.com>
	Backport from google/main

	* gcc/dwarf2out.c (break_out_comdat_types): Call add_AT_lineptr with
	DW_AT_GNU_pubnames and DW_AT_GNU_pubtypes.

2012-01-12   Rong Xu  <xur@google.com>
	Backport r183142 from google/main

	* gcc/profile.c (compute_value_histograms): ignore the
	histrogram when the counters not found in gcda file.

2012-01-11  Sriraman Tallam  <tmsriram@google.com>

	Add new target builtins: __builtin_cpu_is_amdfam15h_bdver1 and
	__builtin_cpu_is_amdfam15h_bdver2, to check for AMD Family 15h
	(0x15) processors, version 1 and 2 respectively.

	* i386.c (IX86_BUILTIN_CPU_IS_AMDFAM15H_BDVER1): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM15H_BDVER2): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10H): Rename IX86_BUILTIN_CPU_IS_AMDFAM10.
	(IX86_BUILTIN_CPU_IS_AMDFAM10H_BARCELONA): Rename IX86_BUILTIN_CPU_IS_AMDFAM10_BARCELONA.
	(IX86_BUILTIN_CPU_IS_AMDFAM10H_SHANGHAI): Rename IX86_BUILTIN_CPU_IS_AMDFAM10_SHANGHAI.
	(IX86_BUILTIN_CPU_IS_AMDFAM10H_ISTANBUL): Rename IX86_BUILTIN_CPU_IS_AMDFAM10_ISTANBUL.
	(fold_builtin_cpu): Process IX86_BUILTIN_CPU_IS_AMDFAM15H_BDVER1
	and IX86_BUILTIN_CPU_IS_AMDFAM15H_BDVER2.
	(M_AMDFAM10H): Rename M_AMDFAM10.
	(M_AMDFAM10H_BARCELONA): Rename M_AMDFAM10_BARCELONA.
	(M_AMDFAM10H_SHANGHAI): Rename M_AMDFAM10_SHANGHAI.
	(M_AMDFAM10H_ISTANBUL): Rename M_AMDFAM10_ISTANBUL.
	(ix86_init_platform_type_builtins): Make new builtins __builtin_cpu_is_amdfam15_bdver1
	and __builtin_cpu_is_amdfam15_bdver2.
	(ix86_expand_builtin): Expand IX86_BUILTIN_CPU_IS_AMDFAM15_BDVER1 and 
	IX86_BUILTIN_CPU_IS_AMDFAM15_BDVER2.
	* testsuite/gcc.target/builtin_target.c (fn1): Call new builtins.

2012-01-10  Rong Xu  <xur@google.com>

	Backport r183081 from google/main

	* gcc/profile.c (compute_value_histograms): handle the  
	case when INDIR_CALL counters not available in gcda files.


2012-01-09  Dehao Chen  <dehao@google.com>

	* ipa-inline.c (cgraph_node_opt_info): Print profile info if available
	(dump_inline_decision): Disable einline dump at OPT_INFO_MIN

2012-01-04   Sterling Augustine  <saugustine@google.com>

	Backport from google/main

       	* dwarf2out.c (add_pubname): Move conditional clause from outer to
       	inner if-statement.
       	(dwarf2out_finish): Fix conditions to output DW_AT_GNU_pubnames and
       	DW_AT_GNU_pubtypes.  Move decision to output pubnames and pubtypes from
       	here...
       	(output_pubnames): ...to here.
       	(pubtypes_section_empty): Delete unused function.

2012-01-02  Dehao Chen  <dehao@google.com>

	* ipa-inline.c (cgraph_node_opt_info): Print more concise info when
	dumping inline decisions.

2011-12-19  Sterling Augustine <saugustine@google.com>

	Backport from google/main

	* dwarf2out.c (DEBUG_PUBNAMES_SECTION_LABEL,
	DEBUG_PUBTYPES_SECTION_LABEL): Define.
	(debug_pubnames_section_label, debug_pubtypes_section_label):
	Declare.
	(is_namespace_die, is_class_die): New functions.
	(add_enumerator_pubname): New function.
	(add_pubname): Call is_namespace_die, is_cu_die, and is_class_die in
	conditional.
	(add_pubtype): Call is_namespace_die. Rework name calculation.  Call
	type_tag, lang_hooks.dwarf_name and add_enumerator_pubname.
	(output_pubnames): Output debug_pubnames_section_label or
	debug_pubtypes_section_label.
	(base_type_die): Call add_pubtype.
	(gen_namespace_die): Call add_pubname_string and lang_hooks.dwarf_name.
	(dwarf2_out_init): Generate debug_pubnames_section_label and
	debug_pubtypes_section_label.
	(pubtypes_section_empty): New function.
	(dwarf2_out_finish): Call add_AT_lineptr if pubnames or pubtypes is
	non-empty.  When dealing with pubnames, change assertion to conditional.
	Call pubtypes_section_empty.  Likewise when dealing with pubtypes.
	Move code checking for empty section to...
	(pubtypes_section_empty): Here.
	* target.def: Switch boolean to enable pubnames and pubtypes.

2011-12-17  Sriraman Tallam  <tmsriram@google.com>

	* mversn-dispatch.c (make_name): Use '.' to concatenate to suffix
	mangled names.
	(clone_function): Do not make clones ctors/dtors. Recompute dominance
	info.
	(make_bb_flow): New function.
	(get_selector_gimple_seq): New function.
	(make_selector_function): New function.
	(make_attribute): New function.
	(make_ifunc_function): New function.
	(copy_decl_attributes): New function.
	(dispatch_using_ifunc): New function.
	(purge_function_body): New function.
	(function_can_make_abnormal_goto): New function.
	(make_function_not_cloneable): New function.
	(do_auto_clone): New function.
	(pass_auto_clone): New gimple pass.
	(make_specialized_call_to_clone): Fix clone names.
	* passes.c (init_optimization_passes): Add pass_auto_clone to list.
	* tree-pass.h (pass_auto_clone): New pass.
	* params.def (PARAM_MAX_FUNCTION_SIZE_FOR_AUTO_CLONING): New param.
	* target.def (mversion_function): New target hook.
	* config/i386/i386.c (ix86_option_override_internal): Check correctness
	of ix86_mv_arch_string.
	(add_condition_to_bb): New function.
	(make_empty_function): New function.
	(make_condition_function): New function.
	(is_loop_form_vectorizable): New function.
	(is_loop_stmts_vectorizable): New function.
	(any_loops_vectorizable_with_load_store): New function.
	(mversionable_for_core2_p): New function.
	(ix86_mversion_function): New function.
	* config/i386/i386.opt (mvarch): New option.
	* doc/tm.texi (TARGET_MVERSION_FUNCTION): Document.
	* doc/tm.texi.in (TARGET_MVERSION_FUNCTION): Document.
	* testsuite/gcc.dg/automversn_1.c: New test case.
	* testsuite/gcc.dg/mversn2.c: Fix cloned names.
	* testsuite/g++.dg/mversn8.C: Ditto.
	* testsuite/g++.dg/mversn10a.C: Ditto.
	* testsuite/g++.dg/mversn15.C: Ditto.
	* testsuite/g++.dg/mversn10.C: Ditto.
	* testsuite/g++.dg/mversn16.C: Ditto.

2011-12-17  Sriraman Tallam  <tmsriram@google.com>

	* gcc/config/i386/i386.c
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10): New enum value.
	(fold_builtin_cpu): Fold the new builtins.
	(ix86_init_platform_type_builtins): Make new buitins
	__builtin_cpu_is_intel_corei7 and
	__builtin_cpu_is_amdfam10.
	* testsuite/gcc.target/i386/builtin_target.c (fn1):
	Call the new builtins.

2011-12-17  Easwaran Raman  <eraman@google.com>
	Backport r182443 from google/main.

	2011-12-17   Easwaran Raman  <eraman@google.com>

		* common.opt (fsized-delete): New option.

2011-12-16   Rong Xu  <xur@google.com>
	Backport r182416 from google/main.

	2011-12-16   Rong Xu  <xur@google.com>

		* libgcc/libgcov.c (gcov_merge_gcda_file): reset summary_pos.

2011-12-16  Dehao Chen  <dehao@google.com>

	* ipa-inline.c (dump_inline_decision): New function.
	(cgraph_node_call_chain): New function.
	(cgraph_node_opt_info): New function.
	(cgraph_mark_inline_edge): Dump inline decisions to stderr.

2011-12-14   Sriraman Tallam  <tmsriram@google.com>

	Backport r182344 from google/main.
	
	2011-12-14  Sriraman Tallam  <tmsriram@google.com>

		Do not vectorize loops on Core2 that need to use unaligned
		vector load/stores.
		* tree-vect-stmts.c (is_vector_load_store_slow): New function.
		(vectorizable_load): Return false if the load
		is unaligned and slow.
		(vectorizable_store): Ditto.
		* target.def (TARGET_SLOW_UNALIGNED_VECTOR_MEMOP): New target hook.
		* doc/m.texi.in: Document new target hook:
		TARGET_SLOW_UNALIGNED_VECTOR_MEMOP
		* doc/m.texi: Regenerate.
		* config/i386/i386.c (ix86_slow_unaligned_vector_memop): New function.
		(TARGET_SLOW_UNALIGNED_VECTOR_MEMOP): New macro.

2011-12-12   Teresa Johnson  <tejohnson@google.com>

	Backport r182254 from google/main.

2011-12-11   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 182135.

2011-11-30   Doug Kwan  <dougkwan@google.com>

	Backport r171347 and r181549 from trunk.
	2011-03-23  Julian Brown  <julian@codesourcery.com>

		* expr.c (expand_expr_real_1): Only use BLKmode for volatile
		accesses which are not naturally aligned.
	
	2011-11-20  Joey Ye  <joey.ye@arm.com>

        	* expr.c (expand_expr_real_1): Correctly handle strict volatile
        	bitfield loads smaller than mode size.

2011-11-23   Teresa Johnson  <tejohnson@google.com>

	Backport r181671 from google/main.

2011-11-18   Diego Novillo  <dnovillo@google.com>

	Rollback revisiong 179815 from gcc-4_6-branch.

2011-11-16   Rong Xu  <xur@google.com>

	Backport r181432 from google/main.

2011-11-10  DeLesley Hutchins  <delesley@google.com>

  * tree-threadsafe-analyze.c:    
    factors out code to get function decl.
    (get_fdecl_from_gimple_stmt): new factored-out function
    (handle_call_gs): original definition of code
    (get_lock_returned_by_call): call new function
    (get_trylock_info): call new function
    (handle_unlock_primitive_attr): use passed fdecl

2011-11-10  DeLesley Hutchins  <delesley@google.com>

  * tree-threadsafe-analyze.c (get_canonical_lock_expr):
    Add support for pointer arithmetic operations

2011-11-04   Rong Xu  <xur@google.com>

	Backport r181129 from google/main.

2011-11-06   Teresa Johnson  <tejohnson@google.com>

	Backport r180925 from google/main.

2011-11-06   Teresa Johnson  <tejohnson@google.com>

	Backport r180783 from trunk.

2011-11-04  DeLesley Hutchins  <delesley@google.com>
   * tree-threadsafe-analyze.c:
     Ignores invalid attributes, issues a warning, recovers gracefully.
   * common.opt:
     Adds new thread safety warning.

2011-11-04   Rong Xu  <xur@google.com>

	Backport r180971 from google/main.

2011-11-04   Rong Xu  <xur@google.com>

	Backport r180973 from google/main.

2011-11-04   Rong Xu  <xur@google.com>

	Backport r180269 from google/main.

2011-11-02   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 180729.

2011-10-25   Xinliang David Li  <davidxl@google.com>

	* profile.c (compute_branch_probablies): recompute
	function frequency summary after profile annotation.

2011-10-24   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 180298.

2011-10-21   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 179421.

2011-10-17  Dehao Chen  <dehao@google.com>

	Add a flag (-frecord-gcc-switches-in-elf) to record compiler
	command line options to .gnu.switches.text sections of
	the object file.
	* coverage.c (write_opts_to_asm): Write the options to
	.gnu.switches.text sections.
	* common.opt: Ditto.
	* opts.h: Ditto.

2011-10-14  DeLesley Hutchins  <delesley@google.com>

   * tree-threadsafe-analyze.c (get_canonical_lock_expr):
     Bugfix: add lock to hash set, even if it refers to a base class

2011-10-14  DeLesley Hutchins  <delesley@google.com>

   * tree-threadsafe-analyze.c (remove_lock_from_lockset):
     Bugfix: shared lock now removed properly when the universal lock 
     is in the exclusive lock set.  

2011-09-30  Sharad Singhai  <singhai@google.com>

	* gcc.c (cc1_options): Add -fno-early-inlining for improved coverage.

2011-09-30  Easwaran Raman  <eraman@google.com>

	* tree-profile.c (gcov_sample_counter_decl): Add GTY marker.
	(gcov_sampling_rate_decl): Likewise.
	(add_sampling_to_edge_counters): Do not free
	instrumentation_to_be_sampled.
	(cleanup_instrumentation_sampling): New function.
	(tree_profiling): Call cleanup_instrumentation_sampling at the end.

2011-09-30  DeLesley Hutchins  <delesley@google.com>

    * tree-threadsafe-analyze.c (process_function_attrs):
      Detect clones and suppress warnings.

2011-09-27  Sriraman Tallam  <tmsriram@google.com>

	* output.h (SECTION_EXCLUDE): New flag for exclude sections.
	* varasm.c (default_elf_asm_named_section): Add "e" to section flags
	marked as SECTION_EXCLUDE.
	* final.c (rest_of_handle_final): Exclude .gnu.callgraph sections.

2011-09-22  Sriraman Tallam  <tmsriram@google.com>

	* cgraphbuild.c (remove_cgraph_callee_edges): Preserve callee edges if
	callgraph profiles are needed.
	* final.c (rest_of_handle_final): Rename .note.callgraph sections as
	.gnu.callgraph sections.
	* tree-optimize.c (gate_all_optimizations): Set
	cgraph_callee_edges_final_cleanup to true.
	(cgraph_callee_edges_final_cleanup): New global variable.
	* params.def (PARAM_NOTE_CGRAPH_SECTION_EDGE_THRESHOLD): Fix comment.

2011-09-22  Guozhi Wei  <carrot@google.com>

	Backport r178995 from trunk.

	2011-09-20  Wei Guozhi  <carrot@google.com>

		PR rtl-optimization/49452
		* postreload.c (reload_combine): Invalidate use information when
		across volatile insn.

2011-09-21   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 179031.

2011-09-15  Easwaran Raman  <eraman@google.com>

	Backport r178898 from google/main.

	2011-09-15  Easwaran Raman  <eraman@google.com>

		* Makefile.in (PLUGIN_HEADERS): Add l-ipo.h.

2011-09-15  Easwaran Raman  <eraman@google.com>

	Backport r176741 from trunk.

	2011-07-22  Romain Geissler  <romain.geissler@gmail.com>
	
		PR plugins/45348
		PR plugins/48425
		PR plugins/46577
		* Makefile.in: Do not flatten c-family directory when installing
		plugin headers.

2011-09-15   Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 178854.

2011-9-13  DeLesley Hutchins  <delesley@google.com>

      * tree-threadsafe-analyze.c (get_canonical_lock_expr):
        don't remove & on recursive call

2011-09-01  Sriraman Tallam  <tmsriram@google.com>

	* config/i386/i386.c (build_struct_with_one_bit_fields): New function.
	(make_var_decl): New function.
	(get_field_from_struct): New function.
	(fold_builtin_target): New function.
	(ix86_fold_builtin): New function.
	(ix86_expand_builtin): Expand new builtins by folding them.
	(TARGET_FOLD_BUILTIN): New macro.
	(IX86_BUILTIN_CPU_SUPPORTS_CMOV): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_MMX): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_POPCOUNT): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE2): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE3): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSSE3): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE4_1): New enum value.
	(IX86_BUILTIN_CPU_SUPPORTS_SSE4_2): New enum value.
	(IX86_BUILTIN_CPU_INIT): New enum value.
	(IX86_BUILTIN_CPU_IS_AMD): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_ATOM): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_CORE2): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7_NEHALEM): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7_WESTMERE): New enum value.
	(IX86_BUILTIN_CPU_IS_INTEL_COREI7_SANDYBRIDGE): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10_BARCELONA): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10_SHANGHAI): New enum value.
	(IX86_BUILTIN_CPU_IS_AMDFAM10_ISTANBUL): New enum value.
	* config/i386/libgcc-glibc.ver (__cpu_indicator_init): Export symbol.
	(__cpu_model): Export symbol.
	(__cpu_features): Export symbol.
	* config/i386/i386-builtin-types.def: New function type.

2011-08-24  Mark Heffernan  <meheff@google.com>

	* params.def (hot-bb-count-fraction): Change default value.

2011-08-24   David Li  <davidxl@google.com>

	* profile.c (compute_branch_probabilities): Partially revert
	change in r176997 which led to perf regression of important
	apps.

2011-08-23  Mark Heffernan  <meheff@google.com>

	* basic-block.h (maybe_hot_frequency_p): Add prototype.
	* cgraph.c (dump_cgraph_node): Add field to dump.
	(cgraph_clone_node) Handle new field.
	* cgraph.h (cgraph_node): New field max_bb_count.
	* cgraphbuild.c (rebuild_cgraph_edges): Compute max_bb_count.
	* cgraphunit.c (cgraph_copy_node_for_versioning) Handle new field.
	* common.opt (finline-hot-caller): New option.
	* ipa-inline.c (cgraph_mark_inline_edge) Update max_bb_count.
	(edge_hot_enough_p) New function.
	(cgraph_decide_inlining_of_small_functions) Call edge_hot_enough_p.
	* predict.c (maybe_hot_frequency_p): Remove static keyword and
	guard with profile_info check.
	* testsuite/gcc.dg/tree-prof/inliner-1.c: Add flag.
	* testsuite/gcc.dg/tree-prof/lipo/inliner-1_0.c: Add flag.

2011-08-16  Guozhi Wei  <carrot@google.com>

	Backport r174965 from trunk.

	2011-06-12  Ira Rosen  <ira.rosen@linaro.org>

		* tree-vect-data-refs.c (vect_peeling_hash_get_most_frequent):
		Take number of iterations to peel into account for equally frequent
		misalignment values.

2011-08-11  David Li  <davidxl@google.com>

	* l-ipo.c (process_module_scope_static_func): Promote
	aliases of static symbol in LIPO mode.

2011-08-02   David Li  <davidxl@google.com>

	Port 53689-p2 and 53705-p2 to v15
	* libgcov.c (__gcov_merge_dc): Relax over assertion in 

	dc merging.
2011-07-31  David Li  <davidxl@google.com>

	* tree-optimize.c (execute_fixup_cfg): Fix up entry outgoing
	edge profile counts.
	* profile.c (compute_branch_probabilities): Compute function
	frequency after profile annotation.

2011-07-28  David Li  <davidxl@google.com>

	* coverage.c (coverage_init): Remove checking of profile-use
	flags.

2011-07-25   Rong Xu  <xur@google.com>
	Merge from google/main cherry pick r176592.
	2011-07-21   Rong Xu  <xur@google.com>
		* ipa.c (function_and_variable_visibility): In LIPO mode, call 
		varpool_externally_visible_p() to set the externally visible 
		attribute even for varpool nodes that not marked as needed.
		* l-ipo.c (varpool_do_link): Merge the externally visible 
		attribute for varpool nodes.

2011-07-24  Easwaran Raman  <eraman@google.com>
	Backport r175063 from trunk:
	2011-06-14  Easwaran Raman  <eraman@google.com>
		PR rtl-optimization/44194
		* dse.c: Include tree-flow.h
		(insn_info): Add new field non_frame_wild_read.
		(group_info): Add new fields escaped_n and escaped_p.
		(kill_on_calls): New variable.
		(get_group_info): Initialize gi->escaped_n and gi->escaped_p.
		(dse_step0): Initialize kill_on_calls.
		(can_escape): New function.
		(set_usage_bits): Add additional parameter; record information
		about escaped locations.
		(record_store): Pass EXPR corresponding to MEM to set_usage_bits.
		(dse_step2_nospill): Set kill_on_calls based on
		group->escaped_n and group->escaped_n.
		(add_wild_read): Refactor into...
		(reset_active_stores): ... New function, and
		(free_read_records): ... New function.
		(add_non_frame_wild_read): New function.
		(scan_insn): Call add_non_frame_wild_read on non-const calls.
		(scan_reads_nospill): Handle instructions with non_frame_wild_read.
		(dse_step5_nospill): Call scan_reads_nospill for instructions
		marked as non_frame_wild_read.
		(dse_step7): Free escaped_n, escaped_p and kill_on_calls bitmaps.
	Backport r175384 from trunk:
	2011-06-24  Easwaran Raman  <eraman@google.com>
		PR rtl-optimization/49429
		PR target/49454
		* expr.c (emit_block_move_hints):  Mark MEM_EXPR(x) and
		MEM_EXPR(y) addressable if emit_block_move_via_libcall is
		used to copy y into x.
		* calls.c (initialize_argument_information): Mark
		an argument addressable if it is passed by invisible reference.
		(emit_library_call_value_1): Mark  MEM_EXPR (val) addressable
		if it is passed by reference.

2011-07-19  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 176416.

2011-07-05  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 175849.

2011-07-05  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 175816.

2011-06-29  Diego Novillo  <dnovillo@google.com>

	Backport from gcc-4_6-branch

	2011-06-29  Martin Jambor  <mjambor@suse.cz>
		Backport from mainline
		2011-06-24  Martin Jambor  <mjambor@suse.cz>

		PR tree-optimizations/49516
		* tree-sra.c (sra_modify_assign): Choose the safe path for
		aggregate copies if we also did scalar replacements.

2011-06-28  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 175583.

2011-06-27  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 175526.

2011-06-27  Diego Novillo  <dnovillo@google.com>

	Google ref 4487457.

	* tree-cfg.c (gate_warn_function_return): New.
	(pass_warn_function_return): Use it.

2011-06-14  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 175007.

2011-06-13  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 174986.

2011-06-09  Chris Demetriou  <cgd@google.com>

	Backport from google/main r174890:
	2011-06-09  Chris Demetriou  <cgd@google.com>
	* doc/install.texi (--with-warn-frame-larger-than-extra-text): New.
	* configure.ac (--with-warn-frame-larger-than-extra-text): New.
	(WARN_FRAME_LARGER_THAN_EXTRA_TEXT): Define.
	* final.c (final_start_function): Use
	WARN_FRAME_LARGER_THAN_EXTRA_TEXT.
	* configure: Regenerate.
	* config.in: Regenerate.

2011-06-07  Mark Heffernan  <meheff@google.com>

	Merge from google/main cherry pick rev 174789.

2011-06-07  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 174706.

2011-06-01  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 174522.

2011-06-01  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 174482.

2011-05-25  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 174114.

2011-05-24  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 174086.

2011-05-11  Xinliang David Li <davidxl@google.com>
	
	Merge from google/main rev 173636.

2011-05-10  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 173632.

2011-05-10  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 173605.

2011-05-03  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 173305.

2011-05-03  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 173286 (minus rev 173258).

2011-05-02  Diego Novillo  <dnovillo@google.com>

	Google ref 4335466.

	* BASE-VER: Change to 4.6.x-google.

2011-04-18  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 172633.

2011-04-17  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 172617.

2011-04-15  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 172209.

2011-03-31  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 171756.

2011-03-29  Diego Novillo  <dnovillo@google.com>

	Merge from gcc-4_6-branch rev 171512 (4.6.0 release tag).

2011-03-18  Diego Novillo  <dnovillo@google.com>

	Merge from google/main rev 171163.

2011-03-15  Diego Novillo  <dnovillo@google.com>

	* BASE-VER: Change to 4.6.0-google
	* DEV-PHASE: Change to prerelease.

Copyright (C) 2011 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
