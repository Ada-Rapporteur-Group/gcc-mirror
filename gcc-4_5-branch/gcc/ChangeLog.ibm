2011-03-14  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline:
	2011-03-14  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/48053
	* config/rs6000/rs6000.md (movdi split for 32-bit): Don't split up
	64-bit constants being loaded into registers other than GPRs such
	as loading 0 into a VSX register.

2011-03-11  Peter Bergner  <bergner@vnet.ibm.com>

	Backport proposed mainline patch.

	PR target/48053
	* config/rs6000/predicates.md (easy_vector_constant_add_self,
	easy_vector_constant_msb): Do not handle V2DImode and V2DFmode.
	* config/rs6000/rs6000.c (const_vector_elt_as_int): Add assert that
	mode is not V2DImode or V2DFmode.
	(vspltis_constant): Do not handle V2DImode and V2DFmode.
	(rs6000_expand_vector_init): Replace copy_to_reg with copy_to_mode_reg.
	* config/rs6000/rs6000.md (movdi_internal32): Allow setting VSX
	registers to 0.
	(movdi_internal64): Likewise.

2011-03-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>

	Backport from mainline
	2011-03-11  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/48067
	* tree-ssa-math-opts.c (convert_mult_to_fma): Verify the
	multiplication result will be only used once on the target stmt.

	* gcc.dg/pr48067.c: New testcase.
	
2011-03-11  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to gcc-4_5-branch, subversion id 170880.
	* REVISION: Update subversion id.

2011-03-09  Peter Bergner  <bergner@vnet.ibm.com>

	Backport from mainline
	2010-07-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	PR target/44707
	* config/rs6000/rs6000.c (rs6000_legitimize_reload_address): Recognize
	(lo_sum (high ...) ...) patterns generated by earlier passes.

2011-03-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to gcc-4_5-branch, subversion id 170820.
	* REVISION: Update subversion id.

2011-03-09  Alan Modra  <amodra@gmail.com>

	PR target/48032
	* config/rs6000/rs6000.c (offsettable_ok_by_alignment): Do not
	presume symbol_refs without a symbol_ref_decl are suitably
	aligned, nor other trees we may see here.  Handle anchor symbols.
	(legitimate_constant_pool_address_p): Comment.  Add mode param.
	Check cmodel=medium addresses.  Adjust all calls.
	(rs6000_emit_move): Don't call offsettable_ok_by_alignment on
	creating cmodel=medium optimized access to locals.
	* config/rs6000/constraints.md (R): Pass QImode to
	legitimate_constant_pool_address_p.
	* config/rs6000/predicates.md (input_operand): Pass mode to
	legitimate_constant_pool_address_p.
	* config/rs6000/rs6000-protos.h (legitimate_constant_pool_address_p):
	Update prototype.

2011-03-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to gcc-4_5-branch, subversion id 170745.
	* REVISION: Update subversion id.

2011-03-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2011-03-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/47755
	* config/rs6000/rs6000.c (easy_altivec_constant): Correctly handle
	V2DI/V2DF constants.  Only all 0's or all 1's are easy.
	(output_vec_const_move): Ditto.

2011-03-09  Alan Modra  <amodra@gmail.com>

	* config/rs6000/linux.h (TARGET_ASM_FILE_END): Don't define.
	* config/rs6000/linux64.h (TARGET_ASM_FILE_END): Don't define.
	* config/rs6000/sysv4.h (TARGET_ASM_FILE_END): Define.
	* config/rs6000/rs6000-protos.h (init_cumulative_args): Add fndecl and
	return_mode args.
	* config/rs6000/rs6000.h (CUMULATIVE_ARGS): Add "escapes".
	(INIT_CUMULATIVE_ARGS): Pass FNDECL, VOIDmode.
	(INIT_CUMULATIVE_INCOMING_ARGS): Pass current_function_decl, VOIDmode.
	(INIT_CUMULATIVE_LIBCALL_ARGS): Pass NULL_TREE, MODE.
	* config/rs6000/rs6000.c
	(rs6000_elf_end_indicate_exec_stack): Rename to..
	(rs6000_elf_file_end): ..this.  Only call file_end_indicate_exec_stack
	for POWERPC_LINUX.  Move code emitting .gnu_attribute to here, from..
	(rs6000_file_start): ..here.
	(rs6000_passes_float, rs6000_passes_vector, rs6000_returns_struct): New
	file scope variables.
	(call_ABI_of_interest): New function.
	(init_cumulative_args): Set above vars when function return value
	is a float, vector, or small struct.
	(rs6000_function_arg_advance_1): Likewise for function args.
	(rs6000_va_start): Set rs6000_passes_float if variable arg function
	references float args.

2011-03-07  Pat Haugen <pthaugen@us.ibm.com>

	Backport from mainline
	2011-03-07  Pat Haugen <pthaugen@us.ibm.com>

	PR target/47862
	* config/rs6000/rs6000.h (HARD_REGNO_CALLER_SAVE_MODE): Define.

2011-03-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>

	Backport 2010-12-07 changes by Richard Guenther to fix LTC
	bugzilla 70276.

	* tree-ssa-math-opts.c (execute_optimize_widening_mul):  Only
	process calls with LHS present; unlink virtual definitions when
	converting pow (n, 2.0) to n*n.

2011-03-02  Alan Modra  <amodra@gmail.com>

	PR target/47935
	* config/rs6000/predicates.md (lwa_operand): Check cmodel medium
	toc relative addresses for valid offsets.

2011-02-21  Alan Modra  <amodra@gmail.com>

	* config/rs6000/rs6000.c (offsettable_ok_by_alignment): Return
	false for STRING_CST.

2011-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2011-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/47755
	* config/rs6000/predicates.md (easy_vector_constant): Allow V2DI
	mode for vector constants.  Remove code that checks for TImode.

2011-02-15  Alan Modra  <amodra@gmail.com>

	Backport from mainline
	2010-11-01  Alan Modra  <amodra@gmail.com>
	PR target/46030
	* config/rs6000/rs6000.c (struct rs6000_stack): Add reload_completed
	and savres_strategy.
	(stack_info): New file scope var.
	(rs6000_init_machine_status): Init stack_info.
	(SAVRES_INLINE_FPRS, SAVRES_INLINE_GPRS,
	SAVRES_NOINLINE_GPRS_SAVES_LR, SAVRES_NOINLINE_FPRS_SAVES_LR,
	SAVRES_NOINLINE_FPRS_DOESNT_RESTORE_LR): Replace with..
	(SAVE_INLINE_FPRS, SAVE_INLINE_GPRS, REST_INLINE_FPRS, REST_INLINE_GPRS,
	SAVE_NOINLINE_GPRS_SAVES_LR, SAVE_NOINLINE_FPRS_SAVES_LR
	REST_NOINLINE_FPRS_DOESNT_RESTORE_LR): ..this.  Update all refs.
	(rs6000_savres_strategy): Rewrite.
	(rs6000_stack_info): Use "stack_info" in place of local "info".
	Return cached stack info when reload_completed unless ENABLE_CHECKING
	in which case confirm newly calculated stack info matches old info.
	Delay calculation of lr_save_p, set it for out of line gp save/restore
	as well as fp.  Call rs6000_savres_strategy from here..
	(rs6000_emit_prologue, rs6000_emit_epilogue): ..rather than here.
	(rs6000_output_function_prologue): Use info->savres_strategy to
	determine whether fp save/restore externs need to be emitted.

2011-02-14  Peter Bergner  <bergner@vnet.ibm.com>

	Backport from mainline
	2011-01-21  Alan Modra  <amodra@gmail.com>

	* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Add
	builtin_define __CMODEL_MEDIUM__ and __CMODEL_LARGE__.

2011-02-14  Peter Bergner  <bergner@vnet.ibm.com>

	Backport from mainline
	2011-02-02  Peter Bergner  <bergner@vnet.ibm.com>

	PR rtl-optimization/47525
	* df-scan.c: Update copyright years.
	(df_get_call_refs): Do not mark global registers as DF_REF_REG_USE
	and non-clobber DF_REF_REG_DEF for calls to const and pure functions.

2011-02-04  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to gcc-4_5-branch, subversion id 169837.
	* REVISION: Update subversion id.

2011-02-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline:
	2011-01-31  Alan Modra  <amodra@gmail.com>

	* config/rs6000/rs6000.c (print_operand): Rearrange addends in
	toc relative expressions as we do in print_operand_address.

2011-02-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline:
	2011-02-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/47272
	* doc/extend.texi (PowerPC AltiVec/VSX Built-in Functions):
	Document using vector double with the load/store builtins, and
	that the load/store builtins always use Altivec instructions.

	* config/rs6000/vector.md (vector_altivec_load_<mode>): New insns
	to use altivec memory instructions, even on VSX.
	(vector_altivec_store_<mode>): Ditto.

	* config/rs6000/rs6000-protos.h (rs6000_address_for_altivec): New
	function.

	* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add
	V2DF, V2DI support to load/store overloaded builtins.

	* config/rs6000/rs6000-builtin.def (ALTIVEC_BUILTIN_*): Add
	altivec load/store builtins for V2DF/V2DI types.

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Don't
	set avoid indexed addresses on power6 if -maltivec.
	(altivec_expand_ld_builtin): Add V2DF, V2DI support, use
	vector_altivec_load/vector_altivec_store builtins.
	(altivec_expand_st_builtin): Ditto.
	(altivec_expand_builtin): Add VSX memory builtins.
	(rs6000_init_builtins): Add V2DI types to internal types.
	(altivec_init_builtins): Add support for V2DF/V2DI altivec
	load/store builtins.
	(rs6000_address_for_altivec): Insure memory address is appropriate
	for Altivec.

	* config/rs6000/vsx.md (vsx_load_<mode>): New expanders for
	vec_vsx_ld and vec_vsx_st.
	(vsx_store_<mode>): Ditto.

	* config/rs6000/rs6000.h (RS6000_BTI_long_long): New type
	variables to hold long long types for VSX vector memory builtins.
	(RS6000_BTI_unsigned_long_long): Ditto.
	(long_long_integer_type_internal_node): Ditti.
	(long_long_unsigned_type_internal_node): Ditti.

	* config/rs6000/altivec.md (UNSPEC_LVX): New UNSPEC.
	(altivec_lvx_<mode>): Make altivec_lvx use a mode iterator.
	(altivec_stvx_<mode>): Make altivec_stvx use a mode iterator.

	* config/rs6000/altivec.h (vec_vsx_ld): Define VSX memory builtin
	short cuts.
	(vec_vsx_st): Ditto.

	Backport from mainline:
	2011-02-01  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/47580
	* config/rs6000/vsx.md (vsx_float<VSi><mode>2): Use
	gpc_reg_operand instead of vsx_register_operand to match rs6000.md
	generator functions.
	(vsx_floatuns<VSi><mode>2): Ditto.
	(vsx_fix_trunc<mode><VSi>2): Ditto.
	(vsx_fixuns_trunc<mode><VSi>2): Ditto.

	Backport from mainline:
	2011-01-13  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/47251
	* config/rs6000/rs6000.md (floatunsdidf2): Add check for hardware
	floating point.
	(floatunsdidf2_fcfidu): Ditto.

2011-01-24  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the GCC 4.6 mainline:
	2011-01-24  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/47385
	* config/rs6000/altivec.md (vector constant splitters): Add
	support for creating vector single precision constants if -mvsx is
	used and we would create the constant using Altivec primitives.

2010-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the GCC 4.6 mainline:
	2010-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR middle-end/42694
	* builtins.c (expand_builtin_pow_root): Don't optimize pow(x,y)
	where y is 0.25, 1./6., or 0.75 if the target does not have a sqrt
	instruction, but do optimize if y is 0.5 or 1./3. since that
	changes an expensive call into a cheaper one.

2010-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the GCC 4.6 mainline:
	2010-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_option_override_internal): Fix
	thinko regarding setting -mno-<xxx> debug switches.
	(rs6000_rtx_costs): Add FMA.  Delete old rtl based FMA costs.

2010-11-30  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the GCC 4.6 mainline:
	2010-11-30  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/46722
	* tree-ssa-math-opts.c (convert_mult_to_fma): Get multiplication
	operands as arguments.
	(execute_optimize_widening_mul): Also handle power of two as
	multiplication.

2010-11-24  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the GCC 4.6 mainline:
	2010-11-09  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.md (floatsi<mode>2_lfiwax): Rewrite so
	split occurs before reload, and we allocate memory at the time of
	the split, not during expansion.  Add attributes.
	(floatsi<mode>2_lfiwax_mem): Ditto.
	(floatunssi<mode>2_lfiwzx): Ditto.
	(floatunssi<mode>2_lfiwzx_mem): Ditto.
	(floatsidf2): Ditto.
	(floatunssisf2): Ditto.
	(floatunssidf2): Ditto.
	(fix_trunc<mode>si2): Ditto.
	(fix_trunc<mode>si2_stfiwx): Ditto.
	(fix_trunc<mode>si2_internal): Ditto.
	(fix_trunc<mode>si2): Ditto.
	(fix_trunc<mode>di2): Ditto.
	(fixuns_trunc<mode>si2_stfiwx): Ditto.
	(floatsisf2): Ditto.
	(floatdidf2_mem): Ditto.
	(floatunsdidf2_mem): Ditto.
	(floatunsdidf2): Ditto.
	(floatdisf2_internal1): Ditto.
	(floatdisf2_mem): Ditto.
	(floatunsdisf2_mem): Ditto.
	(floatsi<mode>2_lfiwax_mem2): Delete.
	(floatunssi<mode>2_lfiwzx_mem2): Ditto.
	(fix_trunc<mode>si2_mem): Ditto.
	(fixuns_trunc<mode>si2_mem): Ditto.
	(round32<mode>2_fprs): New combiner insn to combine (double)(int)
	type operations to reduce copying the values to multiple memory
	slots.
	(roundu32<mode>2_fprs): Ditto.

	* config/rs6000/rs6000.c (rs6000_address_for_fpconvert): Handle
	PRE_INC, PRE_DEC, PRE_MODIFY.
	(rs6000_expand_convert_si_to_sfdf): Delete, no longer used.

	* config/rs6000/rs6000-protos.h (rs6000_expand_convert_si_to_sfdf):
	Delete prototype.

	Backport from the GCC 4.6 mainline
	2010-11-16  Richard Henderson  <rth@redhat.com>

	* config.gcc [powerpc*, rs6000*] (extra_options): Add fused-madd.opt.
	* config/rs6000/rs6000.opt (mfused-madd): Remove.
	* config/rs6000/altivec.md (altivec_vmaddfp): Remove.
	(*altivec_vmaddfp_1): Remove.
	(*altivec_fmav4sf4): Rename from altivec_vmaddfp_2; use FMA.
	(altivec_mulv4sf3): Expand to FMA directly.
	(*altivec_vnmsubfp): Rename from altivec_vnmsubfp.
	(*altivec_vnmsubfp_1, *altivec_vnmsubfp_2): Remove.
	* config/rs6000/paired.md (paired_madds0): Use FMA.
	(paired_madds1): Likewise.
	(*paired_madd): Rename from paired_madd; use FMA.
	(*paired_msub, *paired_nmadd, *paired_nmsub): Similarly.
	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Do not
	consider TARGET_FUSED_MADD wrt rs6000_recip_control.
	(bdesc_3arg): Update CODE_FOR_* for pattern renames.
	(rs6000_emit_madd): Use fma_optab.
	(rs6000_emit_msub): Use fms_optab.
	(rs6000_emit_nmsub): Expand the FMA pattern directly.
	* config/rs6000/rs6000.md (FMA_F): New mode iterator.
	(*fmasf4_fpr): Rename from fmasf4_fpr.
	(*nfmasf4_fpr): Rename from *fnmasf4_fpr.
	(*nfmssf4_fpr): Rename from *fnmssf4_fpr.
	(*fmaddsf4_powerpc, *fmaddsf4_power, *fmsubsf4_powerpc): Remove.
	(*fmsubsf4_power, *fnmaddsf4_powerpc_1, *fnmaddsf4_powerpc_2): Remove.
	(*fnmaddsf4_power_1, *fnmaddsf4_power_2, *fnmsubsf4_powerpc_1): Remove.
	(*fnmsubsf4_powerpc_2, *fnmsubsf4_power_1, *fnmsubsf4_power_2): Remove.
	(*fmadf4_fpr): Rename from fmadf4_fpr.
	(*nfmadf4_fpr): Rename from *fnmadf4_fpr.
	(*nfmsdf4_fpr): Rename from *fnmsdf4_fpr.
	(*fmadddf4_fpr, *fmsubdf4_fpr, *fnmadddf4_fpr_1): Remove.
	(*fnmadddf4_fpr_2, *fnmsubdf4_fpr_1, *fnmsubdf4_fpr_2): Remove.
	(fmasf4, fmadf4): Macroize into...
	(fma<FMA_F>4): ... here.
	(fms<FMA_F>4, fnma<FMA_F>4, fnms<FMA_F>4): New.
	(nfma<FMA_F>4, nfms<FMA_F>4): New.
	* config/rs6000/vector.md (mul<VEC_F>3): Do not depend on
	TARGET_FUSED_MADD.
	* config/rs6000/vsx.md (vsx_fmadd<VSX_B>4): Remove.
	(*vsx_fmadd<mode>4_1): Remove.
	(vsx_fmsub<mode>4, *vsx_fmsub<mode>4_1): Remove.
	(vsx_fnmadd<mode>4_1, vsx_fnmadd<mode>4_2): Remove.
	(vsx_fnmsub<mode>4_1, vsx_fnmsub<mode>4_2): Remove.
	(*vsx_fma<mode>4): Rename from vsx_fmadd<mode>4_2.
	(*vsx_fms<mode>4): Rename from vsx_fmsub<mode>4_2.
	(*vsx_nfma<mode>4): Rename from vsx_fnmadd<mode>4.
	(*vsx_nfms<mode>4): Rename from vsx_fnmsub<mode>4.

	Backport from the GCC 4.6 mainline
	2010-11-15  Richard Henderson  <rth@redhat.com>

	* fold-const.c (operand_equal_for_comparison_p): Handle FMA_EXPR,
	WIDEN_MULT_PLUS_EXPR, WIDEN_MULT_MINUS_EXPR, VEC_COND_EXPR,
	DOT_PROD_EXPR.

	Backport from the GCC 4.6 mainline
	2010-11-11  Richard Henderson  <rth@redhat.com>

	* config/fused-madd.opt: New file.

	Backport from the GCC 4.6 mainline
	2010-11-15  Richard Henderson  <rth@redhat.com>

	* loop-unroll.c (analyze_insn_to_expand_var): Accept accumulation
	via FMA if unsafe math.
	(insert_var_expansion_initialization): Handle FMA.
	(combine_var_copies_in_loop_exit): Likewise.

	Backport from the GCC 4.6 mainline
	2010-11-15  Richard Guenther  <rguenther@suse.de>

	PR bootstrap/46474
	* tree-ssa-math-opts.c (convert_mult_to_fma): Disregard debug stmts.

	Backport from the GCC 4.6 mainline
	 2010-11-11  Richard Henderson  <rth@redhat.com>

	* optabs.c (init_optabs): Init {fma,fms,fnma,fnms}_optab properly.

	Backport from the GCC 4.6 mainline
	2010-11-11  Richard Henderson  <rth@redhat.com>

	* tree-ssa-math-opts.c (convert_mult_to_fma): Do not verify
	that the target has the exact fma operation that we matched.

	Backport from the GCC 4.6 mainline
	2010-11-11  Richard Henderson  <rth@redhat.com>

	* tree-ssa-math-opts.c (convert_mult_to_fma): Handle a NEGATE_EXPR
	in between the MULT and the PLUS/MINUS.

	Backport from the GCC 4.6 mainline:
	2010-11-05  Jakub Jelinek  <jakub@redhat.com>

	PR debug/46307
	* tree-ssa-operands.c (get_expr_operands): Handle FMA_EXPR.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	(op_code_prio): Likewise.
	* cfgexpand.c (expand_debug_expr): Likewise.


	Backport from the GCC 4.6 mainline:
	2010-11-04  Richard Guenther  <rguenther@suse.de>
		    Richard Henderson  <rth@redhat.com>

	* tree.def (FMA_EXPR): New tree code.
	* expr.c (expand_expr_real_2): Add FMA_EXPR expansion code.
	* gimple.c (gimple_rhs_class_table): FMA_EXPR is a GIMPLE_TERNARY_RHS.
	* tree-cfg.c (verify_gimple_assign_ternary): Verify FMA_EXPR types.
	* tree-inline.c (estimate_operator_cost): Handle FMA_EXPR.
	* gimple-pretty-print.c (dump_ternary_rhs): Likewise.
	* tree-ssa-math-opts.c (convert_mult_to_fma): New function.
	(execute_optimize_widening_mul): Call it.  Reorganize to allow
	dead stmt removal.  Move TODO flags ...
	(pass_optimize_widening_mul): ... here.
	* flag-types.h (enum fp_contract_mode): New enum.
	* common.opt (flag_fp_contract_mode): New variable.
	(-ffp-contract): New option.
	* opts.c (common_handle_option): Handle it.
	* doc/invoke.texi (-ffp-contract): Document.
	* tree.h (fold_fma): Declare.
	* builtins.c (fold_fma): New function.
	(fold_builtin_fma): Likewise.
	(fold_builtin_3): Call it for fma.
	* fold-const.c (fold_ternary_loc): Fold FMA_EXPR.
	* optabs.c (optab_for_tree_code): Handle FMA_EXPR.
	* config/i386/sse.md (fms<mode>4, fnma<mode>, fnms<mode>4):
	New expanders.
	* doc/md.texi (fms<mode>4, fnma<mode>, fnms<mode>4): Document new
	named patterns.
	* genopinit.c (optabs): Initialize fms_optab, fnma_optab and fnms_optab.
	* optabs.h (enum optab_index): Add OTI_fms, OTI_fnma and OTI_fnms.
	(fms_optab, fnma_optab, fnms_optab): New defines.
	* gimplify.c (gimplify_expr): Handle binary truth expressions
	explicitly.  Handle FMA_EXPR.
	* tree-vect-stmts.c (vectorizable_operation): Handle ternary
	operations.

	Backport from the GCC 4.6 mainline:
	 2010-10-18  Richard Henderson  <rth@redhat.com>

	* simplify-rtx.c (simplify_ternary_operation) [FMA]: Simplify
	(fma (neg a) (neg b) c) and (fma a (neg b) c).

	Backport from the GCC 4.6 mainline:
	2010-10-11  Eric Botcazou  <ebotcazou@adacore.com>

	* simplify-rtx.c (simplify_unary_operation_1): Use unsigned arithmetics
	in masking operations.
	(simplify_const_unary_operation): Likewise.
	(simplify_binary_operation_1): Likewise.
	(simplify_const_binary_operation): Likewise.
	(simplify_const_relational_operation): Likewise.
	(simplify_ternary_operation): Likewise.
	(simplify_immed_subreg): Likewise.

	Backport from the GCC 4.6 mainline:
	2010-06-25  Bernd Schmidt  <bernds@codesourcery.com>

	With large parts from Jim Wilson:
	PR target/43902
	* tree-pretty-print.c (dump_generic_node, op_code_prio): Add
	WIDEN_MULT_PLUS_EXPR and WIDEN_MULT_MINUS_EXPR.
	* optabs.c (optab_for_tree_code): Likewise.
	(expand_widen_pattern_expr): Likewise.
	* tree-ssa-math-opts.c (convert_mult_to_widen): New function, broken
	out of execute_optimize_widening_mul.
	(convert_plusminus_to_widen): New function.
	(execute_optimize_widening_mul): Use the two new functions.
	* expr.c (expand_expr_real_2): Add support for GIMPLE_TERNARY_RHS.
	Remove code to generate widening multiply-accumulate.  Add support
	for WIDEN_MULT_PLUS_EXPR and WIDEN_MULT_MINUS_EXPR.
	* gimple-pretty-print.c (dump_ternary_rhs): New function.
	(dump_gimple_assign): Call it when appropriate.
	* tree.def (WIDEN_MULT_PLUS_EXPR, WIDEN_MULT_MINUS_EXPR): New codes.
	* cfgexpand.c (gimple_assign_rhs_to_tree): Likewise.
	(expand_gimple_stmt_1): Likewise.
	(expand_debug_expr): Support WIDEN_MULT_PLUS_EXPR and
	WIDEN_MULT_MINUS_EXPR.
	* tree-ssa-operands.c (get_expr_operands): Likewise.
	* tree-inline.c (estimate_operator_cost): Likewise.
	* gimple.c (extract_ops_from_tree_1): Renamed from
	extract_ops_from_tree.  Add new arg for a third operand; fill it.
	(gimple_build_assign_stat): Support operations with three operands.
	(gimple_build_assign_with_ops_stat): Likewise.
	(gimple_assign_set_rhs_from_tree): Likewise.
	(gimple_assign_set_rhs_with_ops_1): Renamed from
	gimple_assign_set_rhs_with_ops.  Add new arg for a third operand.
	(get_gimple_rhs_num_ops): Support GIMPLE_TERNARY_RHS.
	(get_gimple_rhs_num_ops): Handle WIDEN_MULT_PLUS_EXPR and
	WIDEN_MULT_MINUS_EXPR.
	* gimple.h (enum gimple_rhs_class): Add GIMPLE_TERNARY_RHS.
	(extract_ops_from_tree_1): Adjust declaration.
	(gimple_assign_set_rhs_with_ops_1): Likewise.
	(gimple_build_assign_with_ops): Pass NULL for last operand.
	(gimple_build_assign_with_ops3): New macro.
	(gimple_assign_rhs3, gimple_assign_rhs3_ptr, gimple_assign_set_rhs3,
	gimple_assign_set_rhs_with_ops, extract_ops_from_tree): New inline
	functions.
	* tree-cfg.c (verify_gimple_assign_ternary): New static function.
	(verify_gimple_assign): Call it.
	* doc/gimple.texi (Manipulating operands): Document GIMPLE_TERNARY_RHS.
	(Tuple specific accessors, subsection GIMPLE_ASSIGN): Document new
	functions for dealing with three-operand statements.
	* tree.c (commutative_ternary_tree_code): New function.
	* tree.h (commutative_ternary_tree_code): Declare it.
	* tree-vrp.c (gimple_assign_nonnegative_warnv_p): Return false for
	ternary statements.
	(gimple_assign_nonzero_warnv_p): Likewise.
	* tree-ssa-sccvn.c (stmt_has_constants): Handle GIMPLE_TERNARY_RHS.
	* tree-ssa-ccp.c (get_rhs_assign_op_for_ccp): New static function.
	(ccp_fold): Use it.  Handle GIMPLE_TERNARY_RHS.
	* tree-ssa-dom.c (enum expr_kind): Add EXPR_TERNARY.
	(struct hashtable_expr): New member ternary in the union.
	(initialize_hash_element): Handle GIMPLE_TERNARY_RHS.
	(hashable_expr_equal_p): Fix indentation.  Handle EXPR_TERNARY.
	(iterative_hash_hashable_expr): Likewise.
	(print_expr_hash_elt): Handle EXPR_TERNARY.
	* gimple-fold.c (fold_gimple_assign): Handle GIMPLE_TERNARY_RHS.
	* tree-ssa-threadedge.c (fold_assignment_stmt): Remove useless break
	statements.  Handle GIMPLE_TERNARY_RHS.

	Backport from GCC 4.6 mainline
	2010-04-22  Bernd Schmidt  <bernds@codesourcery.com>

	PR middle-end/29274
	* tree-pass.h (pass_optimize_widening_mul): Declare.
	* tree-ssa-math-opts.c (execute_optimize_widening_mul,
	gate_optimize_widening_mul): New static functions.
	(pass_optimize_widening_mul): New.
	* expr.c (expand_expr_real_2) <case WIDEN_MULT_EXPR>: New case.
	<case MULT_EXPR>: Remove support for widening multiplies.
	* tree.def (WIDEN_MULT_EXPR): Tweak comment.
	* cfgexpand.c (expand_debug_expr) <case WIDEN_MULT_EXPR>: Use
	simplify_gen_unary rather than directly building extensions.
	* tree-cfg.c (verify_gimple_assign_binary): Add tests for
	WIDEN_MULT_EXPR.
	* expmed.c (expand_widening_mult): New function.
	* passes.c (init_optimization_passes): Add pass_optimize_widening_mul.

2010-11-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to gcc-4_5-branch revision 167090.
	* REVISION: Update subversion id.

2010-11-17  Peter Bergner  <bergner@vnet.ibm.com>

	Merge up to gcc-4_5-branch revision 166873.
	* REVISION: Update subversion id.

2010-11-16  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* builtins.c (expand_builtin_mathfn_ternary): Fix backport issue
	with GCC 4.5 with optab_handler being different in 4.6 than 4.5.

2010-11-15  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2010-11-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/46378
	* config/rs6000/rs6000.c (rs6000_option_override_internal): Don't
	turn on ISA 2.04 rounding instructions for power5.

	* config/rs6000/rs6000.md (friz): Friz is an ISA 2.04 instruciton,
	not ISA 2.02.

	PR target/45585
	* config/rs6000/darwin.md (movdi_low): Allow DImode values to be
	in FPR registers.
	(movdi_low_st): Ditto.

2010-11-15  Peter Bergner  <bergner@vnet.ibm.com>

	Merge up to gcc-4_5-branch revision 166755.
	* REVISION: Update subversion id.

2010-11-08  Pat Haugen  <pthaugen@us.ibm.com>

	Backport from mainline
	2010-11-04  Pat Haugen  <pthaugen@us.ibm.com>

	* final.c (compute_alignments): Compute/free loop info all the time.
	* config/rs6000/rs6000.h (LOOP_ALIGN): Define.
	* config/rs6000/rs6000-protos.h (rs6000_loop_align): Declare.
	* config/rs6000/t-rs6000 (rs6000.o): Add cfgloop.h.
	* config/rs6000/rs6000.c (cfgloop.h): Include.
	(can_override_loop_align): New.
	(rs6000_option_override_internal): Set it.
	(TARGET_ASM_LOOP_ALIGN_MAX_SKIP): Define target hook.
	(rs6000_loop_align): New function.
	(rs6000_loop_align_max_skip): Likewise.

	2010-10-19  DJ Delorie  <dj@redhat.com>

	* doc/tm.texi.in (TARGET_ASM_JUMP_ALIGN_MAX_SKIP): New.
	(TARGET_ASM_LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP): Change to hook.
	(TARGET_ASM_LOOP_ALIGN_MAX_SKIP): Likewise.
	(TARGET_ASM_LABEL_ALIGN_MAX_SKIP): Likewise.
	* doc/tm.texi: Regenerate.
	* targhooks.h (default_label_align_after_barrier_max_skip,
	default_loop_align_max_skip, default_label_align_max_skip,
	default_jump_align_max_skip): Declare.
	* target.def (label_align_after_barrier_max_skip): New.
	(loop_align_max_skip): New.
	(label_align_max_skip): New.
	(jump_align_max_skip): New.
	* system.h (poison): Add those macros to the list.
	* final.c (LABEL_ALIGN_MAX_SKIP): Remove.
	(LOOP_ALIGN_MAX_SKIP): Remove.
	(LABEL_ALIGN_AFTER_BARRIER_MAX_SKIP): Remove.
	(JUMP_ALIGN_MAX_SKIP): Remove.
	(default_label_align_after_barrier_max_skip): New.
	(default_loop_align_max_skip): New.
	(default_label_align_max_skip): New.
	(default_jump_align_max_skip): New.
	(compute_alignments): Use the new hooks.
	(shorten_branches): Likewise.

2010-11-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2010-11-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_emit_minmax): Add support to use
	xsmindp/xsmaxdp on VSX for single precision min/max.
	* config/rs6000/vsx.md (vsx_smaxsf3): Ditto.
	(vsx_sminsf3): Ditto.

2010-10-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2010-10-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/46041
	* tree.h (mode_has_fma): Delete, move to c-cppbuiltins.c.
	* builtins.c (mode_has_fma): Ditto.

	* c-cppbuiltin.c (mode_has_fma): Move function here from
	builtins.c.  Don't use the fma optab, instead just use the
	HAVE_fma* macros, so that __FP_FAST_FMA* will be defined when
	using -save-temps.

2010-10-14  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2010-10-14  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* doc/md.texi (Standard Names): Add fma@var{m}4 documentation.

	* doc/rtl.texi (RTX_TERNARY): Document FMA is ternary.  Add
	SIGN_EXTRACT and ZERO_EXTRACT which were missing.
	(Standard names): Document fma.

	* doc/cpp.texi (Common Predefined Macros): Document __FP_FAST_FMA,
	__FP_FAST_FMAF, __FP_FAST_FMAL.

	* builitns.c (expand_builtin_mathfn_ternary): New function for
	expanding ternary math functions, like fma.
	(expand_builtin): Call it for the fma builtins.

	* simplify-rtx.c (simplify_ternary_operation): Don't simplify FMA
	ops at present.

	* tree-vect-stmts.c (vectorizable_call): Allow 3 argument
	vectorizable functions to support vectorizing fma.

	* config/rs6000/rs6000.c (rs6000_builtin_vectorized_function):
	Handle fma builtins.

	* config/rs6000/vsx.md (UNSPEC_VSX_MADD): Delete.
	(UNSPEC_VSX_MSUB): Ditto.
	(UNSPEC_VSX_NMADD): Ditto.
	(UNSPEC_VSX_NMSUB): Ditto.
	(vsx_fmadd<mode>4*): Rewrite to use FMA rtl in some cases instead
	of UNSPEC. Renumber combiner patterns.
	(vsx_fmsub<mode>4*): Ditto.
	(vsx_fnmadd<mode>4*): Ditto.
	(vsx_fnmsub<mode>4*): Ditto.

	* config/rs6000/altivec.md (UNSPEC_VNMSUBFP): Delete.
	(altivec_vmaddfp): Rewrite to use FMA rtl if no fused
	multiply/add.  Rename combiner pattern, and add TARGET_FUSED_MADD
	test.
	(altivec_vmaddfp_1): Ditto.
	(altivec_vmaddfp_2): Ditto.
	(atlivec_mulv4sf3): Ditto.
	(altivec_vnmsubfp): Ditto.
	(altivec_vnmsubfp_1): Ditto.
	(altivec_vnmsubfp_2): Ditto.
	(altivec_vnmsubfp_3): Delete.

	* config/rs6000/rs6000.md (fmasf4): New insns for fma builtin
	support.
	(fmasf4_fpr): Ditto.
	(fmssf4_fpr): Ditto.
	(fnmasf4_fpr): Ditto.
	(fnmssf4_fpr): Ditto.
	(fmadf4): Ditto.
	(fmadf4_fpr): Ditto.
	(fmsdf4_fpr): Ditto.
	(fnmadf4_fpr): Ditto.
	(fnmsdf4_fpr): Ditto.

	* optabs.h (OTI_fma): Add fma optab.
	(fma_optab): Ditto.

	* genopinit.c (optabs): Set fma optab.

	* rtl.def (FMA): Add FMA rtl.

	* tree.h (mode_has_fma): New function to return if MODE supports a
	fast multiply and add instruction.
	* builtins.c (mode_has_fma): Ditto.

	* c-cppbuiltin.c (builtin_define_float_constants): Emit
	__FP_FAST_FMA, __FP_FAST_FMAF, and __FP_FAST_FMAL if the machine
	has the appropriate fma builtins.
	(c_cpp_builtins): Adjust call to builtin_define_float_constants.

2010-10-07  Peter Bergner  <bergner@vnet.ibm.com>

	* config/rs6000/t-linux64 (MULTILIB_OPTIONS): Remove soft-float support.
	(MULTILIB_DIRNAMES): Likewise.
	(MULTILIB_EXCEPTIONS): Likewise.
	(MULTILIB_EXCLUSIONS): Likewise.
	(MULTILIB_OSDIRNAMES): Likewise.
	(MULTILIB_MATCHES): Likewise.

2010-09-27  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 164656.
	* REVISION: Update subversion id.

2010-09-23  Alan Modra  <amodra@gmail.com>

	* config/rs6000/rs6000.c (toc_relative_ok): Delete.
	(rs6000_emit_move): Use SYMBOL_REF_LOCAL_P instead.

2010-09-08  Peter Bergner  <bergner@vnet.ibm.com>

	* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set
	CMODEL_MEDIUM as default.

2010-09-06  Alan Modra  <amodra@gmail.com>

	* config/rs6000/rs6000.c (toc_relative_ok): New function.
	(offsettable_ok_by_alignment): Don't segfault on NULL DECL_SIZE_UNIT.
	(rs6000_emit_move): Use toc_relative_ok.

	Backport from mainline
	2010-06-18  Alan Modra  <amodra@gmail.com>
	* config/rs6000/linux64.h (SET_CMODEL): Don't expand to empty.

	2010-06-15  Alan Modra  <amodra@gmail.com>
	* doc/invoke.texi: Add mcmodel to powerpc options.
	* configure.ac: Add HAVE_LD_LARGE_TOC test.
	* configure: Regenerate.
	* config.in: Regenerate.
	* config/rs6000/linux64.opt (mcmodel): New.
	* config/rs6000/linux64.h (TARGET_USES_LINUX64_OPT): Define.
	(TARGET_CMODEL, SET_CMODEL): Define.
	(SUBSUBTARGET_OVERRIDE_OPTIONS): Check user -mcmodel choice,
	select CMODEL_MEDIUM default.
	* config/rs6000/rs6000.h (enum rs6000_cmodel): New.
	(TARGET_CMODEL): Define default.
	* config/rs6000/rs6000.c (cmodel): New variable.
	(rs6000_explicit_options): Add cmodel field.
	(rs6000_handle_option): Handle -mcmodel.
	(create_TOC_reference): Add largetoc_reg param.  Generate high,
	lo_sum rtl for CMODEL_MEDIUM and CMODEL_LARGE.  Update all callers.
	(rs6000_delegitimize_address): Recognise new toc reference rtl
	and minimal-toc rtl.
	(rs6000_legitimize_reload_address): Handle new toc references.
	(print_operand_address): Handle legitimate_constant_pool_address_p
	match before lo_sum.
	(rs6000_eliminate_indexed_memrefs): Tidy.
	(rs6000_emit_move): Tweak threshold for inlining constants.
	Keep rs6000_emit_allocate_stack large stack frame offsets
	loaded into r0 inline.
	(rs6000_generate_compare <cmptf_internal2>): One more clobber.
	(tocrel_base, tocrel_offset): New variables.
	(toc_relative_expr_p): Set them here.
	(print_operand_address): Skip over any offset on constant pool
	address.
	(rs6000_output_addr_const_extra): Print tocrel_offset before @toc.
	(rs6000_mode_dependent_address <LO_SUM>): False for new toc refs.
	(offsettable_ok_by_alignment): New function.
	(rs6000_emit_move): Address suitably aligned local symbol_refs
	relative to the toc pointer for -mcmodel=medium.
	(legitimate_constant_pool_address_p): Make param const_rtx.  Add
	strict param.  Allow lo_sum version of addressing.  Verify reg
	used for -mminimal-toc and -mcmodel != small.  Update all callers.
	* config/rs6000/constraints.md: Update for above change.
	* config/rs6000/predicates.md: Likewise.
	* config/rs6000/rs6000.md (tls_gd_aix): Generate -mcmodel=medium/large
	code.
	(tls_gd): Split for -mcmodel=medium/large.
	(tls_gd_high, tls_gd_low): New.
	(tls_ld_aix, tls_ld, tls_ld_high, tls_ld_low): Similarly.
	(tls_got_dtprel, tls_got_dtprel_high, tls_got_dtprel_low): Similarly.
	(tls_got_tprel, tls_got_tprel_high, tls_got_tprel_low): Similarly.
	(largetoc_high, largetoc_low): New.
	(cmptf_internal2): Add clobber.
	* config/rs6000/rs6000-protos.h: Update.

2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline
	2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.opt (-mfriz): New switch to control whether
	to convert (double)(long) into a single FRIZ instruction or not
	when -ffast-math is used.

	* config/rs6000/vsx.md (VSX_DF): New iterator for DF/V2DF modes.
	(vsx_float_fix_<mode>2): Optimize (double)(long) into X{S,V}RDPIZ
	or FRIZ instruction if -ffast-math.
	* config/rs6000/rs6000.md (friz): Ditto.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mfriz.

2010-08-31  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from mainline:
	2010-08-23  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000-protos.h (rs6000_address_for_fpconvert):
	New declaration.
	(rs6000_allocate_stack_temp): Ditto.
	(rs6000_expand_convert_si_to_sfdf): Ditto.

	* config/rs6000/rs6000.c (rs6000_override_options): Adjust long
	line.  Update the options set if power6 or power7 server/embedded
	type options are used.  If we give a warning for no vsx under
	-mcpu=power7 -mno-altivec, mark -mvsx as an explicit option.
	(rs6000_allocate_stack_temp): New function to allocate a stack
	tempoary and adjust the address so it meets either REG+OFFSET or
	REG+REG addressing requirements.
	(rs6000_address_for_fpconvert): Adjust REG+OFFSET addresses so
	that they can be used with the LFIWAX/LFIWZX instrucitons.
	(rs6000_expand_convert_si_to_sfdf): New helper funciton for
	converting signed/unsigned SImode to either SFmode/DFmode.

	* config/rs6000/rs6000.h (TARGET_FCFID): New macros to determine
	whether certain instructions can be generated.
	(TARGET_FCTIDZ): Ditto.
	(TARGET_STFIWX): Ditto.
	(TARGET_LFIWAX): Ditto.
	(TARGET_LFIWZX): Ditto.
	(TARGET_FCFIDS): Ditto.
	(TARGET_FCFIDU): Ditto.
	(TARGET_FCFIDUS): Ditto.
	(TARGET_FCTIDUZ): Ditto.
	(TARGET_FCTIWUZ): Ditto.

	* config/rs6000/rs6000.md (UNSPEC_FCTIW): New unspec constants.
	(UNSPEC_FCTID): Ditto.
	(UNSPEC_LFIWAX): Ditto.
	(UNSPEC_LFIWZX): Ditto.
	(UNSPEC_FCTIWUZ): Ditto.
	(rreg): Use correct constraints.
	(SI_CONVERT_FP): New mode attribute for floating point conversion
	tests.
	(E500_CONVERT): Ditto.
	(lfiwax): New insns for converting from integer to floating point
	utilizing newer instructions.  Attempt to optimize conversions
	that come from memory so that we don't load the value into a GPR,
	spill it to the stack and reload it into a FPR.
	(floatsi<mode>2_lfiwax): Ditto.
	(floatsi<mode>2_lfiwax_mem): Ditto.
	(floatsi<mode>2_lfiwax_mem2): Ditto.
	(lfiwzx): Ditto.
	(floatunssi<mode>2_lfiwzx): Ditto.
	(floatunssi<mode>2_lfiwzx_mem): Ditto.
	(floatunssi<mode>2_lfiwzx_mem2): Ditto.
	(floatdidf2_mem): Ditto.
	(floatunsdidf2_fcfidu): Ditto.
	(floatunsdidf2_mem): Ditto.
	(floatunsdisf2): Ditto.
	(floatunsdisf2_fcfidus): Ditto.
	(floatunsdisf2_mem): Ditto.
	(floatsidf2): Add support for LFIWAX/LFIWZX/FCFIDS/FCFIDU/FCFIDUS.
	Use FCFID on 32-bit hosts that support it.
	(floatsidf2_internal): Ditto.
	(floatunssisf2): Ditto.
	(floatunssidf2): Ditto.
	(floatunssidf2_internal): Ditto.
	(floatsisf2): Ditto.
	(floatdidf2): Ditto.
	(floatdidf2_fpr): Ditto.
	(floatunsdidf2): Ditto.
	(floatdisf2): Ditto.
	(floatdisf2_fcfids): Ditto.
	(floatdisf2_internal1): Ditto.
	(fixuns_truncsfsi2): Delete, merge into common pattern for both
	SF/DF.  Add power7 support.
	(fix_truncsfsi2): Ditto.
	(fixuns_truncdfsi2): Ditto.
	(fixuns_truncdfdi2): Ditto.
	(fix_truncdfsi2): Ditto.
	(fix_truncdfsi2_internal): Ditto.
	(fix_truncdfsi2_internal_gfxopt): Ditto.
	(fix_truncdfsi2_mfpgpr): Ditto.
	(fctiwz): Ditto.
	(btruncdf2): Ditto.
	(btruncdf2_fpr): Ditto.
	(btructsf2): Ditto.
	(ceildf2): Ditto.
	(ceildf2_fpr): Ditto.
	(ceilsf2): Ditto.
	(floordf2): Ditto.
	(floordf2_fpr): Ditto.
	(floorsf2): Ditto.
	(rounddf2): Ditto.
	(rounddf2_fpr): Ditto.
	(roundsf2): Ditto.
	(fix_trunc<mode>si2): Combine SF/DF conversion into one insn.
	(fix_trunc<mode>di2): Ditto.
	(fixuns_trunc<mode>si2): Ditto.
	(fixuns_trunc<mode>di2): Ditto.
	(fctiwz_<mode>): Ditto.
	(btrunc<mode>2): Ditto.
	(btrunc<mode>2_fpr): Ditto.
	(ceil<mode>2): Ditto.
	(ceil<mode>2_fpr): Ditto.
	(floor<mode>2): Ditto.
	(float<mode>2_fpr): Ditto.
	(round<mode>2): Ditto.
	(round<mode>2_fpr): Ditto.
	(fix_trunc<mode>si2_stfiwx): New insn for machines with STFIWX.
	(fixuns_trunc<mode>si2_stfiwx): Ditto.
	(fix_truncdfsi2_internal): Ditto.
	(fix_trunc<mode>si2_mem): Combiner pattern to eliminate storing
	converted value on stack, loaded into GPR, and then stored into
	the final destination.
	(fix_trunc<mode>di2_fctidz): New pattern for targets supporting
	FCTIDZ.
	(lrint<mode>di2): New insn, provide the lrint builtin functions.
	(ftruncdf2): Delete, unused.
	(fix_trunctfsi2_internal): Use gen_fctiwz_df, not gen_fctiwz.

	* config/rs6000/vsx.md (toplevel): Update copyright year.
	(VSr2): Use "ws" contraint for DFmode, not "!r#r".
	(VSr3): Ditto.

	Backport from mainline:
	2010-08-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.opt (-mveclibabi=mass): New option to
	enable the compiler to autovectorize mathmetical functions for
	power7 using the Mathematical Acceleration Subsystem library.

	* config/rs6000/rs6000.c (rs6000_veclib_handler): New variable to
	handle which vector math library we have.
	(rs6000_override_options): Add -mveclibabi=mass support.
	(rs6000_builtin_vectorized_libmass): New function to handle auto
	vectorizing math functions that are in the MASS library.
	(rs6000_builtin_vectorized_function): Call it.

	* doc/invoke.texi (RS/6000 and PowerPC Options): Document
	-mveclibabi=mass.

2010-08-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 163570.
	* REVISION: Update subvesion id.

2010-08-26  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-07-28  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_rtx_costs): Update costs for
	popcount on power7 and parity on power6 systems.
	(rs6000_emit_popcount): Rename gen_popcntwsi2 to gen_popcntddi2.
	(rs6000_emit_parity): Add support for power6 prtyd/prtyw
	instructions.

	* config/rs6000/rs6000.md (UNSPEC_COPYSIGN): New unspec.
	(UNSPEC_PARITY): Ditto.
	(SFDF): New iterator for SF/DF.
	(rreg2): New mode attribute for floating register constraint.
	(TARGET_FLOAT): New mode attribute for whether single/double float
	is supported.
	(popcntd<mode>2): Combine popcntwsi2 and popcntddi2 into one
	pattern.
	(parity<mode>2_cmpb): New insn for parity on power6 and newer
	machines.
	(copysign<mode>3): Combine copysignsf3, copysigndf3 into one
	pattern.  Add support for fcpsgn instruction added in power6.
	(copysignsf3): Delete.
	(copysigndf3): Delete.
	(copysign<mode>3_fcpsgn): New insn to generate fcpsgn.  Use UNSPEC
	instead of if_then_else in RTL to avoid problems with -0.

	* config/rs6000/vsx.md (vsx_copysign<mode>3): Use UNSPEC instead
	of if_then_else to mirror scalar code.
	(vsx_copysignsf3): Delete, use copysign<mode>3_fcpsgn in
	rs6000.md.

	* config/rs6000/vector.md (vector_copysign<mode>3): Use UNSPEC
	instead of if_then_else.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-07-20  Nathan Froyd  <froydnj@codesourcery.com>

	* config/rs6000/rs6000.md (abs<mode>2_isel, nabs<mode>2_isel):
	Reverse sense of if_then_else condition.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-07-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/44877
	* config/rs6000/rs6000.c (rs6000_expand_builtin): Use
	POINTER_TYPE_P instead of checking only for POINTER_TYPE for the
	builtin mask for load/store builtins.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Backport from the mainline:
	2010-06-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	PR target/44218
	* doc/invoke.texi (RS/6000 and PowerPC Options): Delete obsolete
	-mswdiv option.  Add -mrecip, -mrecip=<xxx>, -mrecip-precision options.

	* doc/extend.texi (powerpc builtins): Document vec_recip,
	vec_rsqrt, vec_rsqrte altivec/vsx builtins.

	* config/rs6000/rs60000-protos.h (rs6000_emit_swdiv): New function.
	(rs6000_emit_swrsqrt): Ditto.
	(rs6000_emit_swdivsf): Delete.
	(rs6000_emit_swdivdf): Ditto.
	(rs6000_emit_swrsqrtsf): Ditto.

	* config/rs6000/rs6000.c (rs6000_recip_bits): New global to
	describe the reciprocal estimate support for each type.
	(recip_options): Map -mrecip=<opt> into option bits.
	(gen_2arg_fn_t): New typedef for binary rtx gen function.
	(rs6000_debug_reg_global): If -mdebug=reg, print the state of the
	reciprocal estimate instructions.
	(rs6000_init_hard_regno_mode_ok): Key ws constraint off of the
	debug -mvsx-scalar-memory switch instead of -mvsx-scalar-double.
	Set up rs6000_recip_bits based on the -mrecip* options.  Print the
	cost information if -mdebug=cost or -mdebug=reg.
	(rs6000_override_options): Set -mrecip-precision for power6, and
	power7 machines.  If -mvsx or -mdfp, enable various options that
	came in previous instruction set ISAs, unless the option was
	explicitly disabled by the command line option.  Parse
	-mrecip=<opt> options.
	(rs6000_builtin_vectorized_function): Add support for vectorizing
	the reciprocal estimate builtins and expansions.
	(rs6000_handle_option): Add -mrecip, -mrecip=<opt> support.
	(bdesc_2arg): Add reciprocal estimate builtins.
	(bdesc_1arg): Add reciprocal square root estimate builtins.
	(rs6000_expand_builtin): Rewrite to use a switch statement,
	instead of multiple if/then/elses.  Add reciprocal estimate builtins.
	(rs6000_init_builtins): Create declarations for reciprocal
	estimate builtins.
	(rs6000_preferred_reload_class): Simplify VSX preferences, if scalar
	sized, prefer traditional floating point registers, if integer
	vector types, prefer altivec registers.  Don't actually look at
	the memory address any more.
	(rs6000_builtin_reciprocal): Add new builtin reciprocal estimate
	builtins.
	(rs6000_load_constant_and_splat): New helper function to load up
	the constant for reciprocal estimate instructions.
	(rs6000_emit_madd): New helper function for generating
	multiply/add type instructions, based on the current switches.
	(rs6000_emit_msub): Ditto.
	(rs6000_emit_mnsub): Ditto.
	(rs6000_emit_swdiv_high_precision): Replace rs6000_emit_swdivsf to
	replace a divide with a reciprocal estimate and fixup, adding
	support for machines with high precision and vectors.
	(rs6000_emit_swdiv_low_precision): Rewrite rs6000_emit_swdivdf for
	low precision machines.
	(rs6000_emit_swdiv): New common function to be called to replace a
	division with reciprocal estimate and fixup.
	(rs6000_emit_swrsqrt): Replace rs6000_emit_swrsqrtsf.  Add support
	for double and vector types.  Add support for high precision machines.

	* config/rs6000/rs6000.h (TARGET_FRES): New macro to say whether
	the reciprocal estimate instructions can be generated.
	(TARGET_FRE): Ditto.
	(TARGET_FRSQRTES): Ditto.
	(TARGET_FRSQRTE): Ditto.
	(RS6000_RECIP_*): New macros for reciprocal estimate support.

	* config/rs6000/vector.md (rsqrte<mode>2): New insn for reciprocal
	square root estimate on vectors.
	(re<mode>2): New insn for reciprocal division estimate on vectors.

	* config/rs6000/rs6000-buitlins.def (ALTIVEC_BUILTIN_VRSQRTFP):
	New builtin.
	(ALTIVEC_BUILTIN_VRECIPFP): Ditto.
	(ALTIVEC_BUITLIN_VEC_RE): Ditto.
	(ALTIVEC_BUILTIN_VEC_RSQRT): Ditto.
	(VSX_BUILTIN_RSQRT_V4SF): Ditto.
	(VSX_BUITLIN_RSQRT_V2DF): Ditto.
	(RS6000_BUILTIN_RSQRT): Ditto.
	(ALTIVEC_BUILTIN_VEC_RSQRTE): Denote that the builtin is a
	floating point builtin.

	* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define
	macros __RECIP__, __RECIPF__, __RSQRTE__, __RSQRTEF__,
	__RECIP_PRECISION__ based on the command line switches.
	(altivec_overloaded_builtins): Add reciprocal estimate builtins.

	* config/rs6000/rs6000.opt (-mrecip): Document add support for
	replacing division instructions with reciprocal estimate and fixup.
	(-mrecip=<opt>): New option.
	(-mrecip-precision): Ditto.

	* config/rs6000/vsx.md (UNSPEC_VSX_RSQRTE): Delete.
	(vsx_rsqrte<mode>2): Use UNSPEC_RSQRT not UNSPEC_VSX_RSQRTE.
	(vsx_copysignsf3): If -mvsx, use double precision cpsign on single
	precision scalar.

	* config/rs6000/altivec.md (UNSPEC_RSQRTEFP): Delete.
	(UNSPEC_VREFP): Ditto.
	(altivec_vnmsubfp*): Make altivec nmsub mirror the scalar and VSX
	conterparts with regard to support of -mno-fused-madd and -ffast-math.
	(altivec_vrsqrtefp): Use common UNSPEC to allow scalar/vector
	reciprocal estimate instructions to be generated.
	(altivec_vrefp): Ditto.

	* config/rs6000/rs6000.md (RECIPF): New iterator for reciprocal
	estimate support.
	(rreg): New mode attribute for reciprocal estimate support.
	(recip<mode>3): New insn for division using reciprocal estimate
	and fixup builtins.
	(divide define_split): New define_split to convert floating point
	division to use reciprocal estimate if the user used the
	appropriate options and the split is run when we can add new
	pseudo registers for the fixup.
	(rsqrt<mode>2): New insn for reciprocal square root support.
	(recipsf3): Move into recip<mode>3.
	(recipdf3): Ditto.
	(fres): Use TARGET_FRES.
	(rsqrtsf2): Move into rsqrt<mode>2.
	(rsqrtsf_internal1): Use TARGET_FRSQRTSES.
	(copysignsf3): Add support for VSX.
	(fred): Use TARGET_FRE.
	(fred_fpr): Ditto.
	(rsqrtdf_internal1): New function for frsqrte instruciton.

	* config/rs6000/altivec.h (vec_recipdiv): Define new vector builtin.
	(vec_rsqrt): Ditto.

2010-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone from gcc-4_5-branch, subversion id 163203.
	* REVISION: New file, mark marge point revision.
