2012-07-19  Luis Lozano  <llozano@google.com>

	* libstdc++-v3/libsupc++/vtv_malloc.cc: moved VTV_assert to header
	file
	* libstdc++-v3/libsupc++/vtv_malloc.cc: ditto.
	* libstdc++-v3/libsupc++/vtv_rts.cc (log_register_pairs): Changed to 
	use snprintf insted of sprintf for better protection.
	(__VLTRegisterPair): Be consistent about the use of volatile variable
	* libstdc++-v3/libsupc++/vtv_threaded_hash.cc: Added some assert around
	the code to help with multi-threaded triaging.
	(grow_table): make sure that the update of the "data" field is the last 
	thing we do. This is important for consistency in the multithreaded case.
	(vlt_hash_insert): fix the code to depend only on one field that could have
	a race condition (table->data). The code is supposed to handle the race
	condition. This fixes the last know issue regarding multi-threading.
	
2012-07-18  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc (__VLTRegisterPair):  Add
	static mutex variable, protected, and statically initialize it.
	Add volatile pointer variable to contain address of vtable_map var, to
	force re-evaluation on second read. Lock mutex before calls
	vlt_hash_init_table, and unlock it afterwards, to prevent two threads
	trying to initialize the same vtable map variable at the same time.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.cc (rehash_elements):
	Remove unused parameter new_size. Add format to constant when
	calculating hash mask.
	(grow_table): Reformat comment.  Increase table size by 1, to allow
	for hash mask.  Put hash mask in first element of table.  Add hash
	mask explanatory comments.  Make main table start at second element.
	Add  format to constant when calculating hash mask.
	(vlt_hash_init_table):  Ditto.
	(vlt_hash_insert):  Look for hash mask directly in data table.  Use
	size rather than hash mask to check if table changed.  Enforce FSF
	guidelines: indent curly braces and limit lines to 80 chars. Updated
	some comments.
	(dump_table_to_file):  Read hash mask from table.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.h (struct vlt_hashtable):
	Remove hash_mask field. Make data_size and data volatile.
	(vlt_hash_find): Only access table pointer once (read and store it);
	read hash mask directly from table.

2012-06-27  Luis Lozano  <llozano@google.com>

	* libstdc++-v3/libsupc++/vtv_malloc.cc (obstack_chunk_alloc):
	Fixed merge problem. We were still calling posix_memalign instead
	of calling mmap.

2012-06-25  Luis Lozano  <llozano@google.com>

	* gcc/cp/vtable-class-hierarchy.c (init_functions): Changed
	arguments to VLT_ChangePermission. Instead of passing strings
	like "rw"/"ro", pass integer constants.
	Removed some unneded code.
	(vtv_register_class_hierarchy_information): Changed calls to
	VLT_ChangePermission.
	(vtable_find_or_create_map_decl): Removed the "." from the
	vtable map variables identifiers. This dot confuses the debugger
	when trying to examine these variables.
	Put vtable_map variables into data.rel.ro so that they can be
	protected and unprotected (code written by Caroline)
	* gcc/tree-vtable-varify.c (verify_bb_vtables): Removed the "."
	from the vtable_map variable names.
	* gcc/varasm.c (assemble_variable): For ELF object format,
	mark the vtable_map variables as LINKONCE.
	* libstdc++/libsupc++/Makefile.am: Force a dependency between
	vtv_int.cc and vtv_rts.h
	* libstdc++/libsupc++/Makefile.in: generated file from
	Makefile.am with automake.
	* libstdc++/libsupc++/vtv_init.cc: Added copyright header.
	Include new header "vtv_rts.h", to facilitate calls to
	__VLTChangePermission with simplified arguments.
	* libstdc++/libsupc++/vtv_malloc.cc: Protected static
	variables that are not debug related by putting them into
	data.rel.ro sections.
	(vtv_protect): change name to vtv_malloc_protect.
	(vtv_unprotect): change name to vtv_malloc_unprotect.
	(vtv_malloc_init): moved static variable to global scope to
	put it together with other protect variables.
	* libstdc++/libsupc++/vtv_malloc.h:
	changed name of vtv_protect and vtv_unprotect
	Created macro to put a static variable in .data.rel.ro section
	with name ".data.rel.ro.vtable_vars". Should probably put this
	into a separate base header.
	* libstdc++/libsupc++/vtv_rts.h:
	Protected non debug variables by using new macro for this purpose.
	(dl_iterate_phdr_callback): call back routine that is called by
	dl_iterate_phdr for each segment found in each load module. This
	routine finds the rel.ro segment and protects/unprotects it according
	to the argument passed.
	(vtv_unprotected_vtable_vars): new routine that unprotecs all
	static vars used by vtable verification
	(vtv_protect_vtable_vars): new routine that protects all static
	vars used by vtable verification.
	(__VLTChangePermission): Changed arguments from string and length
	to integer value.
	Modified to add calls to protect static variables used by vtable
	verification on top of protection to malloc'ed memory.
	(__VLTRegisterPair): cleaned up some code.
	* libstdc++/libsupc++/vtv_threaded_hash.cc (rehash_elements):
	removed unnecessary check for NULL.
	(vlt_hash_insert): Modified to fix possible problem in multithreaded
	case.
	Modified to try to get rid of second call to vlt_bucket_find which
	can be expensive. Did this to try to recover start up degradation
	in chrome.
	* libstdc++/libsupc++/vtv_threaded_hash.h (vlt_bucket_find):
	added new argument to avoind searching in the whole list. Only search
	until the point specified by argument.

2012-06-15  Luis Lozano  <llozano@google.com>

	* gcc/tree-vtable-verify.c (verify_bb_vtables): Modify to call
	a different VerifyVtablePointer if compiled with VTV_DEBUG.
	If debug version takes more arguments and prints more debug
	information.
	* libstdc++-v3/libsupc++/vtv_rts.cc
	(__VLTVerifyVtablePointerDebug): New routine. It is actually
	a rename of the old routine. This version is called when
	tree-vtable-verify.c is built with VTV_DEBUG.
	(__VLTVerifyVtablePointer): cleaned up this routine to improve
	performance.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.cc
	(hash_pointer): moved to vtv_threaded_hash.h so that it can be
	inlined
	(bucket_find): moved to vtv_threaded_hash.h so that it can be
	inlined
	(dump_bucket_info): fixed a warning.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.h
	(vlt_hash_pointer): moved here and marked as static inline.
	(vlt_bucket_find): moved here and marked as static inline. Removed
	some unnecessary code.
	(vlt_hash_find): moved here and marked as static inline. cleaned
	up for performance

2012-06-14  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: Added copyright comments.
	(__VLTChangePermission):  Changed type of first parameter from
	"const char *" to "char *".
	* libstdc++-v3/libsupc++/vtv_malloc.h: Added copyright comments.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.cc: Added copyright
	comments.
	(grow_table):  Added comment warning about mutex lock. Removed
	calls to pthread_mutex_lock and pthread_mutex_unlock.  Removed call
	to memset that initialized new_data to zero.
	(access):  Deleted function.
	(vlt_hash_init_table):  Compare size hint to REHASH_LIMIT times
	initial_size rather than just initial size.  Make use of size hint
	to try to create initial table closer to final size (reducing the
	number of rehashes).
	(vlt_hash_insert):  Entirely re-wrote function; removed call to access.
	Updated pthread locking.
	(vlt_hash_find): Entirely re-wrote function; removed call to access.
	Made reads fast and lock-free.
	* libstdc++-v3/libsupc++/vtv_malloc.cc: Added copyright comments.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.h: Added copyright comments.
	* gcc/cp/vtable-class-hierarchy.c
	(vtv_register_class_hierarchy_information): Insert calls to
	__VLTChangePermission directly into initialization routine, if the
	function is going into the preinit array.

2012-06-11  Caroline Tice  <cmtice@google.com>

	* libstdc++-v3/libsupc++/vtv_rts.cc: Modify include to include
	"vtv_threaded_hash.h" instead of "threaded-hash.h".
	(__VLTRegisterPair):  Add size_hint parameter.  Pass size_hint to
	vlt_hash_init_table.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.cc (vlt_hash_init_table):
	Modify to take size_hint parameter.  Use size_hint to possibly enlarge
	initial table size.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.h (vlt_hash_init_table):
	Add int param to function declaration.
	* libstdc++-v3/config/abi/pre/gnu.ver (GLIBCXX_3.4.16) Change _VLT...
	functions to use wildcards, to allow parameters to change without
	affecting the function symbol exports.
	* gcc/cp/vtable-class-hierarchy.c (init_functions):  Add extra int arg
	for vlt_register_pair_fndecl, to allow for new size hint.
	(register_vptr_fields):  Add new hint varable, initialize it to zero, and
	pass it to calls to __VLTRegisterPair.
	(register_other_binfo_vtables):  Ditto.
	(guess_num_vtable_pointers):  New function.
	(register_all_pairs):  Add size_hint local variabler, and initialize
	it with call to guess_num_vtable_pointers.  Pass the size_hint to calls
	to __VLTRegisterPair.

2012-06-08  Luis Lozano  <llozano@google.com>

	* gcc/cp/cp-tree.h: added some prototypes so that we can move some
	code into vtable-class-hierarchy.
	* gcc/cp/decl2.c: made start_objects finish_objects availabe to use
	outside this file
	(cp_write_global_declarations): move the code related to vtable-verify
	to the vtable-class-hierarchy and did some cleanup
	* gcc/cp/vtable-class-hierarchy.c: move the code to generate the
	register_pairs into this file
	(vtv_register_class_hierarchy_information): modified to stop calling
	the routines to protect and unprotect the memory used. These are moved
	to a special object file that will only be called once per module.
	(vtv_generate_init_routine): new routine that contains the code moved
	from decl2.c
	* gcc/temp-libgcc.cc: cleaned up warnings. Changed some names to make
	try to have a uniform coding convention and moved this file into
	libsupc (see below)
	* gcc/vtv_memory_pool/vtvmalloc.c: cleaned up and moved to libsupc
	* gcc/vtv_memory_pool/vtvmalloc.h: fixed LP64 macro name and moved to
	libsupc
	* libstdc++-v3/config/abi/pre/gnu.ver: Added vtable map variable pattern
	to make this symbols extern (available outside the library)
	Also make the runtime support symbols extern.
	* libstdc++-v3/libsupc++/Makefile.am: modified to teach the build system
	about the new files. Special rules to build vtv_init.a library that needs
	to be linked into each load module.
	* libstdc++-v3/libsupc++/Makefile.in: this file automatically generated
	from the Makefile.am by Maketool.
	* libstdc++-v3/libsupc++/vtv_init.cc: new file. Contains two routines that
	have init priorities so that they can be executed before and after the
	init routines that do the calls to RegisterPair.
	* libstdc++-v3/libsupc++/vtv_malloc.cc: relocated here from gcc directory.
	Slightly changed named and fixed a few warnings.
	* libstdc++-v3/libsupc++/vtv_malloc.h: relocated here from gcc directory.
	Slightly changed named and fixed a few warnings.
	* libstdc++-v3/libsupc++/vtv_rts.cc: relocated here from gcc directory.
	previous name was temp-libgcc.c. Fixed some warnings.
	* vtv_threaded_hash.cc: relocated here from gcc directory.
	Slightly changed named and fixed a few warnings.
	* libstdc++-v3/libsupc++/vtv_threaded_hash.h: relocated here from gcc
	directory. Previous name was temp-libgcc.c. Fixed some warnings.

2012-06-08  Caroline Tice  <cmtice@google.com>

	* gcc/cp/vtable-class-hierarchy.c
	(vtv_register_class_hierarchy_information): Use num_vtable_map_nodes
	to decide whether or not to generate vtable verification initialization
	function.

2012-06-07  Caroline Tice  <cmtice@google.com>

	* gcc/cp/vtv_memory_pool/vtvmalloc.c (obstack_chunk_alloc) Change
	to use mmap instead of posix_memalign.  Verify page alignment.

2012-06-04  Caroline Tice  <cmtice@google.com>

	* gcc/cp/vtable-class-hierarchy.c (struct list_node, struct node,
	struct node2): Delete struct definitions.
	(tree-vtable-verify.h): New include statement.
	(struct work_node): New struct defintion.
	(num_classes): New global variable.
	(vlt_class_hierarchy_info, registered_pairs):  Delete global vars.
	(linked_list_insert):  Delete function.
	(binary_tree_insert):  Delete function.
	(binary_tree_find):  Delete function.
	(build_transitive_closure):  Delete function.
	(tree_three_key_insert):  Delete function.
	(vtable_find_map_decl):  Delete function.
	(dump_class_hierarchy_information): Remove parameter; completely
	re-write to use new data structures.
	(register_all_pairs): Remove first parameter; make non-recursive;
	modify to iterate through new data structure.  (Main body of code
	remains the same).  Fix arguments for calls to record_register_pairs
	and register_vptr_fields.
	(add_hierarchy_pair):  New function.
	(add_to_worklist):  New function.
	(find_and_remove_next_leaf_node):  New function.
	(record_register_pairs):  Completely rewrite to use new data
	structures; Remove base_ptr_decl parameter and add base_class
	parameter.
	(register_vptr_fields):  Add base_class parameter.  Fix arguments for
	call to record_register_pairs.
	(find_graph_node):  New function.
	(add_edge_to_graph):  New function.
	(update_class_hierarchy_information):  Remove base_class_ptr_decl
	parameter. Use new data structures; call add_hierarchy_pair instead
	of binary_tree_insert.
	(vtv_register_class_hierarchy_information):  Use new global
	variable, any_verification_calls_generated, to decide whether or not
	to register pairs; remove argument from call to
	dump_class_hierarchy_information; remove vlt_class_hierarchy_info
	from call to register_all_pairs.
	(vtable_find_or_create_map_decl):  Modify to use new hash table for
	accessing *.vtable_map variables; return hash table node rather than
	var decl.
	(vtv_save_base_class_info): Modify to use new hash table data
	structure for vtable_map variables.
	* gcc/tree-vtable-verify.c: Remove comment from top about code
	being contributed by Razya Ladelsky (it was accidentally copied in
	along with the copyright info).
	(tree-vtable-verify.h):  New include statement.
	(num_vtable_map_nodes): New global variable.
	(any_verification_calls_generated):  New global variable.
	(vtbl_map_node_registration_find): New function.
	(vtbl_map_node_registration_insert):  New function.
	(hash_vtable_registration): New function.
	(eq_vtable_registration):  New function.
	(vtbl_map_hash): New static global variable.
	(vtbl_map_nodes): New global variable.
	(vtbl_map_nodes_array):  New global variable.
	(vtbl_map_array_insert): New function.
	(hash_vtbl_map_node):  New function.
	(eq_vtbl_map_node):  New function.
	(vtbl_map_get_node):  New function.
	(vtbl_map_node):  New function.
	(vtable_var_decl_array):  Delete global variable.
	(vtable_var_decl_array_max):  Delete global variable.
	(vtable_var_decl_array_entries):  Delete global variable.
	(find_vtable_map_decl):  Delete function.
	(save_vtable_map_decl):  Delete function.
	(verify_bb_vtables):  Delete unused local variables vtbl_ptr & t;
	modify to use vtbl_map_hash and hash functions to find/store
	vtable_map variables; update any_verification_calls_generated; fix
	formatting (no line longer than 80 chars).
	(build_vtable_verify_fndecl): Fix line formatting so no line is longer
	than 80 chars.
	* gcc/tree-vtable-verify.h: New file.

2012-06-04  Caroline Tice  <cmtice@google.com>

	* gcc/flag-types.h (enum vtv_priority): Add VTV_NO_PRIORITY,
	to allow the flag to be turned off.
	* gcc/common.opt (fvtable-verify):  Set the default
	initialization to VTV_NO_PRIORITY, so the vtable verification
	is not turned on by default.

2012-06-03  Caroline Tice  <cmtice@google.com>

	* gcc/cp/decl2.c (cp_write_global_declarations):  Change vtable
	initializaiton priority to MAX_RESERVED_INIT - 1; Add code to
	put initializer in .preinit_array, if specified by flag.
	* gcc/flag-tyeps.h (enum vtv_priority):  Add new enum.
	* gcc/common.opt (fvtable-verify): Modify flag to take an enum
	argument.  Add the enum information for vtv_priority enums.
	* gcc/varasm.c (assemble_vtv_preinit_initializer):  New function.
	* gcc/output.h (assemble_vtv_preinit_initializer): New function decl.

2012-06-03  Caroline Tice  <cmtice@google.com>

	* gcc/config/i386/i386.c (ix86_vtable_security_code_end): Remove
	function.
	(ix86_code_end):  Remove call to ix86_vtable_security_code_end.

2012-06-03  Caroline Tice  <cmtice@google.com>

	* gcc/temp-libgcc.cc (__VerifyVtablePointer):  Put hack back in
	for the moment, to allow various things to build and run, until
	the more permanent fix is done.

2012-06-01  Luis Lozano  <llozano@google.com>

	* gcc/cgraph.h (debug_varpool_node): add this new routine to be able do
	dump information about a single node in the varpool.
	* gcc/varpool.c (debug_varpool_node): add this new routine to be able do
	dump information about a single node in the varpool.
	* gcc/config/i386/i386.c (ix86_code_end): disable code to generate
	fake entry points for the vtable verification runtime library entry points
	* gcc/cp/vtable-class-hierarchy.c (register_all_pairs): added some debug
	traces
	* gcc/temp-libgcc.cc: made some declarations static.
	(__VerifyVtablePointer): Improved some trace messages
	* gcc/tree-vtable-verify.c (find_vtable_map_decl): Fixed a couple of
	compile-time warnings.
	* libstdc++-v3/config/abi/pre/gnu.ver: added rule so that vtable_map
	variables are not marked as LOCAL.

2012-05-30  Caroline Tice  <cmtice@google.com>

	* gcc/temp-libgcc.cc (debug_hash): New global variable.
	(__VerifyVtablePointer):  Removed hack that assumes pointer is
	valid if data structure is empty. Added call to dump_hashing_statistics
	on first time through, if flag is set.
	* gcc/threaded-hash.c:  (num_tables_allocated, num_buckets_created,
	num_bucket_pointers_allocated, num_slots_filled, num_rehashes,
	num_rehased_elements, size_of_bucket, size_of_potiner) Added global
	variables for collecting statistics and profiling information.
	(bucket_insert): Update num_buckets_created and num_slots_filled.
	(rehash_elements): Update num_rehashes and num_rehashed_elements.
	(grow_table): Update num_bucket_poitners_allocated.
	(vlt_hash_init_table) Update num_tables_allocated and
	num_bucket_pointers_allocated.
	(dump_hashing_statistics): New function.
	* gcc/threaded-hash.h (dump_hashing_statistics): New function decl.

2012-05-23  Luis Lozano  <llozano@google.com>

	* gcc/cp/vtable-class-hierarchy.c: Removed some unneded code for
	handling of template class instances.
	(vtable_find_or_create_map_decl): Moved routine from class.c file
	(vtv_save_base_class_info): Moved routine from class.c file and
	renamed to be more consistent
	* gcc/cp/pt.c: removed unnecessary call to record_template_vtable_info
	* gcc/cp/cp-tree.h: cleaned up prototypes and renamed to all be
	prefixed by "vtv_"
	* gcc/cp/decl2.c: Renamed vtable verification function calls according
	to the changes to cp-tree.h

2012-05-21  Caroline Tice  <cmtice@google.com>

	* gcc/vtv_memory_pool/vtmalloc.c (VTV_malloc_init):  Add code
	to make sure body of function is never executed more than once.

2012-05-21  Caroline Tice  <cmtice@google.com>

	* gcc/vtv_memory_pool/vtvmalloc.c: Add 'extern "C"'.
	Reformat function headers to match GCC coding standards.
	(VTV_protect): Add cast to assignment to ci (to fix G++ compilation
	error).
	(VTV_unprotect): Ditto.
	* gcc/vtv_memory_pool/vtvmalloc.h:  Add 'extern "C"'. Add 'extern'
	keyword.  Add missing 'void' parameters.
	* gcc/temp-libgcc.cc: Remove comments from around vtv stuff. Add
	'extern "C"'.
	* gcc/threaded-hash.c: Add 'extern "C"'. Remove comments from around
	vtv stuff.
	* gcc/threaded-hash.h: Add 'extern "C"'.

2012-05-17  Caroline Tice  <cmtice@google.com>

	* gcc/threaded-hash.c:  New file.
	* gcc/threaded-hash.h:  New file.
	* gcc/temp-libgcc.cc:  Modify to include threaded-hash.h; remove all
	binary tree code; replace binary tree with hash table from
	threaded-hash.

2012-05-16  Luis Lozano  <llozano@google.com>

	* vtv_memory_pool/vtmalloc.h: New header file for the memory pool for
	use by the vtable verification. The pool allocates chunks at page
	boundary so that they can easily be mprotected. This pool also provides
	the functionality to protect/unprotect the entire pool from writing.
	* vtv_memory_pool/vtmalloc.c: New Implementation file for the memory
	pool for the vtable verification.

2012-05-15  Caroline Tice  <cmtice@google.com>

	* gcc/cp/vtable-class-hierarchy.c (struct node2): Rename tree fields,
	add offset field. 'base_id' became 'base_map_var_decl'; 'vptr_id'
	became 'vtable_decl'.
	(tree_two_key_insert):  Renamed function to 'tree_three_key_insert'.
	Added parameter for third key.  Modified code to insert appropriately
	for three keys instead of two.
	(record_register_pairs): Renamed first two parameters, added third
	parameter.  Calculate offset value. Change call to
	tree_two_key_insert to a call to tree_three_key_insert, and pass
	offset as third key.
	(register_vptr_fields):  Remove code that checks already_registered
	for ztt_decl. Add already_registered check inside loop. Add
	val_vtbl_decl and used that for checks and messages instead of
	vtbl_var_decl.
	(register_other_binfo_vtables):  Add already_registered check.
	(register_all_pairs):  Add third argument to call to
	record_register_pairs.
	(linked_list_insert):  Modify to check list for class before
	inserting it; don't insert it if it's already in the list.

2012-05-15  Caroline Tice  <cmtice@google.com>

	* gcc/cp/class.c (vtable_find_or_create_map_decl): Add comments for
	eventually making vtable map variable sections read-only.
	* gcc/cp/vtable-class-hierarchy.c (init_functions):  Fix arg_types for
	both function decls; also add C++-specific characteristics.
	(tree_two_key_insert):  Fix cut/paste bug (was only traversing right
	branches; never left).
	* gcc/temp-libgcc.cc: Remove 'extern "C"'.
	(__VLTRegisterPair):  Change parameter types to void** and void *. Add
	code to cast parameters to desired types inside function.  Fix error
	in format string passed to log_register_pairs.
	(__VerifyVtablePointer):  Change parameter types to void** and void*.
	Add code to case parameters to desired types inside function.
	* gcc/tree-vtable-verify.c (build_vtable_verify_fndecl):  Fix
	arg_types and add C++-specific characteristics to the function decl.
	* config/i386/i386.c (ix86_vtable_security_code_end):  Change names
	for dummy functions to match mangled C++ function names.

2012-05-08  Caroline Tice  <cmtice@google.com>

	* gcc/cp/decl2.c (cp_write_global_declarations):  Check return
	value of register_class_hierarchy_information; only generate
	init function if return value is true.
	* gcc/cp/vtable-class-hierarchy.c (register_all_pairs):  Add
	check to see if binfo has vtable before attempting to call
	build_vtbl_address on it.

2012-05-07  Luis Lozano  <llozano@google.com>

	* class.c (vtable_find_or_create_map_decl): Added this routine to
	find or create the vtable map variable for a record. It checks if
	the record contains a vtable (it is interesting from the point of
	view of vtable verification) before creating the map variable
	(vtable_save_base_class_info): Modified to call the added routine.
	Make sure not to add uninteresting records to the hierarchy information.

2012-05-03  Luis Lozano  <llozano@google.com>

	* gcc/cp/vtable-class-hierarchy.c (register_vptr_fields): Check if a
	VTT is needed and only generate the verification for the refered
	conctruction vtables if needed. There seems to be a bug in GCC where
	some VTTs are being marked as needed so I also had to check for the
	"finalized" flag. This needs to be reviewed.

2012-05-01  Caroline Tice  <cmtice@google.com>

	* gcc/cp/decl2.c (cp_write_global_declarations):  Fix size of buffer
	array.

2012-04-30  Luis Lozano <llozano@google.com>

	* BASE-VER: changed to add "vtable" to version so that we can easily
	identify we are using the correct compiler.
	* gcc/cp/class.c (vtable_save_base_class_info): added this routine
	to walk through BINFO for a record and save into the vtable verification
	class hierarchy information. This was based on code previously in the
	parser.
	* gcc/cp/parser.c (cp_parser_class_specifier_1): removed code to
	call update_class_hierarchy_information. This is not a good point to
	do this since information about the class (in particular templates)
	has not been finalized here.
	* gcc/cp/vtable-class-hierarchy.c (dump_class_hierarchy_information):
	modified dump to also dump the mangled ids.
	(list_append): make sure to compare entries using mangled ids.
	(binary_tree_find_template): fixed a memory leak
	(build_transitive_closure): fixed a memory leak
	(register_vptr_fields): temporarily disable verification of
	construction vtables. This is causing undef symbols in the compilation
	of omnetpp and soplex.
	(register_other_binfo_vtables): make sure this code does not go over
	the construction vtables.
	* gcc/temp-libgcc.cc: Added code to print stack traces

2012-04-14  Caroline Tice  <cmtice@google.com>

	* gcc/cp/decl2.c (cp_write_global_declarations):  Call
	compute_class_hierarchy_transitive_closure before calling
	cgraph_finalize_compilation_unit.
	* gcc/cp/parser.c (cp_parser_class_specifier_1):  Modify
	to handle unistantiated templates as base classes (added
	the base_is_template code and checks).
	* gcc/cp/vtable-class-hierarchy (compute_hierarchy_transitive_closure,
	compute_class_hierarchy_transitive_closure): Removed the 'static'
	function qualifier and re-named compute_hierarchy_transitive_closure
	to compute_class_hierarchy_transitive_closure.
	(binary_tree_find_template):  New function, to look up template base
	class hierarchies in the vlt_class_hierarchy_info data structure.
	(build_transitive_closure):  Add code to deal with an uninstantiated
	template class being in the middle of a transitive closure.
	(template_list_search):  Use the mangled type name when looking up
	template hierarchy data.
	(register_all_pairs): Make sure binfo is non-null before calling
	BINFO_VTABLE on it.
	(record_template_vtable_info): Use the mangled type name when storing
	the template hierarchy data.
	* gcc/cp/cp-tree.h (compute_class_hierarchy_transitive_closure):
	Add extern function decl.

2012-04-13  Caroline Tice  <cmtice@google.com>

	Code cleanup and hack removal.
	* gcc/cp/vtable-class-hierarchy.c (struct list_node2): Delete struct
	definition.
	(struct node): Rename field to ptr_decl_or_template_type_id.
	(struct node3): Delete struct definition..
	(get_class_name): Delete function.
	(template_list_insert): Delete function.
	(template_info_tree_insert):  Remove vtable_decl parameter.  Modify to
	use struct node rather than struct node3.
	(template_list_search): Change return type to list_node* instead of
	list_node2*.
	(template_tree_find): Ditto.  Also change type of first parameter to
	node* instead of node3*.  Replace field ptr_decl with
	ptr_decl_or_template_type_id.
	(vlt_template_vptr_info): Replace struct node3 with struct node.
	(register_vptr_fields):  Remove expr_stmt.
	(dump_class_hierarchy_information):  Replace references to field
	'ptr_decl' with 'ptr_decl_or_template_type_id'.
	(binary_tree_find): Ditto.
	(build_transitive_closure): Ditto.
	(binary_tree_insert): Ditto.
	(register_all_pairs): Ditto. Also, remove dead variables expr_stmt and
	class_name. Change handling of instantiated template types (add them
	to current type list rather than dealing with them separately).  Use
	CLASSTYPE_VTABLES to find vtable var decls.
	(register_class_hierarchy): Delete dead variable expr_stmt.
	(record_template_vtable_info): Remove code to find vtable var decl
	here. Don't pass vtable var decl to template_info_tree_insert.

2012-04-12  Caroline Tice <cmtice@google.com>

	* gcc/cp/vtable-class-hierarchy.c (register_all_pairs)  Modify
	function to traverse entire list of instantiated templates, if
	one is found.
	* gcc/tree-vtable-verify.c (verify_bb_vtables) Make sure vtbl
	is non-NULL before trying to access stuff through it.

2012-04-12  Caroline Tice <cmtice@google.com>

	* gcc/gp/decl2.c (cp_write_global_declarations):  Fix conversion
	from directory name to function name, replacing '/' and '+' with
	underscores.
	* gcc/cp/vtable-class-hierarchy.c (register_other_binfo_vtables):
	New function (to recursively find offset virtual tables from
	multiple inheritance).
	(register_all_pairs): Add call to register_other_binfo_vtables.

2012-04-11  Luis Lozano  <llozano@google.com>

	* gcc/cp/vtable-class-hierarchy (register_all_pairs): Fixed regression
	in handling of virtual bases.
	* gcc/temp-libgcc.cc (__VerifyVtablePointer): Added printing of backtrace
	on failure. Also printed vtable pointer in case of failed lookup.

2012-04-07  Caroline Tice <cmtice@google.com>

	* gcc/cp/init.c (build_vtbl_address):  Remove static function
	decl.  Remove 'static' qualifier from function definition.
	* gcc/cp/pt.c (instantiate_class_template):  Add call to
	record_template_vtable_info, guarded by flag_vtable_verify.
	* gcc/cp/decl2.c (start_objects):  Change 'type' from a
	static array of chars to a char *.  Add call to xmalloc for it.
	Call 'free' for it when done.
	(finish_objects):  Check to see if constructor is for vtable
	map; if so, store the function decl in vtable_verify_init_fn.
	(cp_process_pending_declarations):  Move code that generates
	vtable verify constructor function from here to after call to
	cgraph_finalize_compilation_unit in cp_write_global_declarations.
	Add calls to gimplify_function_tree,
	cgraph_add_new_function, and cgraph_process_new_functions.
	(cp_write_global_declarations):  Insert code, after call to
	cgraph_finalize_compilation_unit, to generate vtable verify
	constructor function.  Add calls to gimplify_function_tree,
	cgraph_add_new_function, and cgraph_process_new_functions.  Also,
	add the last 50 chars of the source directory tree to the name of
	the function, to avoid filename conflicts (from files with the
	same names in different directories).
	* gcc/cp/vtable-class-hierarchy.c (struct list_node2): New type decl.
	(tree-iterator.h) New include statement.
	(struct node3): New type decl;
	(get_class_name): New function.
	(template_list_insert): New function.
	(template_info_tree_insert): New function.
	(template_list_search): New function.
	(template_tree_find): New function.
	(vlt_template_vptr_info): New data structure.
	(init_functions):  Removed commented out code.
	(build_transitive_closure): Free var_id_name when done with it.
	(register_vptr_fields):  Add new parameter 'body'. Remove calls to
	build_stmt and add_stmt.  Call append_to_statement_list to append
	the call_expr directly to body.
	(register_all_pairs): Add new parameter 'body'.  Remove calls to
	build_stmt and add_stmt.  Call append_to_statement_list to append
	the call_expr directly to body.  Check to see if class_type is
	a template class, and if so, look for the vtable in the template list.
	Call build_vtbl_address on the vtable var decl to find the vtable
	pointer, rather than try to reconstruct it ourselves.
	(register_class_hierarchy_information):  Remove calls to build_stmt
	and add_stmt.  Use append_to_statement_list to add call_exprs
	directory to body.
	(record_template_vtable_info):  New function.
	* gcc/cp/cp-tree.h (build_vtbl_address): Add extern function decl.
	(record_template_vtable_info): Add extern function decl.

2012-04-01  Caroline Tice <cmtice@google.com>

	* gcc/tree.h (save_vtable_map_decl): New extern function decl.
	* gcc/cp/Make-lang.in (CXX_AND_OBJCXX_OBJS): Add
	vtable-class-hierarchy.o to list of C++ language-specific object
	files.
	(vtable-class-hierarchy.o): Add rule for building
	vtable-class-hierarchy.o
	* gcc/cp/decl2.c (start_objects): Add third parameter, for
	function name extension.
	(generate_ctor_or_dtor_function): Add empty string as third
	argument to calls to start_objects.
	(cp_process_pending_declarations): Add code to generate special
	constructor function with high initialization priority for special
	vtable verification calls, if the flag_vtable_verify is set.
	* gcc/cp/parser.c (cp_parser_class_specifier_1): If
	flag_vtable_verify is set and the current class has base classes,
	generate the
	*.vtable_map variables for any base classes that don't already
	have it and add the base class/derived class pair to the class
	hierarchy information.
	* gcc/cp/vtable-class-hierarchy.c: New file.
	* gcc/cp/mangle.c (get_mangled_id): New function. Copied from PPH
	work of Lawrence Crowl and Diego Novillo.
	(mangle_decl): Call get_mangled_id rather than doing work directly
	here. Copied from PPH work of Lawrence Crowl ande Diego Novillo.
	* gcc/cp/cp-tree.h (get_mangled_id): New function decl.
	(register_class_hierarchy_information): New function decl.
	(update_class_hierarchy_information): New function decl.
	(vtable_find_map_decl):  New function decl.
	* gcc/temp-libgcc.cc: New file.
	* gcc/tree-vtable-verify.cc: (cp/cp-tree.h): New include statement.
	(build_vtable_verify_fndecl):  Renamed function (eliminated 's' from
	the end).
	(my_build1):  New function.
	(my_get_vtbl_decl_for_binfo): Renamed function (old name was
	get_vtbl_decl_for_binfo).
	(vtable_var_decl_array): New global variable.
	(vtable_var_decl_array_max): New global variable.
	(vtable_var_decl_array_entries): New global variable.
	(find_vtable_map_decl): New function.
	(save_vtable_map_decl): New function.
	(verify_bb_vtables): Fix a few bugs, and add some debugging parameters
	for calls to __VerifyVtablePointer.
	(build_vtable_verify_fndecl): Remove unnecessary variables.
	* gcc/config/i386/i386.c (ix86_vtable_security_code_end):  Modify to
	output dummy versions of __VLTChangePermission and __VLTRegisterPair
	in addition to __VerifyVtablePointer. Also add code to generate
	x86_64 assembly, instead of i386, if it's appropriate.

2012-02-16  Caroline Tice <cmtice@google.com>

	* gcc/timevar.def (TV_VTABLE_VERIFICATION): New timevar definition.
	* gcc/tree-vtable-verify.c: New file defining vtable verification pass.
	* gcc/common.opt (fvtable-verify): New flag, to control vtable
	verification pass.
	* gcc/Makefile.in (OBJS-common): Add tree-vtable-verify.o to list.
	(tree-vtable-verify.o):  Add rule.
	* gcc/passes.c (init_optimization_passes):  Add pass_vtable_verify.
	* gcc/config/i386/i386.c (ix86_vtable_security_code_end):  New
	function to generate weak version of __VerifyVtablePointer.
	(ix86_code_end): Add call to ix86_vtable_security_code_end.
	* tree-pass.h (pass_vtable_verify): New extern declaration for pass.
