2013-01-08  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vsx.md (vsx_concat_<mode>): Use vec_concat instead
	of unspec.  Use preferred register constraint for type.

2013-01-07  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Restore
	code that restricts adding DF/DD reload patterns to when we are
	using -mvsx-scalar-double.
	(rs6000_legitimate_offset_address_p): Replace code that was adding
	-mvsx-timode checks to original code.  If VSX memory, only allow
	REG+REG addressing.

2013-01-04  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Drop
	initializing DImode for reload help, as it causes more bugs.
	(rs6000_secondary_reload_trace): Create a more standard insn for
	tracing instead of doing 3 debug_rtx's.  Call it from
	rs6000_secondary_reload_inner if -mdebug=addr.
	(rs6000_secondary_reload_final): Move most of the heavy lifting to
	rs6000_secondary_reload_trace.  Add line number argument.
	(rs6000_secondary_reload_inner): Make all assertings and tracing
	call either rs6000_secondary_reload_trace or
	rs6000_secondary_reload_final as appropriate.

2013-01-03  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/vector.md (VEC_R): Add 32/64-bit scalar types to
	the reload functions.
	(mul<mode>3): Use VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode instead
	of separate calls to VECTOR_UNIT_ALTIVEC_P or VECTOR_UNIT_VSX_P.
	(vcond<mode><mode>): Likewise.
	(vcondu<mode><mode>): Likewise.
	(vector_gtu<mode>): Likewise.
	(vector_geu<mode>): Likewise.

	* config/rs6000/constraints.md (wg constraint): Add constraints to
	allow collapsing VSX/power6/non-VSX 32/64-bit floating point
	moves.
	(wl constraint): Likewise.
	(wx constraint): Likewise.
	(wz constraint): Likewise.

	* config/rs6000/predicates.md (easy_fp_constant): Under VSX, use
	XOR for more types.

	* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Allow TImode
	in VSX registers if -mvsx-timode.
	(rs6000_debug_reg_global): If -mdebug=reg, print new constraints,
	and whether LRA is enabled.
	(rs6000_init_hard_regno_mode_ok): Setup wg, wl, wx, and wz
	constraints depending on the switches.  Drop the checks against
	TARGET_VSX_SCALAR_MEMORY when setting up the reload functions
	for DFmode.  Setup VSX reload functions for DImode, DDmode.
	(rs6000_option_override_internal): If -mdebug=reg, print target
	options before/after changing the defaults.
	(reg_offset_addressing_ok_p): If power7, turn off special hack for
	allocating SDmode stack slot, since movsd can now use the power7
	instructions to reload SDmode values.
	(rs6000_emit_move): Likewise.
	(rs6000_secondary_memory_needed_rtx): Likewise.
	(rs6000_alloc_sdmode_stack_slot): Likewise.
	(rs6000_legitimate_offset_address_p): Disable TImode if
	-mvsx-timode.
	(rs6000_secondary_reload): Spacing/comment.
	(rs6000_cannot_change_mode_class): Likewise.
	(rs6000_preferred_reload_class): Allow XOR to initialize 0.0 for
	more types.  If scalar values, prefer the tradational floating
	point values for reloaded registers over VSX registers, so we can
	use offset+register addressing.
	(rs6000_secondary_reload_fail): Give a better error message dump
	if rs6000_secondary_reload_inner fails.
	(rs6000_secondary_reload_inner): Call rs6000_secondary_reload_fail
	if necessary.  Tighten up altivec memory loads with & -16.  Add
	support for legacy floating point loads/stores.

	* config/rs6000/rs6000.h (TARGET_NO_SDMODE_STACK): New macro to
	say we don't need the special SDmode stack slot.
	(enum r6000_reg_class_enum): Add wg, wl, wx, wz constraints.

	* config/rs6000/dfp.md (movsd): Consolate decimal and binary
	floating point moves to use RTL iterators.  Also consolate power6,
	power7, and traditional moves into few insns, using new register
	constraints.
	(movsd splitter): Likewise.
	(movsd_hardfloat): Likewise.
	(movsd_softfloat): Likewise.
	(movdd): Likewise.
	(movdd splitter): Likewise.
	(movdd_hardfloat32): Likewise.
	(movdd_softfloat32): Likewise.
	(movdd_hardfloat64_mfpgpr): Likewise.
	(movdd_hardfloat64): Likewise.
	(movdd_softfloat64): Likewise.
	* config/rs6000/rs6000.md (FMOVE32): Likewise.
	(FMOVE64): Likewise.
	(FMOVE64X): Likewise.
	(fmove_ok): Likewise.
	(real_value_to_target): Likewise.
	(f32_lr): Likewise.
	(f32_lm): Likewise.
	(f32_li): Likewise.
	(f32_sr): Likewise.
	(f32_sm): Likewise.
	(f32_si): Likewise.
	(wd): Likewise.
	(movsf): Likewise.
	(movsf splitters): Likewise.
	(movsf_hardfloat): Likewise.
	(movsf_softfloat): Likewise.
	(movdf): Likewise.
	(movdf splitters): Likewise.
	(movdf_hardfloat32): Likewise.
	(movdf_softfloat32): Likewise.
	(movdf_hardfloat64_mfpgpr): Likewise.
	(movdf_hardfloat64): Likewise.
	(movdf_softfloat64): Likewise.
	(movdi_mfpgpr): Likewise.
	(movdi_internal64): Likewise.
	(reload_<mode>_store): Move later in the file, so it is near other
	reload patterns, and not in the middle of the floating point
	moves.
	(reload_<mode>_load): Likewise.

2013-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Merge up to 194809.
	* REVISION: Update subversion id.

2013-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md: Update copyright year.
	* config/rs6000/rs6000.c: Likewise.
	* config/rs6000/rs6000.h: Likewise.
	* config/rs6000/rs6000.md: Likewise.
	* config/rs6000/rs6000.opt: Likewise.
	* config/rs6000/vsx.md: Likewise.
	* doc/invoke.texi: Likewise.

2013-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/rs6000.c (rs6000_cannot_change_mode_class): Don't
	allow TImode to change mode with TFmode/TDmode if -mvsx-timode.

	* config/rs6000/vsx.md (vsx_movti_64bit): Split vsx_movti into
	32-bit and 64-bit versions.
	(vsx_movti_32bit): Likewise.
	(vsx_movti): Delete.
	(vsx_one_cmpl<mode>2): Drop ? in second operand.

	* config/rs6000/rs6000.md (movti_string): Disable if
	-mvsx-timode.

	* doc/invoke.texi (IBM RS/6000 and PowerPC Options): Document
	-mvsx-timode and -mno-vsx-timode.

2012-12-18  Michael Meissner  <meissner@linux.vnet.ibm.com>

	* config/rs6000/constraints.md (wt constraint): New constraint for
	TImode variables in VSX registers.
	* doc/md.texi (PowerPC constraints): Document wt.

	* config/rs6000/rs6000.opt (-mvsx-timode): New switch, enable
	using TImode in VSX registers.

	* config/rs6000/rs6000.c (rs6000_hard_regno_nregs_internal):
	If/when TDmode and TFmode variables are allowed in VSX registers,
	note that they span two registers.
	(rs6000_debug_reg_global): Print out wt constraint register class,
	and print out whether a vector reload in/out function was
	defined.
	(rs6000_init_hard_regno_mode_ok): If -mvsx-timode, allow TImode in
	VSX registers.  Set up wt constraint.
	(rs6000_option_override_internal): Don't allow -mvsx-timode
	without -mvsx or -mcpu=power7.
	(reg_offset_addressing_ok_p): If -mvsx-timode, restrict TImode
	addressing to reg+reg.
	(rs6000_legitimate_offset_address_p): Eliminate checks from
	reg+reg for DF scalars if -mvsx-scalar-memory.  If -mvsx-timode,
	make TImode subject to the same restrictions as VSX.
	(rs6000_legitimize_reload_address): Likewise.
	(rs6000_legitimate_address_p): Likewise.
	(rs6000_secondary_reload): Likewise.
	(rs6000_emit_move): Allow TImode indexed memory references if
	-mvsx-timode.
	(rs6000_secondary_reload_inner): Remove leftover VSX PRE_MODIFY
	support.  For legacy floats, allow 4 byte addresses.

	* config/rs6000/vsx.md (VSm): Change TImode to us lxvd2x/stxvd2x.
	(VSs): Use dp for TImode, not sp.
	(VSr): Use wt constraint instead of wd for TImode.
	(VSv): Delete TImode.
	(vsx_movti): Cosmetic change.
	(vsx_store_<mode>): Use more correct VSX_M mode iterator.
	(vsx_and<mode>3): Drop ? in 2nd/3rd operands.
	(vsx_ior<mode>3): Likewise.
	(vsx_xor<mode>3): Likewise.

	* config/rs6000/rs6000.h (enum reg_class_enum): Add wt
	constraint.

	* config/rs6000/rs6000.md (movti splitters): Allow movti splitters
	if VSX.

2012-12-17  Michael Meissner  <meissner@linux.vnet.ibm.com>

	Clone branch from subversion id 194563.
	* REVISION: New file.

