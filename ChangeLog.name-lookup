2017-09-13  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r252087.

2017-09-06  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r251808.

	Merge trunk r251780.

2017-09-05  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r251721.

	gcc/cp/
	* cp-tree.h (DECL_TEMPLATE_CONV_FN_P): Delete.
	* pt.c (push_template_decl_real): Don't set it.

	gcc/cp/
	* cp-tree.h (DECL_CONV_FN_P): No need to check DECL_NAME nullness.
	(DECL_CONV_FN_TYPE): FN must be a conv op.

	gcc/cp/
	* class.c (add_method): Move conv_op marker handling to ...
	* name-lookup.c (find_method_slot): ... here.

	gcc/cp/
	* name-lookup.h (get_class_binding_direct, get_class_binding):
	Merge want_type and restricted args.
	* name-lookup.c (get_class_binding_direct): Merge want_type and
	restricted args.  Adjust.
	(get_class_binding): Adjust for argument merge.
	* decl.c (reshape_init_class): Adjust get_class_binding call.
	* search.c (lookup_field_r): Adjust get_class_binding call.

	Kill CLASSTYPE_SORTED_FIELDS
	gcc/cp/
	* cp-tree.h (struct lang_type): Delete sorted_fields.
	(CLASSTYPE_SORTED_FIELDS): Delete.
	gcc/c-family/
	* c-common.c (field_decl_cmp, resort_data,
	resort_field_decl_cmp, resort_sorted_fields): Move ...
	* c-common.h (field_decl_cmp, resort_sorted_fields): ... and ...
	(struct sorted_fields_type): ... and to ...
	gcc/c/
	* c-decl.c (field_decl_cmp, resort_data,
	resort_field_decl_cmp, resort_sorted_fields): Here and ...
	* c-lang.h (struct sorted_fields_type): here..

	Merge TYPE_FIELDS to METHOD_VEC
	gcc/cp/
	* name-lookup.c (method_vec_binary_search,
	method_vec_linear_search): New.  Broken out of ...
	(legacy_fn_member_lookup): ... here.  Delete.
	(fields_linear_search): New.  Broken out of ...
	(legacy_nonfn_member_lookup): ... here.  Delete.
	(find_method_slot): Call set_class_bindings if adding method_vec
	to completed class.
	(get_class_binding_direct): Use new searching functions.
	(method-name_cmp): Order identically named decls.
	(resort_method_name_cmp): Adjust.
	(sorted_fields_type_new): Delete.
	(count_fields): Rename to ...
	(count_class_fields): ... here.  Take RECORD_TYPE and adjust.
	(add_fields_to_record_type): Rename to ...
	(method_vec_append_class_fields): ... here.  Take RECORD_TYPE and
	adjust.
	(add_enum_fields_to_record_type): Rename to ...
	(method_vec_append_enum_values): ... here.  Adjust.
	(method_vec_dedup): New.
	(set_class_bindings): Reimplement.
	(insert_late_enum_def_bindings): Reimplement.
	* name-lookup.h (lookup_field_1, lookup_fnfields_slot,
	lookup_fnfields_slot_nolazy): Delete.
	(get_class_binding_direct, get_class_binding, find_method_slot): Move.
	(set_class_bindings): Add EXTRA parm.
	* class.c (warn_hidden): Cope with non-functions.
	* decl.c (cxx_init_decl_processing): Make conv-op marker function
	not so bogusly typed.

2017-09-01  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r251609.

	gcc/cp/
	* class.c (warn_hidden): Clean up.
	(clone_constructors_and_destructors): No need to check METHOD_VEC.
	(type_has_user_provided_constructor): Likewise.
	(type_has_user_provided_or_explicit_constructor): Likewise.
	(classtype_has_move_assign_or_move_ctor_p): Likewise.
	(finish_struct): Adjust comment.

	gcc/cp/
	* cp-tree.h (resort_type_method_vec): Move declaration to ...
	* name-lookup.h (resort_type_method_vec): ... here.
	* class.c (finish_struct_1, finish_struct): Adjust
	set_class_bindings call.  Don't call finish_struct_methods.
	(resort_data, method_name_cmp, resort_method_name_cmp,
	resort_type_method_vec, finish_struct_methods): Move to ...
	* name-lookup.c (resort_data, method_name_cmp,
	resort_method_name_cmp, resort_type_method_vec): ... here.
	(set_class_bindings): Lose fields arg.  Swallow finish_struct_methods.

	Merge trunk r251592.

	gcc/cp/
	* class.c (finish_struct): Also call set_class_bindings in
	template case.

2017-08-31  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* class.c (finish_struct_1): Move finish_struct_methods and
	set_class_bindings to just after layout.
	(finish_struct): Process using_decls before setting template
	pseudo-size. Call finish_struct_methods immediately after.

	gcc/cp/
	* class.c (finish_struct_methods): Don't warn about private bases
	here.
	(finish_struct_1): Move set_class_bindings as late as possible.
	(finish_struct): Warn about overly private bases after completing
	the type.

	gcc/cp/
	* class.c (finish_struct_methods): Move DECL_IN_AGGR_P frobbing to
	finish_struct_1.
	(check_bases_and_members): Move finish_struct_methods to ...
	(finish_struct_1): ... here.  Frob DECL_IN_AGGR_P.
	(unreverse_member_declarations): Remove unneeded if.
	* method.c (lazily_declare_fn): Adjust comment.
	* pt.c (do_class_deduction): No need to check CLASSTYPE_METHOD_VEC.
	* tree.c (type_has_nontrivial_copy_init): Likewise.

	gcc/cp/
	* class.c (add_method): Use find_method_slot.
	* name-lookup.h (find_method_slot): Declare.
	* name-lookup.c (legacy_fn_member_lookup): Allow NULL slot in
	incomplete type.
	(find_method_slot): Use.
	* decl.c (grok_special_member_properties): Check conv-op here.

	Restore get_class_binding name.
	gcc/cp/
	* name-lookup.c (get_class_value, get_class_value_direct): Rename
	to ...
	(get_class_binding, get_class_binding_direct): ... here.
	* name-lookup.h (get_class_value, get_class_value_direct): Rename
	to ...
	(get_class_binding, get_class_binding_direct): ... here.
	* call.c (builduser_type_conersion_1): Rename calls.
	(has_trivial_copy_assign_p, has_trvial_copy_p): Likewise.
	* class.c (vbase_has_user_provided_move_assign,
	classtype_has_move_assign_or_move_ctor_p, type_build_ctor_call,
	type_build_dtor_call): Likewise.
	* cp-tree.h (CLASSTYPE_CONSTRUCTORS, CLASSTYPE_DESTRUCTOR): Likewise.
	* decl.c (reshape_init_class, register_dtor_fn): Likewise.
	* decl2.c (check_classfn): Likewise.
	* pt.c (retrieve_specialization,
	check_explicit_specialization): Likewise.
	* search.c (lookup_field_r, look_for_overrides_here,
	lookup_conversions_r): Likewise.
	* semantics.c (classtype_has_nothrow_assign_or_copy_p): Likewise.

	gcc/cp/
	* name-lookup.c (insert_late_enum_def_bindings): Swap args.
	* decl.c (finish_enum_value_list): Adjust
	insert_late_enum_def_bindings call.

	Restore lang_type::sorted_fields
	gcc/c/
	* c-decl.c (field_decl_cmp, resort_data,
	resort_field_decl_cmp, resort_sorted_fields): Moved back to ...
	* c-lang.h (struct sorted_fields_type): ...
	gcc/c-family
	* c-common.c (field_decl_cmp, resort_data,
	resort_field_decl_cmp, resort_sorted_fields): ... here ...
	* c-common.h (field_decl_cmp, resort_sorted_fields): ... here ...
	(struct sorted_fields_type): ... here.
	gcc/cp/
	* cp-tree.h (struct lang_type): Restore sorted_fields.
	(CLASSTYPE_SORTED_FIELDS): Restore.
	(CLASSTYPE_BINDINGS): Delete.
	* decl.c (finish_enum_value_list): Adjust
	insert_late_enum_def_bindings call.
	* name-lookup.c (legacy_nonfn_member_lookup): Restore binary
	search.
	(get_class_value_direct): Remove binding table code.
	(sorted_fields_type_new, count_fields, 
	add_fields_to_record_type, add_enum_fields_to_record_type): Restore.
	(add_class_member, add_class_members): Delete.
	(set_class_bindings, insert_late_enum_def_bindings): Adjust.

	Merge trunk r251560.

2017-08-29  Nathan Sidwell  <nathan@acm.org>

	Anonymous namespace has NULL name
	gcc/cp/
	* cp-tree.h (default_hash_traits <lang_identifier *>): Permit
	NULL.
	* name-lookup.c (do_pushdecl): Push NULL-named namespace.
	(do_push_nested_namespace): Adjust.
	(push_namespace): Push anonymous namespace as NULL name.

2017-08-28  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r251385.

	gcc/cp/
	* name-lookup.c (do_class_using_decl): Simplify.

2017-08-25  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.h (lookup_class_member): Delete.
	* name-lookup.c (lookup_class_member): Merge into ...
	(get_class_value): ... here.
	(legacy_nonfn_member_lookup): Don't call it.

	Merge trunk r251351.

2017-08-24  Nathan Sidwell  <nathan@acm.org>

	Rename get_class_binding -> get_class_value
	* name-lookup.c (get_class_binding, get_class_binding_direct): Rename
	to ...
	(get_class_value, get_class_value_direct): ... here.
	* name-lookup.h (get_class_binding, get_class_binding_direct): Rename
	to ...
	(get_class_value, get_class_value_direct): ... here.
	* call.c (builduser_type_conersion_1): Rename calls.
	(has_trivial_copy_assign_p, has_trvial_copy_p): Likewise.
	* class.c (vbase_has_user_provided_move_assign,
	classtype_has_move_assign_or_move_ctor_p, type_build_ctor_call,
	type_build_dtor_call): Likewise.
	* cp-tree.h (CLASSTYPE_CONSTRUCTORS, CLASSTYPE_DESTRUCTOR): Likewise.
	* decl.c (reshape_init_class, register_dtor_fn): Likewise.
	* decl2.c (check_classfn): Likewise.
	* pt.c (retrieve_specialization,
	check_explicit_specialization): Likewise.
	* searh.c (lookup_field_r, look_for_overrides_here,
	lookup_conversions_r): Likewise.
	* semantics.c (classtype_has_nothrow_assign_or_copy_p): Likewise.

2017-08-23  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.c (extract_conversion_operator,
	legacy_fn_member_lookup, legacy_nonfn_member_lookup,
	get_class_binding_direct, get_class_binding, lookup_class_member,
	add_class_member, add_class_members, set_class_bindings,
	insert_late_enum_def_bindings): Move earlier to match trunk.

	Merge trunk r251313.

	gcc/cp/
	* name-lookup.h (get_class_binding_direct, get_class_binding): Add
	temporary restricted parm.
	* name-lookup.c (get_class_binding_direct): Replace fn_only with
	restricted.
	(get_class_binding): Adjust.
	* decl.c (reshape_init_class): get_class_binding is differently
	restricted.
	* search.c (lookup_field_r): get_class_binding is not restricted.
	gcc/testsuite/
	* g++.dg/cpp0x/decltype9.C: Revert, not ready yet.

	gcc/cp/
	* semantics.c (finish_member_declaration): Move USING_DECL check.
	Always set lang_cplusplus.  Commonize decl linking.

2017-08-22  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* name-lookup.c (legacy_fn_member_lookup): Move conv_op processing
	to get_class_binding_direct.
	(legacy_nonfn_member_lookup): Move asserts to
	get_class_binding_direct.
	(get_class_binding_direct): Abosorb asserts and conv_op processing.

	gcc/cp/
	* cp-tree.h (print_search_statistics,
	reinit_search_statistics): Delete.
	* tree.c (cxx_print_statistics): Don't print search stats.
	* search.c (n_fields_searched, n_calls_lookup_field,
	n_calls_lookup_field_1, n_calls_lookup_fnfields,
	n_calls_lookup_fnfields_1, n_calls_get_base_type,
	n_outer_fields_searched, n_contexts_saved): Delete.
	(lookup_member): Delete stats.
	(print_search_statistics, reinit_search_statistics): Delete.	

	Merge trunk r251283.

	gcc/cp/
	* cp-tree.h (lookup_field_1, lookup_fnfields_slot_nolazy): Delete.
	* name-lookup.h (lookup_all_conversions): Delete.
	* decl2.c (check_classfn): Lookup conversions directly.
	* pt.c (check_explicit_specialization): Likewise.
	* search.c (lookup_conversion_operator,
	lookup_fnfields_slot_nolazy, lookup_field_1): Move to ...
	* name-lookup.c (extract_conversion_operator,
	legacy_fn_member_lookup, legacy_nonfn_member_lookup): ... here.
	Make static.
	(get_class_binding_direct): Adjust.
	(lookup_all_conversions): Delete.

	gcc/cp/
	* cp-tree.h (lookup_fnfields_slot): Delete.
	* search.c (lookup_fnfields_slot): Delete.
	(look_for_overrides_here): Use get_class_binding.
	* call.c (build_user_type_conversion_1): Likewise.
	(has_trivial_copy_assign_p, has_trivial_copy_p): Likewise.
	* class.c (get_basefndecls, type_build_ctor_call,
	type_build_dtor_call): Likewise.
	* decl.c (register_dtor_fn): Likewise.
	* decl2.c (check_classfn): Likewise.
	* pt.c (retrieve_specialization,
	check_explicit_specialization): Likewise.
	* semantics.c (classtype_has_nothrow_assign_or_copy_p): Likewise.

	gcc/cp/
	* name-lookup.h (get_class_binding_direct): Declare.
	(get_class_binding): Adjust.
	* name-lookup.c (get_class_binding_direct): New.
	(get_class_binding): Adjust.
	* cp-tree.h (CLASSTYPE_CONSTRUCTORS, CLASSTYPE_DESTRUCTOR): Use
	get_class_binding_direct.
	* class.c (vbase_has_user_provided_move_assign): Likewise.
	(classtype_has_move_assign_or_move_ctor_p): Likewise.
	* decl2.c (check_classfn): Skip non-functions.
	* search.c (lookup_fnfields_slot): Forward to get_class_binding.
	(lookup_conversions_r): Use get_class_binding_direct.
	gcc/testsuite/
	* g++.dg/cpp0x/decltype9.C: Adjust messages.

2017-08-21  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* decl.c (reshape_init_class): Use get_class_binding.
	* name-lookup.c (get_class_binding): New.
	* name-lookup.h (get_class_binding): Declare.
	* search.c (lookup_field_r): Use get_class_binding.

	gcc/cp/
	* search.c (lookup_field_r): Remove obsolete code for type-named
	field in PoD.

	Merge trunk r251241.

	gcc/cp/
	* search.c (lookup_field_1) : Assert TYPE is a class.  Assert
	vfield is not special.
	(lookup_field_fuzzy_info::fuzzy_lookup_fnfields): Delete.
	(lookup_field_fuzzy_r): Adjust.

2017-08-17  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r251159.

2017-07-27  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* cp-tree.h (maybe_version_functions): Declare.
	* decl.c (maybe_version_functions): New.  Broken out of ...
	(decls_match): ... here.  Call it.
	* class.c (add_method): Add asserts, use maybe_version_functions.

	Add conversion marker fn.
	gcc/cp/
	* cp-tree.h (CPTI_CONV_OP_MARKER, conv_op_marker): New.
	* decl.c (initialize_predefined_identifiers): conv_op is conv_op.
	(cxx_init_decl_processing): Create conv_op_marker.
	* class.c (add_method): Compare identifiers.  Insert
	conv_op_marker for conv op overloads.
	(method_name_cmp, resort_method_name): Compare identifiers.
	* lex.c (make_conv_op_name): No need to set identifier kind.
	* search.c (lookup_fnfields_slot_nolazy): Compare identifiers,
	deal with conv_op_marker.

2017-07-21  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r250440.

	Merge trunk r250437.

	gcc/
	* dbxout.c: Restore from trunk.

	Merge trunk r250426.

	Conv ops are regular METHODVEC fns.
	gcc/cp/
	* cp-tree.h (CLASSTYPE_FIRST_CONVERSION_SLOT): Delete.
	* class (add-method): Treat conv ops as regular fns.
	(resort_type_method_vec, finish_struct_methods, warn_hidden) No
	need to skip conversion ops.
	* decl.c (initialize_predefined_identifiers): Naked
	conv_op_identifier is not a conv op.
	* lex.c (make_conv_op_name): Set identifier kind.
	* name-lookup.c (lookup_all_conversions): Use
	lookup_fnfields_slot_nolazy.
	* search.c (lookup_conversion_operator): Process passed in
	overload set.
	(lookup_fnfields_slot_nolazy): Don't skip conversion ops.  Process
	conversions after lookup.
	(lookup_conversions_r): Use lookup_fnfields_slot_nolazy.

2017-07-20  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r250413.

	Method vec sorted by identifier pointer (not conv ops)
	gcc/cp/
	* class.c (add_method): Use IDENTIFIER_POINTER.
	(method_name_cmp, resort_method_name_cmp): Likewise. DECL_NAME can
	never be NULL.
	* search.c (lookup_fnfields_slot_nolazy): Use IDENTIFIER_POINTER.

	Conv op names all same.
	gcc/cp/
	* cp-tree.h (CPTI_CONV_OP_IDENTIFIER): New.
	(conv_op_identifier): New.
	* decl.c (initialize_predefined_identifiers): Add it.
	* lex.c (make_conv_op_name): Names are not in the symbol table.

	All conv ops on one slot.
	gcc/cp/
	* class.c (add_method): Put conversion ops on a single slot.
	* name-lookup.c (lookup_all_conversions): Only examine single
	slot.
	* search.c (lookup_conversion_operator): Examine single slot in
	detail to pull out requested conversions.
	(lookup_conversions_r): Lose tmp/non-tmpl distinction. All ops on
	one slot.
	(lookup_conversions): Likewise.

	gcc/cp/
	* call.c (add_candidates): Move decls to initialization.  Don't
	use !!.

	Merge trunk r250380.

2017-07-19  Nathan Sidwell  <nathan@acm.org>

	Merge trunk r250344.

2017-07-18  Nathan Sidwell  <nathan@acm.org>

	gcc/cp/
	* search.c (lookup_conversion_operator): Return overloads not
	index.
	(lookup_fnfields_idx_nolazy): Absorb into ...
	(lookup_fnfields_slot_nolazy): ... this.
	(lookup_fnfields_1): Absorb into ...
	(lookup_fnfields_slot): ... this.

	Merge trunk r250313.

	Rename TYPE_{MIN,MAX}VAL to TYPE_{MIN,MAX}VAL_RAW.
	gcc/c/
	* c-parser.c (c_parser_array_notation): Use TYPE_{MIN,MAX}_VALUE.
	gcc/c-family/
	* c-warn.c (warn_for_memset): Use TYPE_{MIN,MAX}_VALUE.
	gcc/cp/
	* cp-array-notation.c (build_array_notation_ref): Use
	TYPE_{MIN,MAX}_VALUE.
	* cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS,
	PACK_EXPANSION_EXTRA_ARGS): Use TYPE_{MIN,MAX}VAL_RAW.
	fortran/
	* trans.c (gfc_build_array_ref): Use TYPE_{MIN,MAX}_VALUE.
	lto/
	* lto.c (mentions_vars_p_type): Use TYPE_{MIN,MAX}VAL_RAW.
	(compare_tree_sccs_1): Likewise.  Don't check BINFO directly.
	(lto_fixup_prevailing_decls): Use TYPE_{MIN,MAX}VAL_RAW.
	gcc/
	* tree.h (TYPE_MINVAL, TYPE_MAXVAL): Rename to ...
	(TYPE_MINVAL_RAW, TYPE_MAXVAL_RAW): ... these.
	* lto-streamer-out.c (DFS::DFS_write_tree_body): Use
	TYPE_{MIN,MAX}VAL_RAW.  Don't process BINFO directly.
	(hash_tree): Likewise.
	* tree-parloops.c (try_transform_to_exit_first_loop_alt): Use
	TYPE_MAX_VALUE.
	* tree-streamer-in.c (lto_input_ts_type_non_common_tree_pointers):
	Use TYPE_{MIN,MAX}VAL_RAW.  Don't process BINFO directly.
	* tree-streamer-out.c (write_ts_type_non_common_tree_pointers):
	Likewise.
	* tree.c (free_lang_data_in_type): Use switch, cleanup.
	(find_decls_types_r): Use TYPE_{MIN,MAX}VAL_RAW.  Don't process
	BINFO directly.
	(verify_type): Use TYPE_{MIN,MAX}VAL_RAW.  Move BINFO checking
	into RECORD check.
	objc/
	* objc-act.h (CLASS_NST_METHODS, CLASS_CLS_METHODS): Use
	TYPE_{MIN,MAX}VAL_RAW.

2017-07-17  Nathan Sidwell  <nathan@acm.org>

	Remove special ctor/dtor slots
	gcc/cp/
	* cp-tree.h (CLASSTYPE_CONSTRUCTOR_SLOT,
	CLASSTYPE_DESTRUCTOR_SLOT): Delete.
	(CLASSTYPE_FIRST_CONVERSION_SLOT): Set to zero.
	* class.c (add_method): cdtors do not have specia slots.
	* search.c (lookup_fnfields_idx_nolazy): Likewise.
	(look_for_overrides_here): Use lookup_fnfields_slot.

	Replace lang_type::sorted_fields with lang_type::bindings.
	(from c++modules branch)
	gcc/cp/
	* cp-tree.h (struct lang_type): Replace sorted_fields with
	bindings map.
	(CLASSTYPE_CONSTRUCTORS, CLASSTYPE_DESTRUCTOR): Use
	lookup_fnfields_slot_nolazy.
	(CLASSTYPE_SORTED_FIELDS): Replace with ...
	(CLASSTYPE_BINDINGS): ... this.
	(type_has_user_declared_move_constructor,
	type_has_user_declared_move_assign): Delete, replace with:
	(classtype_has_user_move_assign_or_ctor_p): ... this.
	(insert_late_enum_def_into_classtype_sorted_fields): Delete.
	(lookup_all_conversions): Delete.
	* decl.c (finish_enum_value_list): Use
	insert_late_enum_def_bindings.
	* method.c (maybe_explain_implicit_delete): Use
	classtype_has_user_move_assign_or_ctor_p.
	(lazily_declare_fn): Likewise.
	* class.c (maybe_warn_about_overly_private_class): Ignore
	copy/move ctors.
	(type_has_user_declared_move_constructor,
	type_has_user_declared_move_assign): Delete, replace with:
	(classtype_has_user_move_assign_or_ctor_p): ... this.
	(count_fields, add_fields_to_record_type,
	add_enum_fields_to_record_type, sorted_fields_type_new,
	create_classtype_sorted_fields,
	insert_late_enum_def_into_classtype_sorted_fields): Move to ...
	* name-lookup.c: ... here.
	(add_class_member, add_class_members, set_class_bindings): New.
	(lookup_class_member): New.  Broken out of ...
	* search.c (lookup_field_1): ... here.  Call it.
	(lookup_fnfields_idx_nolazy): Look directly at method_vec.
	(lookup_fnfields_slot_nolazy): Don't complete the type.
	(lookup_all_conversions): Move to name-lookup.c
	* semantics.c (classtype_has_nothrow_assign_or_copy_p): Use
	lookup_fnfields_slot always.
	* tree.c (type_has_nontrivial_copy_init): Use
	classtype_has_user_move_assign_or_ctor_p.
	* name-lookup.h (lookup_class_member,
	set_class_bindings, insert_late_enum_def_binsings,
	lookup_all_conversions): Declare.
	* pt.c (check_explicit_specialization): Use lookup_fnfields_slot.
	* ptree.c (cxx_print_type): Delete sorted-fields.
	gcc/c-family/
	* c-common.h (field_decl_cmp, resort_sorted_fields): Delete.
	(struct sorted_fields_type): Move to c-lang.h.
	* c-common.c (field_decl_cmp, resort_data,
	resort_field_decl_cmp): Move to c-decl.c.
	* c-ada-spec.c (decl_sloc): Ignore builtin fields.
	gcc/c/
	* c-decl.c (field_decl_cmp, resort_data,
	resort_field_decl_cmp): Moved from c-common.c
	* c-lang.h (struct sorted_fields_type): Moved from c-common.h.

2017-07-12  Nathan Sidwell  <nathan@acm.org>

	gcc/
	* tree-core.h (struct tree_type_non_common): Rename binfo to
	lang_1.
	* tree.h (TYPE_BINFO): Move to maxval field.
	(TYPE_LANG_SLOT_1): Allow any type.
	gcc/lto/
	* lto.c (mentions_vars_p_type, lto_fixup_prevailing_decls): Use
	TYPE_LANG_SLOT_1, not binfo.

2017-07-11  Nathan Sidwell  <nathan@acm.org>

	gcc/
	* tree.h (TYPE_METHODS): Delete.
	* tree.c (free_lang_data_in_type): Stitch out member functions and
	templates from TYPE_FIELDS.
	(build_distinct_type_copy, verify_type_variant,
	verify_type): Member fns are on TYPE_FIELDS.
	* tree-dump.c (dequeue_and_dump): No TYPE_METHODS.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	* dbxout.c (dbxout_type_fields): Member fns are on TYPE_FIELDS.
	(dbxout_type_method_1, dbxout_type_methods): Delete.
	(dbxout_type_fn_member): New, constructed from previous.
	(dbxout_type): No TYPE_METHODS scan.
	* dwarf2out.c (gen_member_die): Member fns are on TYPE_FIELDS.
	* function.c (use_register_for_decl): Always ignore register for
	class types when not optimizing.
	* ipa-devirt.c (odr_types_equivalent_p): Delete TYPE_METHODS scan.
	gcc/c-family/
	* c-ada-spec.c (is_tagged_type, has_nontrivial_methods,
	dump_ada_template, print_ada_methods,
	print_ada_declaration): Member fns are on TYPE_FIELDS.
	gcc/cp/
	* class.c (maybe_warn_about_overly_private_class,
	finish_struct_methods, one_inheriting_sig, count_fields,
	add_fields_to_record_type, check_field_decls, check_methods,
	clone_function_decl, set_method_tm_attributes,
	finalize_literal_type_property, check_bases_and_members,
	create_vtable_ptr, determine_key_method,
	unreverse_member_declarations, finish_struct,
	add_vcall_offset_vtbl_entries_1): Member fns are on TYPE_FIELDS.
	* decl.c (fixup_anonymous_aggr): Likewise.
	* decl2.c (reset_type_linkage_2): Likewise.
	* method.c (after_nsdmi_defaulted_late_checks,
	lazily_declare_fn): Likewise.
	* optimize.c (maybe_thunk_body, maybe_clone_body): Likewise.
	* pt.c (instantiate_class_template_1, tsubst_expr,
	do_type_instantiation, instantiate_pending_templates): Likewise.
	* search.c (lookup_field_1): Likewise.
	* semantics.c (finish_member_declaration,
	finish_omp_declare_simd_methods): Likewise.
	gcc/objc/
	* objc-runtime-shared-support.c (build_ivar_list_initializer):
	Don't presume first item is a FIELD_DECL.
	libcc1/
	* libcp1plugin.cc (plugin_build_decl): Member fns are on TYPE_FIELDS.
	gcc/testsuite/
	* g++.dg/ext/anon-struct6.C: Adjust diag.
	* g++.old-deja/g++.other/anon4.C: Adjust diag.

	gcc/cp/
	* decl2.c (mark_used): Reformat.
	* pt.c (instantiate_class_member): Delete.

2017-07-05  Nathan Sidwell  <nathan@acm.org>

	gcc/
	* tree.h (TYPE_METHODS): Delete.
	* tree.c (free_lang_data_in_type): Stitch out member functions and
	templates from TYPE_FIELDS.
	(build_distinct_type_copy, verify_type_variant,
	verify_type): Member fns are on TYPE_FIELDS.
	* tree-dump.c (dequeue_and_dump): No TYPE_METHODS.
	* tree-pretty-print.c (dump_generic_node): Likewise.
	* dbxout.c (dbxout_type_fields): Member fns are on TYPE_FIELDS.
	(dbxout_type_method_1, dbxout_type_methods): Delete.
	(dbxout_type_fn_member): New, constructed from previous.
	(dbxout_type): No TYPE_METHODS scan.
	* dwarf2out.c (gen_member_die): Member fns are on TYPE_FIELDS.
	* function.c (use_register_for_decl): Always ignore register for
	class types when not optimizing.
	* ipa-devirt.c (odr_types_equivalent_p): Delete TYPE_METHODS scan.
	gcc/c-family/
	* c-ada-spec.c (is_tagged_type, has_nontrivial_methods,
	dump_ada_template, print_ada_methods,
	print_ada_declaration): Member fns are on TYPE_FIELDS.
	gcc/cp/
	* class.c (maybe_warn_about_overly_private_class,
	finish_struct_methods, one_inheriting_sig, count_fields,
	add_fields_to_record_type, check_field_decls, check_methods,
	clone_function_decl, set_method_tm_attributes,
	finalize_literal_type_property, check_bases_and_members,
	create_vtable_ptr, determine_key_method,
	unreverse_member_declarations, finish_struct,
	add_vcall_offset_vtbl_entries_1): Member fns are on TYPE_FIELDS.
	* decl.c (fixup_anonymous_aggr): Likewise.
	* decl2.c (reset_type_linkage_2): Likewise.
	* method.c (after_nsdmi_defaulted_late_checks,
	lazily_declare_fn): Likewise.
	* optimize.c (maybe_thunk_body, maybe_clone_body): Likewise.
	* pt.c (instantiate_class_template_1, tsubst_expr,
	do_type_instantiation, instantiate_pending_templates): Likewise.
	* search.c (lookup_field_1): Likewise.
	* semantics.c (finish_member_declaration,
	finish_omp_declare_simd_methods): Likewise.
	libcc1/
	* libcp1plugin.cc (plugin_build_decl): Member fns are on TYPE_FIELDS.
	gcc/testsuite/
	* g++.dg/ext/anon-struct6.C: Adjust diag.
	* g++.old-deja/g++.other/anon4.C: Adjust diag.

	gcc/cp/
	* decl2.c (mark_used): Reformat.
	* pt.c (instantiate_class_member): Delete.

	Branch creation from trunk:250000
	Use this Changelog for all branch changes, including merges.

Local Variables:
mode: change-log
change-log-default-name: "ChangeLog.name-lookup"
End:
