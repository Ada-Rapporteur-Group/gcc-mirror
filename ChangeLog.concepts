2013-09-11  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/cxx-pretty-print.c (pp_cxx_compound_requirement),
	(pp_cxx_type_requirement), (pp_cxx_validtype_expr): Use 
	pp->type_id() instead of pp_cxx_type_id().

2013-09-09  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/pt.c (get_class_bindings): Pass the partial specialization
	for constraint evaluation. Evaluate constraints, resulting in
	deduction failure on error.
	(get_specializaing_template_decl), (get_specialization_constraints),
	(maybe_new_partial_specialization): New.
	(maybe_process_partial_specialization): Allow the creation of
	new types for constrained partial specializations.
	(process_partial_specialization): Modify the canonical type
	of constrained partial specializations.
	(instantiate_class_template_1): Do not explicitly check constraints
	during class template instantiation.
	(tsubst_decl): Instantiate the constraints of template declarations.
	(more_specialized_class): Pass specializations to get_class_bindings().
	Compare specialization constraints if the types are equivalent.
	(most_specialized_class): Pass specialization to get_class_bndings().
	* gcc/cp/decl2.c (check_class_fn): Get the decl's requirements from
	either the current template reqs or from the template parameters.
	Allow overloading of constrained out-of-class member definitions.
	* gcc/cp/semantics.c (fixup_template_type): New. Match the template
	scope to a specialization with appropriate constraints.
	(finish_template_type): Fix template type when entering scope.
	* gcc/cp/parser.c (cp_parser_parse_type_parameter): Attach
	requirements to the current template parameter list.
	(cp_parser_init_declarator): Parse requires clauses for out-of-class
	member definitions. Be sure to restore current constraints before
	exiting the function.
	(cp_parser_member_declarator): Restore the previous requirements in
	an early-exit branch.
	(cp_parser_late_parsing_for_member): Restore constraints after
	maybe_end_member_template_processing().
	(cp_parser_template_declaration_after_exp): Attach constraints to
	the current template parameters.
	* gcc/cp/constraint.cc (reduce_template_id): Don't crash when
	omitting ()'s on constraint calls.
	(check_requirements): Don't evaluate dependent arguments.
	(check_constraints): Don't try to evaluate when arguments are
	dependent.
	(equivalent_constraints): Optimize the case when a and b are the
	same constraints.

2013-07-26  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/semantics.c (trait_expr_value): Evaluate __is_same_as.
	(finish_trait_expr): Check __is_same_as and __is_convertible_to.
	* gcc/cp/constraint.cc (diagnose_trait): Diagnose failures in
	__is_same_as.
	* gcc/cp/parser.c (cp_parser_primary_expression), 
	(cp_parser_trait_expr): Parse __is_same_as.
	* gcc/cp/cp-tree.h (cp_trait_kind): Add CPTK_IS_SAME_AS.
	* gcc/cp/cxx-pretty-print.c (pp_cxx_trait_expression): Pretty print
	__is_same_as trait.

2013-07-26  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/tree.c (cp_walk_subtrees): Don't recurse through the
	requires expr parameter list.

2013-07-25  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/parser.c (cp_parser_requires_expr): Update parser using new
	requires expression nodes. Renamed some grammar productions to better 
	reflect the representation of the syntax. Create a new scope for 
	requires parameters.
	(cp_parser_nested_requirement): Wrap results in a NESTED_REQ node.        
	* gcc/cp/semantics.c (xvalue_result_type): New.
	(trait_expr_value): Evaluate __is_convertible_to.
	(finish_requires_expr): Implemented, along with other functions to
	construct and evaluate nodes for template constraints.
	(potential_constant_expression_1): Handle requires expressions.
	(finish_template_requirements), (finish_requires_expr), etc:
	Move to constraint.cc.
	* gcc/cp/cp-tree.def: (REQUIRES_EXPR), (EXPR_REQ), (TYPE_REQ),
	(NESTED_REQ), (VALIDEXPR_EXPR), (VALIDTYPE_EXPR), (CONSTEXPR_EXPR):
	New.
	* gcc/cp/cp-objcp-common.c (cp_common_init_ts): Make new nodes typed.
	* gcc/cp/cp-tree.h (finish_expr_requirement), 
	(finish_type_requirement), (finish_nested_requirement),
	(finish_validexpr_expr), (finish_validtype_expr),
	(finish_constexpr_expr): New.
	* gcc/cp/pt.c (convert_nontype_argument): Use can_convert_standard.
	(retrieve_local_specialization), (register_local_specialization),
	(extract_fnparm_pack): Make non-static.
	(tsubst_expr): Substitution rules for requires expressions.
	(instantiate_requirements): Move to constraints.cc
	(tsubst_constraint): Remove.
	* gcc/cp/call.c (can_convert): Allow user-defined conversions.
	(can_convert_standard): New.
	* gcc/cp/cvt.c (convert_to_reference): Use can_convert_standard.
	* gcc/cp/search.c (check_final_overrider): Use can_cnvert_standard.
	* gcc/cp/typeck.c (build_static_cast_1): Use can_convert_standard.
	* gcc/cp/error.c (dump_expr): Pretty print new nodes.
	* gcc/cp/cxx-pretty-print.c (pp_cxx_primary_expression): Pretty
	print new expr/req nodes.
	(pp_cxx_requires_expr): New along with related functions for
	pretty printing requirements.
	(pp_cxx_parameter_declaration_clause): Accommodate "raw" parameter
	lists in addition to function decls.
	(pp_cxx_requirement_parameter_list): Unified with parameter decl clause.
	* gcc/cp/cxx-pretty-print.h (pp_cxx_requires_expr): New along with
	related functions for pretty printing requirements.     
	* gcc/cp/logic.cc: Move header comments to top of file.
	* gcc/cp/constraint.cc (reduce_requirements): Handle requires
	expressions.
	(diagnose_constraints): Rename and handle requires expressions.

2013-07-01  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/error.c (cp_printer): Fix unnecessary whitespace change.
	* gcc/cp/constraint.cc (diagnose_node): Don't fail diagnosing
	disjunctions.

2013-07-01  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/class.c (are_constrained_member_overloads): Fix doc typos.

2013-06-24  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/parser.c (cp_parser_init_declarator): Parse template
	requirements for out-of-class member definitions.
	* gcc/cp/decl2.c (check_classfn): Include match out-of-class
	definitions using constraints.
	* gcc/cp/constraint.cc (equivalently_constrained). Use get_constraints.
	(more_constrained). Use get_constraints. 

2013-06-24  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/cp-tree.h (tree_template_info). Remove constraint from 
	template info.
	(check_template_info): Removed (unused).
	(TI_CONSTRAINT): Removed (no longer needed) along with related macros.
	(DECL_CONSTRAINTS): New. Get constraints from DECL_SIZE_UNIT for 
	template decls.
	(build_template_info): Removed overload taking constraints.
	(get_constraints): Removed (no longer needed).
	* gcc/cp/class.c (are_constrained_member_overlaods): Allow constrained 
	member function templates to be differentiated as overloads.
	* gcc/cp/decl.c (decls_match): Only compare constraints on 
	declarations.
	(grokfndecl): Don't pass constraints to build_template_info.
	* gcc/cp/tree.c (bind_template_template_parm): Don't pass constraints 
	to build_template_info.
	* gcc/cp/pt.c (build_template_info): Removed overload taking 
	constraints.
	(check_explicit_specialization): Don't build new constraints for 
	template info.
	(build_template_decl): Pass constraints. Update docs.
	(process_partial_specialization): Stub out support for constrained
	partial specialiations.
	(push_template_decl_real): Build template decls with current template 
	reqs. Don't pass constraints to build_template_info.
	(add_inherited_template_parms): Build new constraints from inherited
	template constructors.
	(redeclare_class_template): Update to new constraint interface.
	(is_compatible_template_arg): Update to new constraint interface.
	(lookup_template_class_1): Don't build new constraints or pass them to
	build_template_info.
	(instantiate_class_template_1): Update to new constraints interface.
	(tsubst_decl): Don't build new constraints or pass them to
	build_template_info. For function templates, explicitly instantiate
	new constraints for member functions of class templates.
	* gcc/cp/semantics.c: Associate constraints with template template 
	parms directly, not through template info.
	* gcc/cp/constraint.cc (get_constraints): Simplified to use new constraints
	interface.
	(check_constraints): Update to use new constraints interface.
	(equivalently_constrained): Update to use new constraints interface.
	(more_constrained): Update to use new constraints interface.
	* gcc/cp/parser.cpp (cp_parser_late_parsing_for_member): Update to use 
	new constraints interface.
	* gcc/cp/call.c (is_non_template_member_fn): New.
	(add_function_candidate): Only check constraints for non-template member
	functions.

2013-06-21  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/parser.c (cp_parser_requires_clause): Pulled out of
	cp_parser_requires_clause_opt for reuse in the requires expr parser.
	(cp_parser_requires_expression): New, along with a family of
	sub-expression parsers for the new feature.
	* gcc/cp/semantics.c (finish_requires_expr): Stub.
	(finish_syntax_requirement): Stub.
	(finish_type_requirement): Stub.
	(finish_constexpr_requirement): Stub.
	(finish_noexcept_requirement): Stub.
	(finish_requires_expr): Stub.
	* gcc/cp/cp-tree.h: (finish_requires_expr): New.
	(finish_syntax_requirement): New.
	(finsih_type_requirement): New.
	(finish_constexpr_requirement): New.
	(finish_noexcept_requirement): New.

2013-06-21  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/error.c (subst_to_string): Allow this to be called explicitly
	passing template parameters in the TREE_TYPE and with a null 
	TREE_PURPOSE.
	* constraint.cc (check_requirements): New overload taking template
	arguments.
	(check_constraints.cc): Move instantiation and checking into the
	new check_requirements overload.
	(diagnose_requirements): New family of functions for diagnosing 
	constraint failures.

2013-06-18  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/class.c (are_constrained_member_overloads): New.
	(add_method): Allow overloading of constrained member functions.
	* gcc/cp/call.c (rejection_reason_code): New rr_constraint_failure.
	(template_constraint_failure): New.
	(add_function_candidate): Check for viability as a precondition to use.
	(add_template_candidate_real): Integrate constraint diagnostics.
	Provide constraint info for new template instantiations.
	(print_z_candidate): Emit diagnostics for constraint failures.
	(template_decl_for_candidate): New.
	(joust): Allow non-member templates of class templates to be evaluated
	in more_specialized_fn if they are constrained.
	* gcc/cp/ptree.c (cxx_print_xnode): Dump constraint info.
	* gcc/cp/semantics.c (finish_template_template_parm): Build template
	info for template template parameters.
	(is_unary_trait): New.
	(is_binary_trait): New.
	(finish_trait_expr): Check for binary traits using new function.
	* gcc/cp/constraint.cc (join_requirements): New
	(conjoin_requirements): Join expressions correctly. Fixed docs.
	(disjoin_requirements): Removed.
	(is_constriant): Removed.
	(resolve_constraint_check): New. Replaces previous get_constraint
	check and related functions.
	(get_constraints): New, along with helper functions.
	(suppress_template_processing): New. 
	(check_template_constraints): New, along with helper functions.
	(equivalent_constraints): New.
	(equivalently_constrained): New.
	(more_constraints): New.
	(more_constrianed): New.
	(diagnose_constraint_failure): New.
	* gcc/cp/decl.c (decls_match): Check for constraint equivalence if
	the types are the same.
	(check_concept_refinement): New.
	(are_constrained_overloads): New.
	(duplicate_decls): Handle constraints for ambigous declarations. Check
	and diagnose concept refinement.
	(check_concept_fn): Don't fail completely just because the concept
	isn't defined correctly. Allow analysis to continue as if declared
	constexpr. Concepts must return bool.
	* gcc/cp/tree.c (bind_template_template_parm): Provide empty 
	constraints for bound template template parameters.
	* gcc/cp/logic.cc: Rewrite of proof state and related structures and
	decomposition logic. Removed right-decomposition logic, but retained
	right-logical rules.
	(match_terms): Renamed from entails.
	(subsumes_prop): Cleanup, added specific handlers for and/or cases.
	(subsumes_constraints): Update from interface change.
	* gcc/cp/cp-tree.h (check_constraint_info): Renamed and applied
	interface change.
	(check_template_info): Renamed and applied interface change.
	(cp_unevaluated): New
	(local_specialization_stack): New.
	(coerce_template_parms): New.
	(is_unary_trait): New.
	(is_binary_trait): New.
	(get_constraints): New.
	(check_constraints): New.
	(check_template_constraints): New.
	(subst_template_constraints): New.
	(equivalent_constraints): New.
	(equivalently_constrained): New.
	(more_constraints): New.
	(more_constrained): New.
	(diagnose_constraints_failure): New.
	* gcc/cp/cxx-pretty-print.c (pp_cxx_template_declaration): Print the
	template requirements.
	* gcc/cp/pt.c (local_specialization_stack): New.
	(build_template_info): Refactor into 3-argument version and 
	incorporate template requirements.
	(check_explicit_specialization): Instantiate requirements for
	template info.
	(push_template_decl_real): Include constraints in template info.
	(redeclare_class_template): Diagnose redeclaration with different
	constraints.
	(is_compatible_template_arg): New.
	(convert_template_argument): Check constraints on template template
	arguments and diagnose errors.
	(lookup_template_class_1): Check constraints on alias templates.
	Keep constraints with instantiated types.
	(instantiate_class_template_1): Check constraints on class templates.
	(tsubst_decl): Instantiate and keep constraints with template info.
	Also, allow dependent pack arguments to produce neww parameter
	packs when instantiated.
	(coerce_template_parms): New overload.
	(tsubst_copy): Handle REAL_TYPE and BOOLEAN_TYPE.
	(tsubst_copy_and_build): PARM_DECLs can be instantiated as pack
	expansions (used with requires expression).
	(fn_type_unification): Check constraints for function templates.
	(more_specialized_fn): Determine which candidate is more constrained.
	(substitute_template_parameters): Removed.
	(tsubst_constraint): New.
	(substitute_requirements): New.
	* gcc/cp/parser.c: (cp_parser_optional) Removed along with helper
	functions, etc.
	(cp_unevaluated): New.
	(cp_parser_type_parameter): Check for requires kw explicitly, and
	save/clear template requirements before parsing the requires clause.
	(cp_parser_requires_clause): Removed.
	(cp_parser_template_declaration_after_exp): Check for requires kw
	explicitly.
	* gcc/system.h (cstdlib): Removed include.
	* gcc/c-family/c-common.h (D_CXX_CONCEPTS): New flag for disabling
	concept keywords.
	* gcc/c-family/c.opt (flag_concepts): Remove redundant declaration.
	* gcc/c-family/c-common.c (c_common_r): Concept-specific keywords
	are only enabled when concepts are enabled.

2013-06-01  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/system.h (cstdlib): Include <cstdlib> to avoid poisoned
	declaration errors.
	* gcc/c-family/common.c (c_common_r): Added __is_same_as intrinsic,
	removed previous, unused intrinsics.
	* gcc/c-family/common.h (rid): Added RID_IS_SAME_AS.
	* gcc/cp/parser.c (take): New.
	(cp_requires_clause): New.
	(cp_requires_clause_opt): New.
	(cp_rule): New.
	(cp_parser_optional_if_token): New.
	(cp_parser_optional_if_not_token): New.
	(cp_parser_optional_if_keyword): New.
	(cp_parser_decl_specifier_seq): Parse 'concept' as a declspec.
	(cp_parser_type_parameter): Parse constrained template template parms.
	(cp_parser_member_specification_opt): Parse member constraints after
	the declaration, not before.
	(cp_parser_template_declaration_after_exp): Rewrote parsing for
	template requirements
	(cp_parser_late_parsing_for_member): Re-push the current template 
	requirements when late-parsing member definitions.
	* gcc/cp/decl.c (check_concept_fn): New.
	(grokfndecl): Semantics for concept declspec.
	(grokdeclarator): Semantics for concept declspec.
	(xref_tag_1): Update to new interface.
	* gcc/cp/constraint.cc (make_constraints): New.
	* gcc/cp/cp-objcp-common.c (cp_tree_size): Add case for constraint_info.
	* gcc/cp/cp-tree.h (require): New.
	(tree_template_info): Add a field for constraint info.
	(tree_constraint_info): New.
	(constraint_info_p): New.
	(template_info_p): New.
	(CI_SPELLING): New.
	(CI_REQUIREMENTS): New.
	(CI_ASSUMPTIONS): New.
	(TI_CONSTRAINT): New.
	(TI_SPELLING): New.
	(TI_REQUIREMENTS): New.
	(TI_ASSUMPTIONS): New.
	(DECL_TEMPLATE_CONSTRAINT): New.
	(CLASSTYPE_TEMPLATE_CONSTRAINT): New.
	(ENUM_TEMPLATE_CONSTRAINT): New.
	(TEMPLATE_TEMPLATE_PARM_TEMPLATE_CONSTRAINT): New.
	(TYPE_TEMPLATE_CONSTRAINT): New.
	(cp_tree_node_structure_enum): Added entry for constraint info.
	(lang_tree_node): Added entry for constraint info.
	(lang_decl_base): Added bit for concept declarations.
	(DECL_DECLARED_CONCEPT_P): New.
	(cp_decl_spec): Added ds_concept declaration specifier.
	* gcc/cp/Make-lang.in (logic.o): New target.
	* gcc/cp/semantics.c (finish_template_requirements): Rewrite.
	* gcc/cp/logic.cc: New
	* gcc/cp-tree.def (CONSTRAINT_INFO): New node.
	* gcc/cp/pt.c (current_template_args): Make non-static.
	(redeclare_class_template): Take constraints as a 3rd argument

2013-04-01  Andrew Sutton  <andrew.n.sutton@gmail.com>
	
	* gcc/cp/Make-lang.in: Add constraints.o target.
	* gcc/cp/cp-tree.h (substitute_template_parameters): Declare.
	(instantiate_requirements): Declare.
	(conjoin_requirements): Declare.
	(disjoin_requirements): Declare.
	(reduce_requirements): Declare.
	* gcc/cp/pt.c (substitute_template_parameters): Define.
	(instantiate_requirements): Define.
	* gcc/cp/pt.c (finish_template_requirements): Call
	reduce_requirements to get constraints.
	* gcc/cp/parser.c (cp_parser_type_parameter): Restore saved
	constraints after parsing template template parameter decl.
	* gcc/cp/constraints.cc: New.

2013-03-11  Andrew Sutton  <andrew.n.sutton@gmail.com>
	* gcc/cp/Make-lang.in: Add constraint.c
	* gcc/cp/constraint.c: New
	(conjoin_requirements): New
	(disjoin_requirements): New
	(requirement_reduction): New class
	(reduce_requirements): New
	* gcc/cp/cp-tree.h (reduce_requrements): New
	(conjoin_requirements): New
	(disjoin_requirements): New
	* gcc/cp/cp-tree.h (finish_template_template_parm) Comments.
	* gcc/cp/semantics.c (finish_template_requirements) Start
	working with requirements.


2013-03-01  Andrew Sutton  <andrew.n.sutton@gmail.com>

	* gcc/cp/cp-tree.h (saved_scope): Add template requirements.
	(finish_template_requirements): Declare
	* gcc/cp/parser.c (cp_parser_template_requirement_opt): Declare.
	(cp_parser_template_declaration): Document grammar extensions.
	(cp_parser_type_parameter): Parse requirements for template
	template parameters.
	(cp_parser_member_declaration): Parse requirements for
	members of class templates.
	(cp_parser_template_requirement_opt): Define.
	(cp_parser_template_declaration_after_exp): Parse requirements
	for template declarations.
	* gcc/cp/semantics.c (finish_template_requirements): Define.
	* gcc/cp/lex.c (cxx_init): Enable concepts by default.

2013-03-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* lex.c (flag_concepts): Revert left over declaration.

2013-03-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* gcc/c-family/c-common.c (cxx_dialect): Set C++11 as default.
	* gcc/c-family/c.opt(flag_concepts): Add.
	* gcc/cp/lex.c (flag_concepts): New.  Enabled concept support by
	default.

2013-02-28  Andrew Sutton  <andrew.n.sutton@gmail.com>

	* gcc/c-family/c-common.h (rid): New resreserved words for concepts.
	* gcc/c-family/c-common.c (c_common_reswords): Definitions thereof.
	* gcc/doc/extend.texi (write_symbol): Initial concept docs.
